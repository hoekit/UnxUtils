{\rtf1\windows \deff0{\fonttbl
{\f0\fswiss MS Sans Serif;}{\f1\fmodern Courier New;}{\f2\ftech Symbol;}}\fs20
\page #{\footnote hcAbout}${\footnote \pard{}About this help file}\pard{\fs24\b About this help file}\par\par\pard{}This file was made with the help of {\ul Makertf 3.12b-1}{\v hcMakertf} from the input file textutils.texi.\par\par{{START-INFO-DIR-ENTRY\line
* Text utilities: (textutils).          GNU text utilities.\line
* cat: (textutils)cat invocation.               Concatenate and write files.\line
* cksum: (textutils)cksum invocation.           Print {\scaps\fs16{}posix} CRC checksum.\line
* comm: (textutils)comm invocation.             Compare sorted files by line.\line
* csplit: (textutils)csplit invocation.         Split by context.\line
* cut: (textutils)cut invocation.               Print selected parts of lines.\line
* expand: (textutils)expand invocation.         Convert tabs to spaces.\line
* fmt: (textutils)fmt invocation.               Reformat paragraph text.\line
* fold: (textutils)fold invocation.             Wrap long input lines.\line
* head: (textutils)head invocation.             Output the first part of files.\line
* join: (textutils)join invocation.             Join lines on a common field.\line
* md5sum: (textutils)md5sum invocation.         Print or check message-digests.\line
* nl: (textutils)nl invocation.                 Number lines and write files.\line
* od: (textutils)od invocation.                 Dump files in octal, etc.\line
* paste: (textutils)paste invocation.           Merge lines of files.\line
* pr: (textutils)pr invocation.                 Paginate or columnate files.\line
* ptx: (textutils)ptx invocation.               Produce permuted indexes.\line
* sort: (textutils)sort invocation.             Sort text files.\line
* split: (textutils)split invocation.           Split into fixed-size pieces.\line
* sum: (textutils)sum invocation.               Print traditional checksum.\line
* tac: (textutils)tac invocation.               Reverse files.\line
* tail: (textutils)tail invocation.             Output the last part of files.\line
* tsort: (textutils)tsort invocation.           Topological sort.\line
* tr: (textutils)tr invocation.                 Translate characters.\line
* unexpand: (textutils)unexpand invocation.     Convert spaces to tabs.\line
* uniq: (textutils)uniq invocation.             Uniquify files.\line
* wc: (textutils)wc invocation.                 Byte, word, and line counts.\line
END-INFO-DIR-ENTRY\par
\pard{}}}\par
{\pard{}This file documents the GNU text utilities.\par
\par
\pard{}Copyright (C) 1994, 95, 96 Free Software Foundation, Inc.\par
\par
\pard{}Permission is granted to make and distribute verbatim copies of this manual provided the copyright notice and this permission notice are preserved on all copies.\par
\par
\pard{}Permission is granted to copy and distribute modified versions of this manual under the conditions for verbatim copying, provided that the entire resulting derived work is distributed under the terms of a permission notice identical to this one.\par
\par
\pard{}Permission is granted to copy and distribute translations of this manual into another language, under the above conditions for modified versions, except that this permission notice may be stated in a translation approved by the Foundation.  }\par
\par
{}\page\pard Node: {\b Top}, \keepn Next: {\uldb }{\v }, Prev: {\uldb }{\v }, Up: {\uldb (dir)}{\v Top @dir.hlp}\tab\tab{\uldb About this help file}{\v hcAbout}\line
K{\footnote K Top}
#{\footnote Top}
${\footnote \pard{}GNU text utilities}\par
\pard\pard{\fs24\b GNU text utilities}\par
\par
\pard{}{K{\footnote K text utilities}}{K{\footnote K utilities for text handling}} This manual documents version 2.0 of the GNU text utilities.\par
\par
{\par
\pard\keep\fi-2880\li2880\tx2880{}{\uldb Introduction}{\v Introduction}\tab Caveats, overview, and authors.\par
{\uldb Common options}{\v Common_options}\tab Common options.\par
{\uldb Output of entire files}{\v Output_of_entire_files}\tab cat tac nl od\par
{\uldb Formatting file contents}{\v Formatting_file_contents}\tab fmt pr fold\par
{\uldb Output of parts of files}{\v Output_of_parts_of_files}\tab head tail split csplit\par
{\uldb Summarizing files}{\v Summarizing_files}\tab wc sum cksum md5sum\par
{\uldb Operating on sorted files}{\v Operating_on_sorted_files}\tab sort uniq comm ptx tsort\par
{\uldb Operating on fields within a line}{\v Operating_on_fields_within_a_line}\tab cut paste join\par
{\uldb Operating on characters}{\v Operating_on_characters}\tab tr expand unexpand\par
{\uldb Opening the software toolbox}{\v Opening_the_software_toolbox}\tab The software tools philosophy.\par
{\uldb Index}{\v Index}\tab General index.\par
\par
  { --- The Detailed Node Listing ---\par
\par
  Output of entire files\par
\par
 \par
{\uldb cat invocation}{\v cat_invocation}\tab Concatenate and write files.\par
{\uldb tac invocation}{\v tac_invocation}\tab Concatenate and write files in reverse.\par
{\uldb nl invocation}{\v nl_invocation}\tab Number lines and write files.\par
{\uldb od invocation}{\v od_invocation}\tab Write files in octal or other formats.\par
\par
  Formatting file contents\par
\par
 \par
{\uldb fmt invocation}{\v fmt_invocation}\tab Reformat paragraph text.\par
{\uldb pr invocation}{\v pr_invocation}\tab Paginate or columnate files for printing.\par
{\uldb fold invocation}{\v fold_invocation}\tab Wrap input lines to fit in specified width.\par
\par
  Output of parts of files\par
\par
 \par
{\uldb head invocation}{\v head_invocation}\tab Output the first part of files.\par
{\uldb tail invocation}{\v tail_invocation}\tab Output the last part of files.\par
{\uldb split invocation}{\v split_invocation}\tab Split a file into fixed-size pieces.\par
{\uldb csplit invocation}{\v csplit_invocation}\tab Split a file into context-determined pieces.\par
\par
  Summarizing files\par
\par
 \par
{\uldb wc invocation}{\v wc_invocation}\tab Print byte, word, and line counts.\par
{\uldb sum invocation}{\v sum_invocation}\tab Print checksum and block counts.\par
{\uldb cksum invocation}{\v cksum_invocation}\tab Print CRC checksum and byte counts.\par
{\uldb md5sum invocation}{\v md5sum_invocation}\tab Print or check message-digests.\par
\par
  Operating on sorted files\par
\par
 \par
{\uldb sort invocation}{\v sort_invocation}\tab Sort text files.\par
{\uldb uniq invocation}{\v uniq_invocation}\tab Uniquify files.\par
{\uldb comm invocation}{\v comm_invocation}\tab Compare two sorted files line by line.\par
{\uldb ptx invocation}{\v ptx_invocation}\tab Produce a permuted index of file contents.\par
{\uldb tsort invocation}{\v tsort_invocation}\tab Topological sort.\par
\par
  {\f1{}ptx}: Produce permuted indexes\par
\par
 \par
{\uldb General options in ptx}{\v General_options_in_ptx}\tab Options which affect general program behavior.\par
{\uldb Charset selection in ptx}{\v Charset_selection_in_ptx}\tab Underlying character set considerations.\par
{\uldb Input processing in ptx}{\v Input_processing_in_ptx}\tab Input fields, contexts, and keyword selection.\par
{\uldb Output formatting in ptx}{\v Output_formatting_in_ptx}\tab Types of output format, and sizing the fields.\par
{\uldb Compatibility in ptx}{\v Compatibility_in_ptx}\tab The GNU extensions to {\f1{}ptx}\par
\par
  Operating on fields within a line\par
\par
 \par
{\uldb cut invocation}{\v cut_invocation}\tab Print selected parts of lines.\par
{\uldb paste invocation}{\v paste_invocation}\tab Merge lines of files.\par
{\uldb join invocation}{\v join_invocation}\tab Join lines on a common field.\par
\par
  Operating on characters\par
\par
 \par
{\uldb tr invocation}{\v tr_invocation}\tab Translate, squeeze, and/or delete characters.\par
{\uldb expand invocation}{\v expand_invocation}\tab Convert tabs to spaces.\par
{\uldb unexpand invocation}{\v unexpand_invocation}\tab Convert spaces to tabs.\par
\par
  {\f1{}tr}: Translate, squeeze, and/or delete characters\par
\par
 \par
{\uldb Character sets}{\v Character_sets}\tab Specifying sets of characters.\par
{\uldb Translating}{\v Translating}\tab Changing one characters to another.\par
{\uldb Squeezing}{\v Squeezing}\tab Squeezing repeats and deleting.\par
{\uldb Warnings in tr}{\v Warnings_in_tr}\tab Warning messages.\par
\par
  Opening the software toolbox\par
\par
 \par
{\uldb Toolbox introduction}{\v Toolbox_introduction}\tab Toolbox introduction\par
{\uldb I/O redirection}{\v I_O_redirection}\tab I/O redirection\par
{\uldb The who command}{\v The_who_command}\tab The {\f1{}who} command\par
{\uldb The cut command}{\v The_cut_command}\tab The {\f1{}cut} command\par
{\uldb The sort command}{\v The_sort_command}\tab The {\f1{}sort} command\par
{\uldb The uniq command}{\v The_uniq_command}\tab The {\f1{}uniq} command\par
{\uldb Putting the tools together}{\v Putting_the_tools_together}\tab Putting the tools together\par
\par
  }\par
\pard{}}\par
\pard{}ifnottex\par
\par
\page\pard Node: {\b Introduction}, \keepn Next: {\uldb Common options}{\v Common_options}, Prev: {\uldb Top}{\v Top}, Up: {\uldb Top}{\v Top}\line
K{\footnote K Introduction}
#{\footnote Introduction}
${\footnote \pard{}Introduction}\par
\pard{\fs24\b Introduction}\par
\par
\pard{}{K{\footnote K introduction}} This manual is incomplete: No attempt is made to explain basic concepts in a way suitable for novices.  Thus, if you are interested, please get involved in improving this manual.  The entire GNU community will benefit.\par
\par
\pard{}{K{\footnote K POSIX.2}}The GNU text utilities are mostly compatible with the {\scaps\fs16{}posix.2} standard.\par
\par
\pard{}{K{\footnote K bugs, reporting}}Please report bugs to <bug-textutils@gnu.org>.  Remember to include the version number, machine architecture, input files, and any other information needed to reproduce the bug: your input, what you expected, what you got, and why it is wrong.  Diffs are welcome, but please include a description of the problem as well, since this is sometimes difficult to infer. See {\uldb Bugs}{\v Bugs @gcc.hlp}.\par
\par
\pard{}This manual was originally derived from the Unix man pages in the distribution, which were written by David MacKenzie and updated by Jim Meyering.  What you are reading now is the authoritative documentation for these utilities;  the man pages are no longer being maintained.  The original {\f1{}fmt} man page was written by Ross Paterson.  Franc,ois Pinard did the initial conversion to Texinfo format.  Karl Berry did the indexing, some reorganization, and editing of the results.  Richard Stallman contributed his usual invaluable insights to the overall process.\par
\par
\page\pard Node: {\b Common options}, \keepn Next: {\uldb Output of entire files}{\v Output_of_entire_files}, Prev: {\uldb Introduction}{\v Introduction}, Up: {\uldb Top}{\v Top}\line
K{\footnote K Common options}
#{\footnote Common_options}
${\footnote \pard{}Common options}\par
\pard{\fs24\b Common options}\par
\par
\pard{}{K{\footnote K common options}} Certain options are available in all these programs.  Rather than writing identical descriptions for each of the programs, they are described here.  (In fact, every GNU program accepts (or should accept) these options.)\par
\par
\pard{}A few of these programs take arbitrary strings as arguments.  In those cases, {\f1{}--help} and {\f1{}--version} are taken as these options only if there is one and exactly one command line argument.\par
\par
{\pard{}{\f1{}--help}\par
\pard\li720{}{K{\footnote K -help}}{K{\footnote K help, online}}Print a usage message listing all available options, then exit successfully.\par
\par
\pard{}{\f1{}--version}\par
\pard\li720{}{K{\footnote K -version}}{K{\footnote K version number, finding}}Print the version number, then exit successfully.\par
\par
\pard{}}\par
\page\pard Node: {\b Output of entire files}, \keepn Next: {\uldb Formatting file contents}{\v Formatting_file_contents}, Prev: {\uldb Common options}{\v Common_options}, Up: {\uldb Top}{\v Top}\line
K{\footnote K Output of entire files}
#{\footnote Output_of_entire_files}
${\footnote \pard{}Output of entire files}\par
\pard{\fs24\b Output of entire files}\par
\par
\pard{}{K{\footnote K output of entire files}}{K{\footnote K entire files, output of}} These commands read and write entire files, possibly transforming them in some way.\par
\par
{\par
\pard\keep\fi-2880\li2880\tx2880{}{\uldb cat invocation}{\v cat_invocation}\tab Concatenate and write files.\par
{\uldb tac invocation}{\v tac_invocation}\tab Concatenate and write files in reverse.\par
{\uldb nl invocation}{\v nl_invocation}\tab Number lines and write files.\par
{\uldb od invocation}{\v od_invocation}\tab Write files in octal or other formats.\par
\pard{}}\par
\page\pard Node: {\b cat invocation}, \keepn Next: {\uldb tac invocation}{\v tac_invocation}, Prev: {\uldb }{\v }, Up: {\uldb Output of entire files}{\v Output_of_entire_files}\line
K{\footnote K cat invocation}
#{\footnote cat_invocation}
${\footnote {\f1{}\pard{}cat}: Concatenate and write files}\par
\pard{\fs24\b {\f1{}cat}: Concatenate and write files}\par
\par
\pard{}{K{\footnote K cat}}{K{\footnote K concatenate and write files}}{K{\footnote K copying files}} {\f1{}cat} copies each {\i file} ({\f1{}-} means standard input), or standard input if none are given, to standard output.  Synopsis:\par
\par
{\pard\keep\li720\f1{}cat [{\i option}] [{\i file}]...\par
\pard\f0{}}\par
\pard{}The program accepts the following options.  Also see {\uldb Common options}{\v Common_options}.\par
\par
{\pard{}{\f1{}-A}\par
\pard{}{\f1{}--show-all}\par
\pard\li720{}{K{\footnote K -A}}{K{\footnote K -show-all}}Equivalent to {\f1{}-vET}.\par
\par
\pard{}{\f1{}-B}\par
\pard{}{\f1{}--binary}\par
\pard\li720{}{K{\footnote K -B}}{K{\footnote K -binary}}{K{\footnote K binary and text I/O in cat}}On MS-DOS and MS-Windows only, read and write the files in binary mode.  By default, {\f1{}cat} on MS-DOS/MS-Windows uses binary mode only when standard output is redirected to a file or a pipe; this option overrides that.  Binary file I/O is used so that the files retain their format (Unix text as opposed to DOS text and binary), because {\f1{}cat} is frequently used as a file-copying program.  Some options (see below) cause {\f1{}cat} read and write files in text mode because then the original file contents aren't important (e.g., when lines are numbered by {\f1{}cat}, or when line endings should be marked).  This is so these options work as DOS/Windows users would expect; for example, DOS-style text files have their lines end with the CR-LF pair of characters which won't be processed as an empty line by {\f1{}-b} unless the file is read in text mode.\par
\par
\pard{}{\f1{}-b}\par
\pard{}{\f1{}--number-nonblank}\par
\pard\li720{}{K{\footnote K -b}}{K{\footnote K -number-nonblank}}Number all nonblank output lines, starting with 1.  On MS-DOS and MS-Windows, this option causes {\f1{}cat} to read and write files in text mode.\par
\par
\pard{}{\f1{}-e}\par
\pard\li720{}{K{\footnote K -e}}Equivalent to {\f1{}-vE}.\par
\par
\pard{}{\f1{}-E}\par
\pard{}{\f1{}--show-ends}\par
\pard\li720{}{K{\footnote K -E}}{K{\footnote K -show-ends}}Display a {\f1{}$} after the end of each line.  On MS-DOS and MS-Windows, this option causes {\f1{}cat} to read and write files in text mode.\par
\par
\pard{}{\f1{}-n}\par
\pard{}{\f1{}--number}\par
\pard\li720{}{K{\footnote K -n}}{K{\footnote K -number}}Number all output lines, starting with 1.  On MS-DOS and MS-Windows, this option causes {\f1{}cat} to read and write files in text mode.\par
\par
\pard{}{\f1{}-s}\par
\pard{}{\f1{}--squeeze-blank}\par
\pard\li720{}{K{\footnote K -s}}{K{\footnote K -squeeze-blank}}{K{\footnote K squeezing blank lines}}Replace multiple adjacent blank lines with a single blank line.  On MS-DOS and MS-Windows, this option causes {\f1{}cat} to read and write files in text mode.\par
\par
\pard{}{\f1{}-t}\par
\pard\li720{}{K{\footnote K -t}}Equivalent to {\f1{}-vT}.\par
\par
\pard{}{\f1{}-T}\par
\pard{}{\f1{}--show-tabs}\par
\pard\li720{}{K{\footnote K -T}}{K{\footnote K -show-tabs}}Display TAB characters as {\f1{}^I}.\par
\par
\pard{}{\f1{}-u}\par
\pard\li720{}{K{\footnote K -u}}Ignored; for Unix compatibility.\par
\par
\pard{}{\f1{}-v}\par
\pard{}{\f1{}--show-nonprinting}\par
\pard\li720{}{K{\footnote K -v}}{K{\footnote K -show-nonprinting}}Display control characters except for LFD and TAB using {\f1{}^} notation and precede characters that have the high bit set with {\f1{}M-}.  On MS-DOS and MS-Windows, this option causes {\f1{}cat} to read files and standard input in DOS binary mode, so the CR characters at the end of each line are also visible.\par
\par
\pard{}}\par
\page\pard Node: {\b tac invocation}, \keepn Next: {\uldb nl invocation}{\v nl_invocation}, Prev: {\uldb cat invocation}{\v cat_invocation}, Up: {\uldb Output of entire files}{\v Output_of_entire_files}\line
K{\footnote K tac invocation}
#{\footnote tac_invocation}
${\footnote {\f1{}\pard{}tac}: Concatenate and write files in reverse}\par
\pard{\fs24\b {\f1{}tac}: Concatenate and write files in reverse}\par
\par
\pard{}{K{\footnote K tac}}{K{\footnote K reversing files}} {\f1{}tac} copies each {\i file} ({\f1{}-} means standard input), or standard input if none are given, to standard output, reversing the records (lines by default) in each separately.  Synopsis:\par
\par
{\pard\keep\li720\f1{}tac [{\i option}]... [{\i file}]...\par
\pard\f0{}}\par
\pard{}\'A2Records\'A2 are separated by instances of a string (newline by default).  By default, this separator string is attached to the end of the record that it follows in the file.\par
\par
\pard{}The program accepts the following options.  Also see {\uldb Common options}{\v Common_options}.\par
\par
{\pard{}{\f1{}-b}\par
\pard{}{\f1{}--before}\par
\pard\li720{}{K{\footnote K -b}}{K{\footnote K -before}}The separator is attached to the beginning of the record that it precedes in the file.\par
\par
\pard{}{\f1{}-r}\par
\pard{}{\f1{}--regex}\par
\pard\li720{}{K{\footnote K -r}}{K{\footnote K -regex}}Treat the separator string as a regular expression.  Users of {\f1{}tac} on MS-DOS/MS-Windows should note that, since {\f1{}tac} reads files in binary mode, each line of a text file might end with a CR/LF pair instead of the Unix-style LF.\par
\par
\pard{}{\f1{}-s {\i separator}}\par
\pard{}{\f1{}--separator={\i separator}}\par
\pard\li720{}{K{\footnote K -s}}{K{\footnote K -separator}}Use {\i separator} as the record separator, instead of newline.\par
\par
\pard{}}\par
\page\pard Node: {\b nl invocation}, \keepn Next: {\uldb od invocation}{\v od_invocation}, Prev: {\uldb tac invocation}{\v tac_invocation}, Up: {\uldb Output of entire files}{\v Output_of_entire_files}\line
K{\footnote K nl invocation}
#{\footnote nl_invocation}
${\footnote {\f1{}\pard{}nl}: Number lines and write files}\par
\pard{\fs24\b {\f1{}nl}: Number lines and write files}\par
\par
\pard{}{K{\footnote K nl}}{K{\footnote K numbering lines}}{K{\footnote K line numbering}} {\f1{}nl} writes each {\i file} ({\f1{}-} means standard input), or standard input if none are given, to standard output, with line numbers added to some or all of the lines.  Synopsis:\par
\par
{\pard\keep\li720\f1{}nl [{\i option}]... [{\i file}]...\par
\pard\f0{}}\par
\pard{}{K{\footnote K logical pages, numbering on}}{\f1{}nl} decomposes its input into (logical) pages; by default, the line number is reset to 1 at the top of each logical page.  {\f1{}nl} treats all of the input files as a single document; it does not reset line numbers or logical pages between files.\par
\par
\pard{}{K{\footnote K headers, numbering}}{K{\footnote K body, numbering}}{K{\footnote K footers, numbering}}A logical page consists of three sections: header, body, and footer.  Any of the sections can be empty.  Each can be numbered in a different style from the others.\par
\par
\pard{}The beginnings of the sections of logical pages are indicated in the input file by a line containing exactly one of these delimiter strings:\par
\par
{\pard{}{\f1{}\'5C:\'5C:\'5C:}\par
\pard\li720{}start of header;\par
\par
\pard{}{\f1{}\'5C:\'5C:}\par
\pard\li720{}start of body;\par
\par
\pard{}{\f1{}\'5C:}\par
\pard\li720{}start of footer.\par
\pard{}}\par
\pard{}The two characters from which these strings are made can be changed from {\f1{}\'5C} and {\f1{}:} via options (see below), but the pattern and length of each string cannot be changed.\par
\par
\pard{}A section delimiter is replaced by an empty line on output.  Any text that comes before the first section delimiter string in the input file is considered to be part of a body section, so {\f1{}nl} treats a file that contains no section delimiters as a single body section.\par
\par
\pard{}The program accepts the following options.  Also see {\uldb Common options}{\v Common_options}.\par
\par
{\pard{}{\f1{}-b {\i style}}\par
\pard{}{\f1{}--body-numbering={\i style}}\par
\pard\li720{}{K{\footnote K -b}}{K{\footnote K -body-numbering}}Select the numbering style for lines in the body section of each logical page.  When a line is not numbered, the current line number is not incremented, but the line number separator character is still prepended to the line.  The styles are:\par
\par
{\pard\li720{}{\f1{}a}\par
\pard\li1440{}number all lines,\par
\par
\pard\li720{}{\f1{}t}\par
\pard\li1440{}number only nonempty lines (default for body),\par
\par
\pard\li720{}{\f1{}n}\par
\pard\li1440{}do not number lines (default for header and footer),\par
\par
\pard\li720{}{\f1{}p{\i regexp}}\par
\pard\li1440{}number only lines that contain a match for {\i regexp}.\par
\pard\li720{}}\par
\pard{}{\f1{}-d {\i cd}}\par
\pard{}{\f1{}--section-delimiter={\i cd}}\par
\pard\li720{}{K{\footnote K -d}}{K{\footnote K -section-delimiter}}{K{\footnote K section delimiters of pages}}Set the section delimiter characters to {\i cd}; default is {\f1{}\'5C:}. If only {\i c} is given, the second remains {\f1{}:}.  (Remember to protect {\f1{}\'5C} or other metacharacters from shell expansion with quotes or extra backslashes.)\par
\par
\pard{}{\f1{}-f {\i style}}\par
\pard{}{\f1{}--footer-numbering={\i style}}\par
\pard\li720{}{K{\footnote K -f}}{K{\footnote K -footer-numbering}}Analogous to {\f1{}--body-numbering}.\par
\par
\pard{}{\f1{}-h {\i style}}\par
\pard{}{\f1{}--header-numbering={\i style}}\par
\pard\li720{}{K{\footnote K -h}}{K{\footnote K -header-numbering}}Analogous to {\f1{}--body-numbering}.\par
\par
\pard{}{\f1{}-i {\i number}}\par
\pard{}{\f1{}--page-increment={\i number}}\par
\pard\li720{}{K{\footnote K -i}}{K{\footnote K -page-increment}}Increment line numbers by {\i number} (default 1).\par
\par
\pard{}{\f1{}-l {\i number}}\par
\pard{}{\f1{}--join-blank-lines={\i number}}\par
\pard\li720{}{K{\footnote K -l}}{K{\footnote K -join-blank-lines}}{K{\footnote K empty lines, numbering}}{K{\footnote K blank lines, numbering}}Consider {\i number} (default 1) consecutive empty lines to be one logical line for numbering, and only number the last one.  Where fewer than {\i number} consecutive empty lines occur, do not number them.  An empty line is one that contains no characters, not even spaces or tabs.\par
\par
\pard{}{\f1{}-n {\i format}}\par
\pard{}{\f1{}--number-format={\i format}}\par
\pard\li720{}{K{\footnote K -n}}{K{\footnote K -number-format}}Select the line numbering format (default is {\f1{}rn}):\par
\par
{\pard\li720{}{\f1{}ln}\par
\pard\li1440{}{K{\footnote K ln format for {\f1{}nl}}}left justified, no leading zeros;\par
\par
\pard\li720{}{\f1{}rn}\par
\pard\li1440{}{K{\footnote K rn format for {\f1{}nl}}}right justified, no leading zeros;\par
\par
\pard\li720{}{\f1{}rz}\par
\pard\li1440{}{K{\footnote K rz format for {\f1{}nl}}}right justified, leading zeros.\par
\pard\li720{}}\par
\pard{}{\f1{}-p}\par
\pard{}{\f1{}--no-renumber}\par
\pard\li720{}{K{\footnote K -p}}{K{\footnote K -no-renumber}}Do not reset the line number at the start of a logical page.\par
\par
\pard{}{\f1{}-s {\i string}}\par
\pard{}{\f1{}--number-separator={\i string}}\par
\pard\li720{}{K{\footnote K -s}}{K{\footnote K -number-separator}}Separate the line number from the text line in the output with {\i string} (default is the TAB character).\par
\par
\pard{}{\f1{}-v {\i number}}\par
\pard{}{\f1{}--starting-line-number={\i number}}\par
\pard\li720{}{K{\footnote K -v}}{K{\footnote K -starting-line-number}}Set the initial line number on each logical page to {\i number} (default 1).\par
\par
\pard{}{\f1{}-w {\i number}}\par
\pard{}{\f1{}--number-width={\i number}}\par
\pard\li720{}{K{\footnote K -w}}{K{\footnote K -number-width}}Use {\i number} characters for line numbers (default 6).\par
\par
\pard{}}\par
\page\pard Node: {\b od invocation}, \keepn Next: {\uldb }{\v }, Prev: {\uldb nl invocation}{\v nl_invocation}, Up: {\uldb Output of entire files}{\v Output_of_entire_files}\line
K{\footnote K od invocation}
#{\footnote od_invocation}
${\footnote {\f1{}\pard{}od}: Write files in octal or other formats}\par
\pard{\fs24\b {\f1{}od}: Write files in octal or other formats}\par
\par
\pard{}{K{\footnote K od}}{K{\footnote K octal dump of files}}{K{\footnote K hex dump of files}}{K{\footnote K ASCII dump of files}}{K{\footnote K file contents, dumping unambiguously}} {\f1{}od} writes an unambiguous representation of each {\i file} ({\f1{}-} means standard input), or standard input if none are given.  Synopsis:\par
\par
{\pard\keep\li720\f1{}od [{\i option}]... [{\i file}]...\line
od -C [{\i file}] [[+]{\i offset} [[+]{\i label}]]\par
\pard\f0{}}\par
\pard{}Each line of output consists of the offset in the input, followed by groups of data from the file. By default, {\f1{}od} prints the offset in octal, and each group of file data is two bytes of input printed as a single octal number.\par
\par
\pard{}The program accepts the following options.  Also see {\uldb Common options}{\v Common_options}.\par
\par
{\pard{}{\f1{}-A {\i radix}}\par
\pard{}{\f1{}--address-radix={\i radix}}\par
\pard\li720{}{K{\footnote K -A}}{K{\footnote K -address-radix}}{K{\footnote K radix for file offsets}}{K{\footnote K file offset radix}}Select the base in which file offsets are printed.  {\i radix} can be one of the following:\par
\par
{\pard\li720{}{\f1{}d}\par
\pard\li1440{}decimal;\par
\par
\pard\li720{}{\f1{}o}\par
\pard\li1440{}octal;\par
\par
\pard\li720{}{\f1{}x}\par
\pard\li1440{}hexadecimal;\par
\par
\pard\li720{}{\f1{}n}\par
\pard\li1440{}none (do not print offsets).\par
\pard\li720{}}\par
\pard\li720{}The default is octal.\par
\par
\pard{}{\f1{}-j {\i bytes}}\par
\pard{}{\f1{}--skip-bytes={\i bytes}}\par
\pard\li720{}{K{\footnote K -j}}{K{\footnote K -skip-bytes}}Skip {\i bytes} input bytes before formatting and writing.  If {\i bytes} begins with {\f1{}0x} or {\f1{}0X}, it is interpreted in hexadecimal; otherwise, if it begins with {\f1{}0}, in octal; otherwise, in decimal.  Appending {\f1{}b} multiplies {\i bytes} by 512, {\f1{}k} by 1024, and {\f1{}m} by 1048576.\par
\par
\pard{}{\f1{}-N {\i bytes}}\par
\pard{}{\f1{}--read-bytes={\i bytes}}\par
\pard\li720{}{K{\footnote K -N}}{K{\footnote K -read-bytes}}Output at most {\i bytes} bytes of the input.  Prefixes and suffixes on {\f1{}bytes} are interpreted as for the {\f1{}-j} option.\par
\par
\pard{}{\f1{}-s [{\i n}]}\par
\pard{}{\f1{}--strings[={\i n}]}\par
\pard\li720{}{K{\footnote K -s}}{K{\footnote K -strings}}{K{\footnote K string constants, outputting}}Instead of the normal output, output only \'A2string constants\'A2: at least {\i n} (3 by default) consecutive {\scaps\fs16{}ascii} graphic characters, followed by a null (zero) byte.\par
\par
\pard{}{\f1{}-t {\i type}}\par
\pard{}{\f1{}--format={\i type}}\par
\pard\li720{}{K{\footnote K -t}}{K{\footnote K -format}}Select the format in which to output the file data.  {\i type} is a string of one or more of the below type indicator characters.  If you include more than one type indicator character in a single {\i type} string, or use this option more than once, {\f1{}od} writes one copy of each output line using each of the data types that you specified, in the order that you specified.\par
\par
\pard\li720{}Adding a trailing "z" to any type specification appends a display of the {\scaps\fs16{}ascii} character representation of the printable characters to the output line generated by the type specification.\par
\par
{\pard\li720{}{\f1{}a}\par
\pard\li1440{}named character,\par
\par
\pard\li720{}{\f1{}c}\par
{\scaps\fs16{}\pard\li1440{}ascii} character or backslash escape,\par
\par
\pard\li720{}{\f1{}d}\par
\pard\li1440{}signed decimal,\par
\par
\pard\li720{}{\f1{}f}\par
\pard\li1440{}floating point,\par
\par
\pard\li720{}{\f1{}o}\par
\pard\li1440{}octal,\par
\par
\pard\li720{}{\f1{}u}\par
\pard\li1440{}unsigned decimal,\par
\par
\pard\li720{}{\f1{}x}\par
\pard\li1440{}hexadecimal.\par
\pard\li720{}}\par
\pard\li720{}The type {\f1{}a} outputs things like {\f1{}sp} for space, {\f1{}nl} for newline, and {\f1{}nul} for a null (zero) byte.  Type {\f1{}c} outputs {\f1{} }, {\f1{}\'5Cn}, and {\f1{}\'5C0}, respectively.\par
\par
\pard\li720{}{K{\footnote K type size}}Except for types {\f1{}a} and {\f1{}c}, you can specify the number of bytes to use in interpreting each number in the given data type by following the type indicator character with a decimal integer.  Alternately, you can specify the size of one of the C compiler's built-in data types by following the type indicator character with one of the following characters.  For integers ({\f1{}d}, {\f1{}o}, {\f1{}u}, {\f1{}x}):\par
\par
{\pard\li720{}{\f1{}C}\par
\pard\li1440{}char,\par
\par
\pard\li720{}{\f1{}S}\par
\pard\li1440{}short,\par
\par
\pard\li720{}{\f1{}I}\par
\pard\li1440{}int,\par
\par
\pard\li720{}{\f1{}L}\par
\pard\li1440{}long.\par
\pard\li720{}}\par
\pard\li720{}For floating point ({\f1{}f}):\par
\par
{\pard\li720{}F\par
\pard\li1440{}float,\par
\par
\pard\li720{}D\par
\pard\li1440{}double,\par
\par
\pard\li720{}L\par
\pard\li1440{}long double.\par
\pard\li720{}}\par
\pard{}{\f1{}-v}\par
\pard{}{\f1{}--output-duplicates}\par
\pard\li720{}{K{\footnote K -v}}{K{\footnote K -output-duplicates}}Output consecutive lines that are identical.  By default, when two or more consecutive output lines would be identical, {\f1{}od} outputs only the first line, and puts just an asterisk on the following line to indicate the elision.\par
\par
\pard{}{\f1{}-w[{\i n}]}\par
\pard{}{\f1{}--width[={\i n}]}\par
\pard\li720{}{K{\footnote K -w}}{K{\footnote K -width}}Dump {\f1{}n} input bytes per output line.  This must be a multiple of the least common multiple of the sizes associated with the specified output types.  If {\i n} is omitted, the default is 32.  If this option is not given at all, the default is 16.\par
\par
\pard{}}\par
\pard{}The next several options map the old, pre-{\scaps\fs16{}posix} format specification options to the corresponding {\scaps\fs16{}posix} format specs.  GNU {\f1{}od} accepts any combination of old- and new-style options.  Format specification options accumulate.\par
\par
{\pard{}{\f1{}-a}\par
\pard\li720{}{K{\footnote K -a}}Output as named characters.  Equivalent to {\f1{}-ta}.\par
\par
\pard{}{\f1{}-b}\par
\pard\li720{}{K{\footnote K -b}}Output as octal bytes.  Equivalent to {\f1{}-toC}.\par
\par
\pard{}{\f1{}-c}\par
\pard\li720{}{K{\footnote K -c}}Output as {\scaps\fs16{}ascii} characters or backslash escapes.  Equivalent to {\f1{}-tc}.\par
\par
\pard{}{\f1{}-d}\par
\pard\li720{}{K{\footnote K -d}}Output as unsigned decimal shorts.  Equivalent to {\f1{}-tu2}.\par
\par
\pard{}{\f1{}-f}\par
\pard\li720{}{K{\footnote K -f}}Output as floats.  Equivalent to {\f1{}-tfF}.\par
\par
\pard{}{\f1{}-h}\par
\pard\li720{}{K{\footnote K -h}}Output as hexadecimal shorts.  Equivalent to {\f1{}-tx2}.\par
\par
\pard{}{\f1{}-i}\par
\pard\li720{}{K{\footnote K -i}}Output as decimal shorts.  Equivalent to {\f1{}-td2}.\par
\par
\pard{}{\f1{}-l}\par
\pard\li720{}{K{\footnote K -l}}Output as decimal longs.  Equivalent to {\f1{}-td4}.\par
\par
\pard{}{\f1{}-o}\par
\pard\li720{}{K{\footnote K -o}}Output as octal shorts.  Equivalent to {\f1{}-to2}.\par
\par
\pard{}{\f1{}-x}\par
\pard\li720{}{K{\footnote K -x}}Output as hexadecimal shorts.  Equivalent to {\f1{}-tx2}.\par
\par
\pard{}{\f1{}-C}\par
\pard{}{\f1{}--traditional}\par
\pard\li720{}{K{\footnote K -traditional}}Recognize the pre-POSIX non-option arguments that traditional {\f1{}od} accepted.  The following syntax:\par
\par
{\pard\keep\li1440\f1{}od --traditional [{\i file}] [[+]{\i offset}[.][b] [[+]{\i label}[.][b]]]\par
\pard\li720\f0{}}\par
\pard\li720{}can be used to specify at most one file and optional arguments specifying an offset and a pseudo-start address, {\i label}.  By default, {\i offset} is interpreted as an octal number specifying how many input bytes to skip before formatting and writing.  The optional trailing decimal point forces the interpretation of {\i offset} as a decimal number.  If no decimal is specified and the offset begins with {\f1{}0x} or {\f1{}0X} it is interpreted as a hexadecimal number.  If there is a trailing {\f1{}b}, the number of bytes skipped will be {\i offset} multiplied by 512.  The {\i label} argument is interpreted just like {\i offset}, but it specifies an initial pseudo-address.  The pseudo-addresses are displayed in parentheses following any normal address.\par
\par
\pard{}}\par
\page\pard Node: {\b Formatting file contents}, \keepn Next: {\uldb Output of parts of files}{\v Output_of_parts_of_files}, Prev: {\uldb Output of entire files}{\v Output_of_entire_files}, Up: {\uldb Top}{\v Top}\line
K{\footnote K Formatting file contents}
#{\footnote Formatting_file_contents}
${\footnote \pard{}Formatting file contents}\par
\pard{\fs24\b Formatting file contents}\par
\par
\pard{}{K{\footnote K formatting file contents}} These commands reformat the contents of files.\par
\par
{\par
\pard\keep\fi-2880\li2880\tx2880{}{\uldb fmt invocation}{\v fmt_invocation}\tab Reformat paragraph text.\par
{\uldb pr invocation}{\v pr_invocation}\tab Paginate or columnate files for printing.\par
{\uldb fold invocation}{\v fold_invocation}\tab Wrap input lines to fit in specified width.\par
\pard{}}\par
\page\pard Node: {\b fmt invocation}, \keepn Next: {\uldb pr invocation}{\v pr_invocation}, Prev: {\uldb }{\v }, Up: {\uldb Formatting file contents}{\v Formatting_file_contents}\line
K{\footnote K fmt invocation}
#{\footnote fmt_invocation}
${\footnote {\f1{}\pard{}fmt}: Reformat paragraph text}\par
\pard{\fs24\b {\f1{}fmt}: Reformat paragraph text}\par
\par
\pard{}{K{\footnote K fmt}}{K{\footnote K reformatting paragraph text}}{K{\footnote K paragraphs, reformatting}}{K{\footnote K text, reformatting}} {\f1{}fmt} fills and joins lines to produce output lines of (at most) a given number of characters (75 by default).  Synopsis:\par
\par
{\pard\keep\li720\f1{}fmt [{\i option}]... [{\i file}]...\par
\pard\f0{}}\par
{\f1{}\pard{}fmt} reads from the specified {\i file} arguments (or standard input if none are given), and writes to standard output.\par
\par
\pard{}By default, blank lines, spaces between words, and indentation are preserved in the output; successive input lines with different indentation are not joined; tabs are expanded on input and introduced on output.\par
\par
\pard{}{K{\footnote K line-breaking}}{K{\footnote K sentences and line-breaking}}{K{\footnote K Knuth, Donald E.}}{K{\footnote K Plass, Michael F.}}{\f1{}fmt} prefers breaking lines at the end of a sentence, and tries to avoid line breaks after the first word of a sentence or before the last word of a sentence.  A \'A2sentence break\'A2 is defined as either the end of a paragraph or a word ending in any of {\f1{}.?!}, followed by two spaces or end of line, ignoring any intervening parentheses or quotes.  Like TeX, {\f1{}fmt} reads entire "paragraphs" before choosing line breaks; the algorithm is a variant of that in "Breaking Paragraphs Into Lines" (Donald E. Knuth and Michael F. Plass, {\i Software--Practice and Experience}, 11 (1981), 1119-1184).\par
\par
\pard{}The program accepts the following options.  Also see {\uldb Common options}{\v Common_options}.\par
\par
{\pard{}{\f1{}-c}\par
\pard{}{\f1{}--crown-margin}\par
\pard\li720{}{K{\footnote K -c}}{K{\footnote K -crown-margin}}{K{\footnote K crown margin}}\'A2Crown margin\'A2 mode: preserve the indentation of the first two lines within a paragraph, and align the left margin of each subsequent line with that of the second line.\par
\par
\pard{}{\f1{}-t}\par
\pard{}{\f1{}--tagged-paragraph}\par
\pard\li720{}{K{\footnote K -t}}{K{\footnote K -tagged-paragraph}}{K{\footnote K tagged paragraphs}}\'A2Tagged paragraph\'A2 mode: like crown margin mode, except that if indentation of the first line of a paragraph is the same as the indentation of the second, the first line is treated as a one-line paragraph.\par
\par
\pard{}{\f1{}-s}\par
\pard{}{\f1{}--split-only}\par
\pard\li720{}{K{\footnote K -s}}{K{\footnote K -split-only}}Split lines only.  Do not join short lines to form longer ones.  This prevents sample lines of code, and other such "formatted" text from being unduly combined.\par
\par
\pard{}{\f1{}-u}\par
\pard{}{\f1{}--uniform-spacing}\par
\pard\li720{}{K{\footnote K -u}}{K{\footnote K -uniform-spacing}}Uniform spacing.  Reduce spacing between words to one space, and spacing between sentences to two spaces.\par
\par
\pard{}{\f1{}-{\i width}}\par
\pard{}{\f1{}-w {\i width}}\par
\pard{}{\f1{}--width={\i width}}\par
\pard\li720{}{K{\footnote K -{\i width}}}{K{\footnote K -w}}{K{\footnote K -width}}Fill output lines up to {\i width} characters (default 75).  {\f1{}fmt} initially tries to make lines about 7% shorter than this, to give it room to balance line lengths.\par
\par
\pard{}{\f1{}-p {\i prefix}}\par
\pard{}{\f1{}--prefix={\i prefix}}\par
\pard\li720{}Only lines beginning with {\i prefix} (possibly preceded by whitespace) are subject to formatting. The prefix and any preceding whitespace are stripped for the formatting and then re-attached to each formatted output line.  One use is to format certain kinds of program comments, while leaving the code unchanged.\par
\par
\pard{}}\par
\page\pard Node: {\b pr invocation}, \keepn Next: {\uldb fold invocation}{\v fold_invocation}, Prev: {\uldb fmt invocation}{\v fmt_invocation}, Up: {\uldb Formatting file contents}{\v Formatting_file_contents}\line
K{\footnote K pr invocation}
#{\footnote pr_invocation}
${\footnote {\f1{}\pard{}pr}: Paginate or columnate files for printing}\par
\pard{\fs24\b {\f1{}pr}: Paginate or columnate files for printing}\par
\par
\pard{}{K{\footnote K pr}}{K{\footnote K printing, preparing files for}}{K{\footnote K multicolumn output, generating}}{K{\footnote K merging files in parallel}} {\f1{}pr} writes each {\i file} ({\f1{}-} means standard input), or standard input if none are given, to standard output, paginating and optionally outputting in multicolumn format; optionally merges all {\i file}s, printing all in parallel, one per column.  Synopsis:\par
\par
{\pard\keep\li720\f1{}pr [{\i option}]... [{\i file}]...\par
\pard\f0{}}\par
\pard{}By default, a 5-line header is printed at each page: two blank lines; a line with the date, the filename, and the page count; and two more blank lines.  A footer of five blank lines is also printed.  With the {\f1{}-F} option, a 3-line header is printed: the leading two blank lines are omitted; no footer is used.  The default {\i page_length} in both cases is 66 lines.  The default number of text lines changes from 56 (without {\f1{}-F}) to 63 (with {\f1{}-F}).  The text line of the header takes up the full {\i page_width} in the form {\f1{}yyyy-mm-dd HH:MM string Page nnnn}.  String is a centered header string.\par
\par
\pard{}Form feeds in the input cause page breaks in the output.  Multiple form feeds produce empty pages.\par
\par
\pard{}Columns are of equal width, separated by an optional string (default is {\f1{}space}).  For multicolumn output, lines will always be truncated to {\i page_width} (default 72), unless you use the {\f1{}-J} option.  For single column output no line truncation occurs by default.  Use {\f1{}-W} option to truncate lines in that case.\par
\par
\pard{}Including version 1.22i:\par
\par
\pard{}Some small {\i letter options} ({\f1{}-s}, {\f1{}-w}) has been redefined with the object of a better {\i posix} compliance.  The output of some further cases has been adapted to other {\i unix}es.  A violation of downward compatibility has to be accepted.\par
\par
\pard{}Some {\i new capital letter} options ({\f1{}-J}, {\f1{}-S}, {\f1{}-W}) has been introduced to turn off unexpected interferences of small letter options.  The {\f1{}-N} option and the second argument {\i last_page} of {\f1{}+FIRST_PAGE} offer more flexibility.  The detailed handling of form feeds set in the input files requires {\f1{}-T} option.\par
\par
\pard{}Capital letter options dominate small letter ones.\par
\par
\pard{}Some of the option-arguments (compare {\f1{}-s}, {\f1{}-S}, {\f1{}-e}, {\f1{}-i}, {\f1{}-n}) cannot be specified as separate arguments from the preceding option letter (already stated in the {\i posix} specification).\par
\par
\pard{}The program accepts the following options.  Also see {\uldb Common options}{\v Common_options}.\par
\par
{\pard{}{\f1{}+{\i first_page}[:{\i last_page}]}\par
\pard{}{\f1{}--pages={\i first_page}[:{\i last_page}]}\par
\pard\li720{}{K{\footnote K +{\i first_page}[:{\i last_page}]}}{K{\footnote K -pages}}Begin printing with page {\i first_page} and stop with {\i last_page}.  Missing {\f1{}:{\i last_page}} implies end of file.  While estimating the number of skipped pages each form feed in the input file results in a new page.  Page counting with and without {\f1{}+{\i first_page}} is identical.  By default, counting starts with the first page of input file (not first page printed).  Line numbering may be altered by {\f1{}-N} option.\par
\par
\pard{}{\f1{}-{\i column}}\par
\pard{}{\f1{}--columns={\i column}}\par
\pard\li720{}{K{\footnote K -{\i column}}}{K{\footnote K -columns}}{K{\footnote K down columns}}With each single {\i file}, produce {\i column} columns of output (default is 1) and print columns down, unless {\f1{}-a} is used.  The column width is automatically decreased as {\i column} increases; unless you use the {\f1{}-W/-w} option to increase {\i page_width} as well.  This option might well cause some lines to be truncated.  The number of lines in the columns on each page are balanced.  The options {\f1{}-e} and {\f1{}-i} are on for multiple text-column output.  Together with {\f1{}-J} option column alignment and line truncation is turned off.  Lines of full length are joined in a free field format and {\f1{}-S} option may set field separators.  {\f1{}-{\i column}} may not be used with {\f1{}-m} option.\par
\par
\pard{}{\f1{}-a}\par
\pard{}{\f1{}--across}\par
\pard\li720{}{K{\footnote K -a}}{K{\footnote K -across}}{K{\footnote K across columns}}With each single {\i file}, print columns across rather than down.  The {\f1{}-{\i column}} option must be given with {\i column} greater than one.  If a line is too long to fit in a column, it is truncated.\par
\par
\pard{}{\f1{}-c}\par
\pard{}{\f1{}--show-control-chars}\par
\pard\li720{}{K{\footnote K -c}}{K{\footnote K -show-control-chars}}Print control characters using hat notation (e.g., {\f1{}^G}); print other unprintable characters in octal backslash notation.  By default, unprintable characters are not changed.\par
\par
\pard{}{\f1{}-d}\par
\pard{}{\f1{}--double-space}\par
\pard\li720{}{K{\footnote K -d}}{K{\footnote K -double-space}}{K{\footnote K double spacing}}Double space the output.\par
\par
\pard{}{\f1{}-e[{\i in-tabchar}[{\i in-tabwidth}]]}\par
\pard{}{\f1{}--expand-tabs[={\i in-tabchar}[{\i in-tabwidth}]]}\par
\pard\li720{}{K{\footnote K -e}}{K{\footnote K -expand-tabs}}{K{\footnote K input tabs}}Expand {\i tab}s to spaces on input.  Optional argument {\i in-tabchar} is the input tab character (default is the TAB character).  Second optional argument {\i in-tabwidth} is the input tab character's width (default is 8).\par
\par
\pard{}{\f1{}-f}\par
\pard{}{\f1{}-F}\par
\pard{}{\f1{}--form-feed}\par
\pard\li720{}{K{\footnote K -F}}{K{\footnote K -f}}{K{\footnote K -form-feed}}Use a form feed instead of newlines to separate output pages.  The default page length of 66 lines is not altered.  But the number of lines of text per page changes from default 56 to 63 lines.\par
\par
\pard{}{\f1{}-h {\i HEADER}}\par
\pard{}{\f1{}--header={\i HEADER}}\par
\pard\li720{}{K{\footnote K -h}}{K{\footnote K -header}}Replace the filename in the header with the centered string {\i header}.  Left-hand-side truncation (marked by a {\f1{}*}) may occur if the total header line {\f1{}yyyy-mm-dd HH:MM HEADER Page nnnn} becomes larger than {\i page_width}.  {\f1{}-h ""} prints a blank line header.  Don't use {\f1{}-h""}.  A space between the {\f1{}-h} option and the argument is always indispensable.\par
\par
\pard{}{\f1{}-i[{\i out-tabchar}[{\i out-tabwidth}]]}\par
\pard{}{\f1{}--output-tabs[={\i out-tabchar}[{\i out-tabwidth}]]}\par
\pard\li720{}{K{\footnote K -i}}{K{\footnote K -output-tabs}}{K{\footnote K output tabs}}Replace spaces with {\i tab}s on output.  Optional argument {\i out-tabchar} is the output tab character (default is the TAB character).  Second optional argument {\i out-tabwidth} is the output tab character's width (default is 8).\par
\par
\pard{}{\f1{}-J}\par
\pard{}{\f1{}--join-lines}\par
\pard\li720{}{K{\footnote K -J}}{K{\footnote K -join-lines}}Merge lines of full length.  Used together with the column options {\f1{}-{\i column}}, {\f1{}-a -{\i column}} or {\f1{}-m}.  Turns off {\f1{}-W/-w} line truncation; no column alignment used; may be used with {\f1{}-S[{\i string}]}.  {\f1{}-J} has been introduced (together with {\f1{}-W} and {\f1{}-S}) to disentangle the old ({\i posix} compliant) options {\f1{}-w} and {\f1{}-s} along with the three column options.\par
\par
\pard{}{\f1{}-l {\i page_length}}\par
\pard{}{\f1{}--length={\i page_length}}\par
\pard\li720{}{K{\footnote K -l}}{K{\footnote K -length}}Set the page length to {\i page_length} (default 66) lines, including the lines of the header [and the footer].  If {\i page_length} is less than or equal 10 (and <= 3 with {\f1{}-F}), the header and footer are omitted, and all form feeds set in input files are eliminated, as if the {\f1{}-T} option had been given.\par
\par
\pard{}{\f1{}-m}\par
\pard{}{\f1{}--merge}\par
\pard\li720{}{K{\footnote K -m}}{K{\footnote K -merge}}Merge and print all {\i file}s in parallel, one in each column.  If a line is too long to fit in a column, it is truncated, unless {\f1{}-J} option is used.  {\f1{}-S[{\i string}]} may be used.  Empty pages in some {\i file}s (form feeds set) produce empty columns, still marked by {\i string}.  The result is a continuous line numbering and column marking throughout the whole merged file.  Completely empty merged pages show no separators or line numbers.  The default header becomes {\f1{}yyyy-mm-dd HH:MM <blanks> Page nnnn}; may be used with {\f1{}-h {\i header}} to fill up the middle blank part.\par
\par
\pard{}{\f1{}-n[{\i number-separator}[{\i digits}]]}\par
\pard{}{\f1{}--number-lines[={\i number-separator}[{\i digits}]]}\par
\pard\li720{}{K{\footnote K -n}}{K{\footnote K -number-lines}}Provide {\i digits} digit line numbering (default for {\i digits} is 5).  With multicolumn output the number occupies the first {\i digits} column positions of each text column or only each line of {\f1{}-m} output.  With single column output the number precedes each line just as {\f1{}-m} does.  Default counting of the line numbers starts with 1st line of the input file (not the 1st line printed, compare the {\f1{}--page} option and {\f1{}-N} option).  Optional argument {\i number-separator} is the character appended to the line number to separate it from the text followed.  The default separator is the TAB character.  In a strict sense a TAB is always printed with single column output only.  The {\i TAB}-width varies with the {\i TAB}-position, e.g. with the left {\i margin} specified by {\f1{}-o} option.  With multicolumn output priority is given to {\f1{}equal width of output columns} (a {\i posix} specification).  The {\i TAB}-width is fixed to the value of the 1st column and does not change with different values of left {\i margin}.  That means a fixed number of spaces is always printed in the place of the {\i number-separator tab}.  The tabification depends upon the output position.\par
\par
\pard{}{\f1{}-N {\i line_number}}\par
\pard{}{\f1{}--first-line-number={\i line_number}}\par
\pard\li720{}{K{\footnote K -N}}{K{\footnote K -first-line-number}}Start line counting with the number {\i line_number} at first line of first page printed (in most cases not the first line of the input file).\par
\par
\pard{}{\f1{}-o {\i margin}}\par
\pard{}{\f1{}--indent={\i margin}}\par
\pard\li720{}{K{\footnote K -o}}{K{\footnote K -indent}}{K{\footnote K indenting lines}}{K{\footnote K left margin}}Indent each line with a margin {\i margin} spaces wide (default is zero).  The total page width is the size of the margin plus the {\i page_width} set with the {\f1{}-W/-w} option.  A limited overflow may occur with numbered single column output (compare {\f1{}-n} option).\par
\par
\pard{}{\f1{}-r}\par
\pard{}{\f1{}--no-file-warnings}\par
\pard\li720{}{K{\footnote K -r}}{K{\footnote K -no-file-warnings}}Do not print a warning message when an argument {\i file} cannot be opened.  (The exit status will still be nonzero, however.)\par
\par
\pard{}{\f1{}-s[{\i char}]}\par
\pard{}{\f1{}--separator[={\i char}]}\par
\pard\li720{}{K{\footnote K -s}}{K{\footnote K -separator}}Separate columns by a single character {\i char}.  Default for {\i char} is the TAB character without {\f1{}-w} and {\f1{}no character} with {\f1{}-w}.  Without {\f1{}-s} default separator {\f1{}space} is set.  {\f1{}-s[char]} turns off line truncation of all three column options ({\f1{}-COLUMN}|{\f1{}-a -COLUMN}|{\f1{}-m}) except {\f1{}-w} is set.  That is a {\i posix} compliant formulation.\par
\par
\pard{}{\f1{}-S[{\i string}]}\par
\pard{}{\f1{}--sep-string[={\i string}]}\par
\pard\li720{}{K{\footnote K -S}}{K{\footnote K -sep-string}}Use {\i string} to separate output columns.  The {\f1{}-S} option doesn't affect the {\f1{}-W/-w} option, unlike the {\f1{}-s} option which does.  It does not affect line truncation or column alignment.  Without {\f1{}-S}, and with {\f1{}-J}, {\f1{}pr} uses the default output separator, TAB.  Without {\f1{}-S} or {\f1{}-J}, {\f1{}pr} uses a {\f1{}space} (same as {\f1{}-S" "}).  Using {\f1{}-S} with no {\i string} is equivalent to {\f1{}-S""}.  Note that for some of {\f1{}pr}'s options the single-letter option character must be followed immediately by any corresponding argument; there may not be any intervening white space.  {\f1{}-S/-s} is one of them.  Don't use {\f1{}-S "STRING"}.  {\scaps\fs16{}posix} requires this.\par
\par
\pard{}{\f1{}-t}\par
\pard{}{\f1{}--omit-header}\par
\pard\li720{}{K{\footnote K -t}}{K{\footnote K -omit-header}}Do not print the usual header [and footer] on each page, and do not fill out the bottom of pages (with blank lines or a form feed).  No page structure is produced, but form feeds set in the input files are retained.  The predefined pagination is not changed.  {\f1{}-t} or {\f1{}-T} may be useful together with other options; e.g.: {\f1{}-t -e4}, expand TAB characters in the input file to 4 spaces but don't make any other changes.  Use of {\f1{}-t} overrides {\f1{}-h}.\par
\par
\pard{}{\f1{}-T}\par
\pard{}{\f1{}--omit-pagination}\par
\pard\li720{}{K{\footnote K -T}}{K{\footnote K -omit-pagination}}Do not print header [and footer].  In addition eliminate all form feeds set in the input files.\par
\par
\pard{}{\f1{}-v}\par
\pard{}{\f1{}--show-nonprinting}\par
\pard\li720{}{K{\footnote K -v}}{K{\footnote K -show-nonprinting}}Print unprintable characters in octal backslash notation.\par
\par
\pard{}{\f1{}-w {\i page_width}}\par
\pard{}{\f1{}--width={\i page_width}}\par
\pard\li720{}{K{\footnote K -w}}{K{\footnote K -width}}Set page width to {\i page_width} characters for multiple text-column output only (default for {\i page_width} is 72).  {\f1{}-s[CHAR]} turns off the default page width and any line truncation and column alignment.  Lines of full length are merged, regardless of the column options set.  No {\i page_width} setting is possible with single column output.  A {\i posix} compliant formulation.\par
\par
\pard{}{\f1{}-W {\i page_width}}\par
\pard{}{\f1{}--page_width={\i page_width}}\par
\pard\li720{}{K{\footnote K -W}}{K{\footnote K -page_width}}Set the page width to {\i page_width} characters.  That's valid with and without a column option.  Text lines are truncated, unless {\f1{}-J} is used.  Together with one of the three column options ({\f1{}-{\i column}}, {\f1{}-a -{\i column}} or {\f1{}-m}) column alignment is always used.  The separator options {\f1{}-S} or {\f1{}-s} don't affect the {\f1{}-W} option.  Default is 72 characters.  Without {\f1{}-W {\i page_width}} and without any of the column options NO line truncation is used (defined to keep downward compatibility and to meet most frequent tasks).  That's equivalent to {\f1{}-W 72 -J}.  With and without {\f1{}-W {\i page_width}} the header line is always truncated to avoid line overflow.\par
\par
\pard{}}\par
\page\pard Node: {\b fold invocation}, \keepn Next: {\uldb }{\v }, Prev: {\uldb pr invocation}{\v pr_invocation}, Up: {\uldb Formatting file contents}{\v Formatting_file_contents}\line
K{\footnote K fold invocation}
#{\footnote fold_invocation}
${\footnote {\f1{}\pard{}fold}: Wrap input lines to fit in specified width}\par
\pard{\fs24\b {\f1{}fold}: Wrap input lines to fit in specified width}\par
\par
\pard{}{K{\footnote K fold}}{K{\footnote K wrapping long input lines}}{K{\footnote K folding long input lines}} {\f1{}fold} writes each {\i file} ({\f1{}-} means standard input), or standard input if none are given, to standard output, breaking long lines.  Synopsis:\par
\par
{\pard\keep\li720\f1{}fold [{\i option}]... [{\i file}]...\par
\pard\f0{}}\par
\pard{}By default, {\f1{}fold} breaks lines wider than 80 columns.  The output is split into as many lines as necessary.\par
\par
\pard{}{K{\footnote K screen columns}}{\f1{}fold} counts screen columns by default; thus, a tab may count more than one column, backspace decreases the column count, and carriage return sets the column to zero.\par
\par
\pard{}The program accepts the following options.  Also see {\uldb Common options}{\v Common_options}.\par
\par
{\pard{}{\f1{}-b}\par
\pard{}{\f1{}--bytes}\par
\pard\li720{}{K{\footnote K -b}}{K{\footnote K -bytes}}Count bytes rather than columns, so that tabs, backspaces, and carriage returns are each counted as taking up one column, just like other characters.\par
\par
\pard{}{\f1{}-s}\par
\pard{}{\f1{}--spaces}\par
\pard\li720{}{K{\footnote K -s}}{K{\footnote K -spaces}}Break at word boundaries: the line is broken after the last blank before the maximum line length.  If the line contains no such blanks, the line is broken at the maximum line length as usual.\par
\par
\pard{}{\f1{}-w {\i width}}\par
\pard{}{\f1{}--width={\i width}}\par
\pard\li720{}{K{\footnote K -w}}{K{\footnote K -width}}Use a maximum line length of {\i width} columns instead of 80.\par
\par
\pard{}}\par
\page\pard Node: {\b Output of parts of files}, \keepn Next: {\uldb Summarizing files}{\v Summarizing_files}, Prev: {\uldb Formatting file contents}{\v Formatting_file_contents}, Up: {\uldb Top}{\v Top}\line
K{\footnote K Output of parts of files}
#{\footnote Output_of_parts_of_files}
${\footnote \pard{}Output of parts of files}\par
\pard{\fs24\b Output of parts of files}\par
\par
\pard{}{K{\footnote K output of parts of files}}{K{\footnote K parts of files, output of}} These commands output pieces of the input.\par
\par
{\par
\pard\keep\fi-2880\li2880\tx2880{}{\uldb head invocation}{\v head_invocation}\tab Output the first part of files.\par
{\uldb tail invocation}{\v tail_invocation}\tab Output the last part of files.\par
{\uldb split invocation}{\v split_invocation}\tab Split a file into fixed-size pieces.\par
{\uldb csplit invocation}{\v csplit_invocation}\tab Split a file into context-determined pieces.\par
\pard{}}\par
\page\pard Node: {\b head invocation}, \keepn Next: {\uldb tail invocation}{\v tail_invocation}, Prev: {\uldb }{\v }, Up: {\uldb Output of parts of files}{\v Output_of_parts_of_files}\line
K{\footnote K head invocation}
#{\footnote head_invocation}
${\footnote {\f1{}\pard{}head}: Output the first part of files}\par
\pard{\fs24\b {\f1{}head}: Output the first part of files}\par
\par
\pard{}{K{\footnote K head}}{K{\footnote K initial part of files, outputting}}{K{\footnote K first part of files, outputting}} {\f1{}head} prints the first part (10 lines by default) of each {\i file}; it reads from standard input if no files are given or when given a {\i file} of {\f1{}-}.  Synopses:\par
\par
{\pard\keep\li720\f1{}head [{\i option}]... [{\i file}]...\line
head -{\i number} [{\i option}]... [{\i file}]...\par
\pard\f0{}}\par
\pard{}If more than one {\i file} is specified, {\f1{}head} prints a one-line header consisting of {\par
\pard\keep\li720\f1{}==> {\i file name} <==\par
\pard\f0{}}\par
\pard{}before the output for each {\i file}.\par
\par
{\f1{}\pard{}head} accepts two option formats: the new one, in which numbers are arguments to the options ({\f1{}-q -n 1}), and the old one, in which the number precedes any option letters ({\f1{}-1q}).\par
\par
\pard{}The program accepts the following options.  Also see {\uldb Common options}{\v Common_options}.\par
\par
{\pard{}{\f1{}-{\i count}{\i options}}\par
\pard\li720{}{K{\footnote K -{\i count}}}This option is only recognized if it is specified first.  {\i count} is a decimal number optionally followed by a size letter ({\f1{}b}, {\f1{}k}, {\f1{}m}) as in {\f1{}-c}, or {\f1{}l} to mean count by lines, or other option letters ({\f1{}cqv}).\par
\par
\pard{}{\f1{}-c {\i bytes}}\par
\pard{}{\f1{}--bytes={\i bytes}}\par
\pard\li720{}{K{\footnote K -c}}{K{\footnote K -bytes}}Print the first {\i bytes} bytes, instead of initial lines.  Appending {\f1{}b} multiplies {\i bytes} by 512, {\f1{}k} by 1024, and {\f1{}m} by 1048576.\par
\par
\pard{}{\f1{}-n {\i n}}\par
\pard{}{\f1{}--lines={\i n}}\par
\pard\li720{}{K{\footnote K -n}}{K{\footnote K -lines}}Output the first {\i n} lines.\par
\par
\pard{}{\f1{}-q}\par
\pard{}{\f1{}--quiet}\par
\pard{}{\f1{}--silent}\par
\pard\li720{}{K{\footnote K -q}}{K{\footnote K -quiet}}{K{\footnote K -silent}}Never print file name headers.\par
\par
\pard{}{\f1{}-v}\par
\pard{}{\f1{}--verbose}\par
\pard\li720{}{K{\footnote K -v}}{K{\footnote K -verbose}}Always print file name headers.\par
\par
\pard{}}\par
\page\pard Node: {\b tail invocation}, \keepn Next: {\uldb split invocation}{\v split_invocation}, Prev: {\uldb head invocation}{\v head_invocation}, Up: {\uldb Output of parts of files}{\v Output_of_parts_of_files}\line
K{\footnote K tail invocation}
#{\footnote tail_invocation}
${\footnote {\f1{}\pard{}tail}: Output the last part of files}\par
\pard{\fs24\b {\f1{}tail}: Output the last part of files}\par
\par
\pard{}{K{\footnote K tail}}{K{\footnote K last part of files, outputting}} {\f1{}tail} prints the last part (10 lines by default) of each {\i file}; it reads from standard input if no files are given or when given a {\i file} of {\f1{}-}.  Synopses:\par
\par
{\pard\keep\li720\f1{}tail [{\i option}]... [{\i file}]...\line
tail -{\i number} [{\i option}]... [{\i file}]...\line
tail +{\i number} [{\i option}]... [{\i file}]...\par
\pard\f0{}}\par
\pard{}If more than one {\i file} is specified, {\f1{}tail} prints a one-line header consisting of {\par
\pard\keep\li720\f1{}==> {\i file name} <==\par
\pard\f0{}}\par
\pard{}before the output for each {\i file}.\par
\par
\pard{}{K{\footnote K BSD {\f1{}tail}}}GNU {\f1{}tail} can output any amount of data (some other versions of {\f1{}tail} cannot).  It also has no {\f1{}-r} option (print in reverse), since reversing a file is really a different job from printing the end of a file; BSD {\f1{}tail} (which is the one with {\f1{}-r}) can only reverse files that are at most as large as its buffer, which is typically 32k.  A more reliable and versatile way to reverse files is the GNU {\f1{}tac} command.\par
\par
{\f1{}\pard{}tail} accepts two option formats: the new one, in which numbers are arguments to the options ({\f1{}-n 1}), and the old one, in which the number precedes any option letters ({\f1{}-1} or {\f1{}+1}).\par
\par
\pard{}If any option-argument is a number {\i n} starting with a {\f1{}+}, {\f1{}tail} begins printing with the {\i n}th item from the start of each file, instead of from the end.\par
\par
\pard{}The program accepts the following options.  Also see {\uldb Common options}{\v Common_options}.\par
\par
{\pard{}{\f1{}-{\i count}}\par
\pard{}{\f1{}+{\i count}}\par
\pard\li720{}{K{\footnote K -{\i count}}}{K{\footnote K +{\i count}}}This option is only recognized if it is specified first.  {\i count} is a decimal number optionally followed by a size letter ({\f1{}b}, {\f1{}k}, {\f1{}m}) as in {\f1{}-c}, or {\f1{}l} to mean count by lines, or other option letters ({\f1{}cfqv}).\par
\par
\pard{}{\f1{}-c {\i bytes}}\par
\pard{}{\f1{}--bytes={\i bytes}}\par
\pard\li720{}{K{\footnote K -c}}{K{\footnote K -bytes}}Output the last {\i bytes} bytes, instead of final lines.  Appending {\f1{}b} multiplies {\i bytes} by 512, {\f1{}k} by 1024, and {\f1{}m} by 1048576.\par
\par
\pard{}{\f1{}-f}\par
\pard{}{\f1{}--follow[={\i how}]}\par
\pard\li720{}{K{\footnote K -f}}{K{\footnote K -follow}}{K{\footnote K growing files}}{K{\footnote K name follow option}}{K{\footnote K descriptor follow option}}Loop forever trying to read more characters at the end of the file, presumably because the file is growing.  This option is ignored when reading from a pipe.  If more than one file is given, {\f1{}tail} prints a header whenever it gets output from a different file, to indicate which file that output is from.\par
\par
\pard\li720{}There are two ways to specify how you'd like to track files with this option, but that difference is noticeable only when a followed file is removed or renamed.  If you'd like to continue to track the end of a growing file even after it has been unlinked, use {\f1{}--follow=descriptor}.  This is the default behavior, but it is not useful if you're tracking a log file that may be rotated (removed or renamed, then reopened).  In that case, use {\f1{}--follow=name} to track the named file by reopening it periodically to see if it has been removed and recreated by some other program.\par
\par
\pard\li720{}No matter which method you use, if the tracked file is determined to have shrunk, {\f1{}tail} prints a message saying the file has been truncated and resumes tracking the end of the file from the newly-determined endpoint.\par
\par
\pard\li720{}When a file is removed, {\f1{}tail}'s behavior depends on whether it is following the name or the descriptor.  When following by name, tail can detect that a file has been removed and gives a message to that effect, and if {\f1{}--retry} has been specified it will continue checking periodically to see if the file reappears.  When following a descriptor, tail does not detect that the file has been unlinked or renamed and issues no message;  even though the file may no longer be accessible via its original name, it may still be growing.\par
\par
\pard\li720{}The option values {\f1{}descriptor} and {\f1{}name} may be specified only with the long form of the option, not with {\f1{}-f}.\par
\par
\pard{}{\f1{}--retry}\par
\pard\li720{}{K{\footnote K -retry}}This option is meaningful only when following by name.  Without this option, when tail encounters a file that doesn't exist or is otherwise inaccessible, it reports that fact and never checks it again.\par
\par
\pard{}{\f1{}--sleep-interval={\i n}}\par
\pard\li720{}{K{\footnote K -sleep-interval}}Change the number of seconds to wait between iterations (the default is 1).  During one iteration, every specified file is checked to see if it has changed size.\par
\par
\pard{}{\f1{}--pid={\i pid}}\par
\pard\li720{}{K{\footnote K -pid}}When following by name or by descriptor, you may specify the process ID, {\i pid}, of the sole writer of all {\i file} arguments.  Then, shortly after that process terminates, tail will also terminate.  This will work properly only if the writer and the tailing process are running on the same machine.  For example, to save the output of a build in a file and to watch the file grow, if you invoke {\f1{}make} and {\f1{}tail} like this then the tail process will stop when your build completes.  Without this option, you would have had to kill the {\f1{}tail -f} process yourself.  {\par
\pard\keep\li1440\f1{}$ make >& makerr & tail --pid=$! -f makerr\par
\pard\li720\f0{}}If you specify a {\i pid} that is not in use or that does not correspond to the process that is writing to the tailed files, then {\f1{}tail} may terminate long before any {\i file}s stop growing or it may not terminate until long after the real writer has terminated.\par
\par
\pard{}{\f1{}--max-consecutive-size-changes={\i n}}\par
\pard\li720{}{K{\footnote K -max-consecutive-size-changes}}This option is meaningful only when following by name.  Use it to control how long {\f1{}tail} follows the descriptor of a file that continues growing at a rapid pace even after it is deleted or renamed.  After detecting {\i n} consecutive size changes for a file, {\f1{}open}/{\f1{}fstat} the file to determine if that file name is still associated with the same device/inode-number pair as before.  See the output of {\f1{}tail --help} for the default value.\par
\par
\pard{}{\f1{}--max-unchanged-stats={\i n}}\par
\pard\li720{}{K{\footnote K -max-unchanged-stats}}When tailing a file by name, if there have been this many consecutive iterations for which the size has remained the same, then {\f1{}open}/{\f1{}fstat} the file to determine if that file name is still associated with the same device/inode-number pair as before.  When following a log file that is rotated this is approximately the number of seconds between when tail prints the last pre-rotation lines and when it prints the lines that have accumulated in the new log file.  See the output of {\f1{}tail --help} for the default value.  This option is meaningful only when following by name.\par
\par
\pard{}{\f1{}-n {\i n}}\par
\pard{}{\f1{}--lines={\i n}}\par
\pard\li720{}{K{\footnote K -n}}{K{\footnote K -lines}}Output the last {\i n} lines.\par
\par
\pard{}{\f1{}-q}\par
\pard{}{\f1{}-quiet}\par
\pard{}{\f1{}--silent}\par
\pard\li720{}{K{\footnote K -q}}{K{\footnote K -quiet}}{K{\footnote K -silent}}Never print file name headers.\par
\par
\pard{}{\f1{}-v}\par
\pard{}{\f1{}--verbose}\par
\pard\li720{}{K{\footnote K -v}}{K{\footnote K -verbose}}Always print file name headers.\par
\par
\pard{}}\par
\page\pard Node: {\b split invocation}, \keepn Next: {\uldb csplit invocation}{\v csplit_invocation}, Prev: {\uldb tail invocation}{\v tail_invocation}, Up: {\uldb Output of parts of files}{\v Output_of_parts_of_files}\line
K{\footnote K split invocation}
#{\footnote split_invocation}
${\footnote {\f1{}\pard{}split}: Split a file into fixed-size pieces}\par
\pard{\fs24\b {\f1{}split}: Split a file into fixed-size pieces}\par
\par
\pard{}{K{\footnote K split}}{K{\footnote K splitting a file into pieces}}{K{\footnote K pieces, splitting a file into}} {\f1{}split} creates output files containing consecutive sections of {\i input} (standard input if none is given or {\i input} is {\f1{}-}).  Synopsis:\par
\par
{\pard\keep\li720\f1{}split [{\i option}] [{\i input} [{\i prefix}]]\par
\pard\f0{}}\par
\pard{}By default, {\f1{}split} puts 1000 lines of {\i input} (or whatever is left over for the last section), into each output file.\par
\par
\pard{}{K{\footnote K output file name prefix}}The output files' names consist of {\i prefix} ({\f1{}x} by default) followed by a group of letters {\f1{}aa}, {\f1{}ab}, and so on, such that concatenating the output files in sorted order by file name produces the original input file.  (If more than 676 output files are required, {\f1{}split} uses {\f1{}zaa}, {\f1{}zab}, etc.)\par
\par
\pard{}The program accepts the following options.  Also see {\uldb Common options}{\v Common_options}.\par
\par
{\pard{}{\f1{}-{\i lines}}\par
\pard{}{\f1{}-l {\i lines}}\par
\pard{}{\f1{}--lines={\i lines}}\par
\pard\li720{}{K{\footnote K -l}}{K{\footnote K -lines}}Put {\i lines} lines of {\i input} into each output file.\par
\par
\pard{}{\f1{}-b {\i bytes}}\par
\pard{}{\f1{}--bytes={\i bytes}}\par
\pard\li720{}{K{\footnote K -b}}{K{\footnote K -bytes}}Put the first {\i bytes} bytes of {\i input} into each output file.  Appending {\f1{}b} multiplies {\i bytes} by 512, {\f1{}k} by 1024, and {\f1{}m} by 1048576.\par
\par
\pard{}{\f1{}-C {\i bytes}}\par
\pard{}{\f1{}--line-bytes={\i bytes}}\par
\pard\li720{}{K{\footnote K -C}}{K{\footnote K -line-bytes}}Put into each output file as many complete lines of {\i input} as possible without exceeding {\i bytes} bytes.  For lines longer than {\i bytes} bytes, put {\i bytes} bytes into each output file until less than {\i bytes} bytes of the line are left, then continue normally.  {\i bytes} has the same format as for the {\f1{}--bytes} option.\par
\par
\pard{}{\f1{}--verbose}\par
\pard\li720{}{K{\footnote K -verbose}}Write a diagnostic to standard error just before each output file is opened.\par
\par
\pard{}}\par
\page\pard Node: {\b csplit invocation}, \keepn Next: {\uldb }{\v }, Prev: {\uldb split invocation}{\v split_invocation}, Up: {\uldb Output of parts of files}{\v Output_of_parts_of_files}\line
K{\footnote K csplit invocation}
#{\footnote csplit_invocation}
${\footnote {\f1{}\pard{}csplit}: Split a file into context-determined pieces}\par
\pard{\fs24\b {\f1{}csplit}: Split a file into context-determined pieces}\par
\par
\pard{}{K{\footnote K csplit}}{K{\footnote K context splitting}}{K{\footnote K splitting a file into pieces by context}} {\f1{}csplit} creates zero or more output files containing sections of {\i input} (standard input if {\i input} is {\f1{}-}).  Synopsis:\par
\par
{\pard\keep\li720\f1{}csplit [{\i option}]... {\i input} {\i pattern}...\par
\pard\f0{}}\par
\pard{}The contents of the output files are determined by the {\i pattern} arguments, as detailed below.  An error occurs if a {\i pattern} argument refers to a nonexistent line of the input file (e.g., if no remaining line matches a given regular expression).  After every {\i pattern} has been matched, any remaining input is copied into one last output file.\par
\par
\pard{}By default, {\f1{}csplit} prints the number of bytes written to each output file after it has been created.\par
\par
\pard{}The types of pattern arguments are:\par
\par
{\pard{}{\f1{}{\i n}}\par
\pard\li720{}Create an output file containing the input up to but not including line {\i n} (a positive integer).  If followed by a repeat count, also create an output file containing the next {\i line} lines of the input file once for each repeat.\par
\par
\pard{}{\f1{}/{\i regexp}/[{\i offset}]}\par
\pard\li720{}Create an output file containing the current line up to (but not including) the next line of the input file that contains a match for {\i regexp}.  The optional {\i offset} is a {\f1{}+} or {\f1{}-} followed by a positive integer.  If it is given, the input up to the matching line plus or minus {\i offset} is put into the output file, and the line after that begins the next section of input.\par
\par
\pard{}{\f1{}%{\i regexp}%[{\i offset}]}\par
\pard\li720{}Like the previous type, except that it does not create an output file, so that section of the input file is effectively ignored.\par
\par
\pard{}{\f1{}\'7B{\i repeat-count}\'7D}\par
\pard\li720{}Repeat the previous pattern {\i repeat-count} additional times. {\i repeat-count} can either be a positive integer or an asterisk, meaning repeat as many times as necessary until the input is exhausted.\par
\par
\pard{}}\par
\pard{}The output files' names consist of a prefix ({\f1{}xx} by default) followed by a suffix.  By default, the suffix is an ascending sequence of two-digit decimal numbers from {\f1{}00} and up to {\f1{}99}.  In any case, concatenating the output files in sorted order by filename produces the original input file.\par
\par
\pard{}By default, if {\f1{}csplit} encounters an error or receives a hangup, interrupt, quit, or terminate signal, it removes any output files that it has created so far before it exits.\par
\par
\pard{}The program accepts the following options.  Also see {\uldb Common options}{\v Common_options}.\par
\par
{\pard{}{\f1{}-f {\i prefix}}\par
\pard{}{\f1{}--prefix={\i prefix}}\par
\pard\li720{}{K{\footnote K -f}}{K{\footnote K -prefix}}{K{\footnote K output file name prefix}}Use {\i prefix} as the output file name prefix.\par
\par
\pard{}{\f1{}-b {\i suffix}}\par
\pard{}{\f1{}--suffix={\i suffix}}\par
\pard\li720{}{K{\footnote K -b}}{K{\footnote K -suffix}}{K{\footnote K output file name suffix}}Use {\i suffix} as the output file name suffix.  When this option is specified, the suffix string must include exactly one {\f1{}printf(3)}-style conversion specification, possibly including format specification flags, a field width, a precision specifications, or all of these kinds of modifiers.  The format letter must convert a binary integer argument to readable form; thus, only {\f1{}d}, {\f1{}i}, {\f1{}u}, {\f1{}o}, {\f1{}x}, and {\f1{}X} conversions are allowed.  The entire {\i suffix} is given (with the current output file number) to {\f1{}sprintf(3)} to form the file name suffixes for each of the individual output files in turn.  If this option is used, the {\f1{}--digits} option is ignored.\par
\par
\pard{}{\f1{}-n {\i digits}}\par
\pard{}{\f1{}--digits={\i digits}}\par
\pard\li720{}{K{\footnote K -n}}{K{\footnote K -digits}}Use output file names containing numbers that are {\i digits} digits long instead of the default 2.\par
\par
\pard{}{\f1{}-k}\par
\pard{}{\f1{}--keep-files}\par
\pard\li720{}{K{\footnote K -k}}{K{\footnote K -keep-files}}Do not remove output files when errors are encountered.\par
\par
\pard{}{\f1{}-z}\par
\pard{}{\f1{}--elide-empty-files}\par
\pard\li720{}{K{\footnote K -z}}{K{\footnote K -elide-empty-files}}Suppress the generation of zero-length output files.  (In cases where the section delimiters of the input file are supposed to mark the first lines of each of the sections, the first output file will generally be a zero-length file unless you use this option.)  The output file sequence numbers always run consecutively starting from 0, even when this option is specified.\par
\par
\pard{}{\f1{}-s}\par
\pard{}{\f1{}-q}\par
\pard{}{\f1{}--silent}\par
\pard{}{\f1{}--quiet}\par
\pard\li720{}{K{\footnote K -s}}{K{\footnote K -q}}{K{\footnote K -silent}}{K{\footnote K -quiet}}Do not print counts of output file sizes.\par
\par
\pard{}}\par
\page\pard Node: {\b Summarizing files}, \keepn Next: {\uldb Operating on sorted files}{\v Operating_on_sorted_files}, Prev: {\uldb Output of parts of files}{\v Output_of_parts_of_files}, Up: {\uldb Top}{\v Top}\line
K{\footnote K Summarizing files}
#{\footnote Summarizing_files}
${\footnote \pard{}Summarizing files}\par
\pard{\fs24\b Summarizing files}\par
\par
\pard{}{K{\footnote K summarizing files}} These commands generate just a few numbers representing entire contents of files.\par
\par
{\par
\pard\keep\fi-2880\li2880\tx2880{}{\uldb wc invocation}{\v wc_invocation}\tab Print byte, word, and line counts.\par
{\uldb sum invocation}{\v sum_invocation}\tab Print checksum and block counts.\par
{\uldb cksum invocation}{\v cksum_invocation}\tab Print CRC checksum and byte counts.\par
{\uldb md5sum invocation}{\v md5sum_invocation}\tab Print or check message-digests.\par
\pard{}}\par
\page\pard Node: {\b wc invocation}, \keepn Next: {\uldb sum invocation}{\v sum_invocation}, Prev: {\uldb }{\v }, Up: {\uldb Summarizing files}{\v Summarizing_files}\line
K{\footnote K wc invocation}
#{\footnote wc_invocation}
${\footnote {\f1{}\pard{}wc}: Print byte, word, and line counts}\par
\pard{\fs24\b {\f1{}wc}: Print byte, word, and line counts}\par
\par
\pard{}{K{\footnote K wc}}{K{\footnote K byte count}}{K{\footnote K word count}}{K{\footnote K line count}} {\f1{}wc} counts the number of bytes, whitespace-separated words, and newlines in each given {\i file}, or standard input if none are given or for a {\i file} of {\f1{}-}.  Synopsis:\par
\par
{\pard\keep\li720\f1{}wc [{\i option}]... [{\i file}]...\par
\pard\f0{}}\par
\pard{}{K{\footnote K total counts}}{\f1{}wc} prints one line of counts for each file, and if the file was given as an argument, it prints the file name following the counts.  If more than one {\i file} is given, {\f1{}wc} prints a final line containing the cumulative counts, with the file name {\f1{}total}.  The counts are printed in this order: newlines, words, bytes.  By default, each count is output right-justified in a 7-byte field with one space between fields so that the numbers and file names line up nicely in columns.  However, POSIX requires that there be exactly one space separating columns.  You can make {\f1{}wc} use the POSIX-mandated output format by setting the {\f1{}POSIXLY_CORRECT} environment variable.\par
\par
\pard{}By default, {\f1{}wc} prints all three counts.  Options can specify that only certain counts be printed.  Options do not undo others previously given, so\par
\par
{\pard\keep\li720\f1{}wc --bytes --words\par
\pard\f0{}}\par
\pard{}prints both the byte counts and the word counts.\par
\par
\pard{}With the {\f1{}--max-line-length} option, {\f1{}wc} prints the length of the longest line per file, and if there is more than one file it prints the maximum (not the sum) of those lengths.\par
\par
\pard{}The program accepts the following options.  Also see {\uldb Common options}{\v Common_options}.\par
\par
{\pard{}{\f1{}-c}\par
\pard{}{\f1{}--bytes}\par
\pard{}{\f1{}--chars}\par
\pard\li720{}{K{\footnote K -c}}{K{\footnote K -bytes}}{K{\footnote K -chars}}Print only the byte counts.\par
\par
\pard{}{\f1{}-w}\par
\pard{}{\f1{}--words}\par
\pard\li720{}{K{\footnote K -w}}{K{\footnote K -words}}Print only the word counts.\par
\par
\pard{}{\f1{}-l}\par
\pard{}{\f1{}--lines}\par
\pard\li720{}{K{\footnote K -l}}{K{\footnote K -lines}}Print only the newline counts.\par
\par
\pard{}{\f1{}-L}\par
\pard{}{\f1{}--max-line-length}\par
\pard\li720{}{K{\footnote K -L}}{K{\footnote K -max-line-length}}Print only the maximum line lengths.\par
\par
\pard{}}\par
\page\pard Node: {\b sum invocation}, \keepn Next: {\uldb cksum invocation}{\v cksum_invocation}, Prev: {\uldb wc invocation}{\v wc_invocation}, Up: {\uldb Summarizing files}{\v Summarizing_files}\line
K{\footnote K sum invocation}
#{\footnote sum_invocation}
${\footnote {\f1{}\pard{}sum}: Print checksum and block counts}\par
\pard{\fs24\b {\f1{}sum}: Print checksum and block counts}\par
\par
\pard{}{K{\footnote K sum}}{K{\footnote K 16-bit checksum}}{K{\footnote K checksum, 16-bit}} {\f1{}sum} computes a 16-bit checksum for each given {\i file}, or standard input if none are given or for a {\i file} of {\f1{}-}.  Synopsis:\par
\par
{\pard\keep\li720\f1{}sum [{\i option}]... [{\i file}]...\par
\pard\f0{}}\par
{\f1{}\pard{}sum} prints the checksum for each {\i file} followed by the number of blocks in the file (rounded up).  If more than one {\i file} is given, file names are also printed (by default).  (With the {\f1{}--sysv} option, corresponding file name are printed when there is at least one file argument.)\par
\par
\pard{}By default, GNU {\f1{}sum} computes checksums using an algorithm compatible with BSD {\f1{}sum} and prints file sizes in units of 1024-byte blocks.\par
\par
\pard{}The program accepts the following options.  Also see {\uldb Common options}{\v Common_options}.\par
\par
{\pard{}{\f1{}-r}\par
\pard\li720{}{K{\footnote K -r}}{K{\footnote K BSD {\f1{}sum}}}Use the default (BSD compatible) algorithm.  This option is included for compatibility with the System V {\f1{}sum}.  Unless {\f1{}-s} was also given, it has no effect.\par
\par
\pard{}{\f1{}-s}\par
\pard{}{\f1{}--sysv}\par
\pard\li720{}{K{\footnote K -s}}{K{\footnote K -sysv}}{K{\footnote K System V {\f1{}sum}}}Compute checksums using an algorithm compatible with System V {\f1{}sum}'s default, and print file sizes in units of 512-byte blocks.\par
\par
\pard{}}\par
{\f1{}\pard{}sum} is provided for compatibility; the {\f1{}cksum} program (see next section) is preferable in new applications.\par
\par
\page\pard Node: {\b cksum invocation}, \keepn Next: {\uldb md5sum invocation}{\v md5sum_invocation}, Prev: {\uldb sum invocation}{\v sum_invocation}, Up: {\uldb Summarizing files}{\v Summarizing_files}\line
K{\footnote K cksum invocation}
#{\footnote cksum_invocation}
${\footnote {\f1{}\pard{}cksum}: Print CRC checksum and byte counts}\par
\pard{\fs24\b {\f1{}cksum}: Print CRC checksum and byte counts}\par
\par
\pard{}{K{\footnote K cksum}}{K{\footnote K cyclic redundancy check}}{K{\footnote K CRC checksum}} {\f1{}cksum} computes a cyclic redundancy check (CRC) checksum for each given {\i file}, or standard input if none are given or for a {\i file} of {\f1{}-}.  Synopsis:\par
\par
{\pard\keep\li720\f1{}cksum [{\i option}]... [{\i file}]...\par
\pard\f0{}}\par
{\f1{}\pard{}cksum} prints the CRC checksum for each file along with the number of bytes in the file, and the filename unless no arguments were given.\par
\par
{\f1{}\pard{}cksum} is typically used to ensure that files transferred by unreliable means (e.g., netnews) have not been corrupted, by comparing the {\f1{}cksum} output for the received files with the {\f1{}cksum} output for the original files (typically given in the distribution).\par
\par
\pard{}The CRC algorithm is specified by the {\scaps\fs16{}posix.2} standard.  It is not compatible with the BSD or System V {\f1{}sum} algorithms (see the previous section); it is more robust.\par
\par
\pard{}The only options are {\f1{}--help} and {\f1{}--version}.  See {\uldb Common options}{\v Common_options}.\par
\par
\page\pard Node: {\b md5sum invocation}, \keepn Next: {\uldb }{\v }, Prev: {\uldb cksum invocation}{\v cksum_invocation}, Up: {\uldb Summarizing files}{\v Summarizing_files}\line
K{\footnote K md5sum invocation}
#{\footnote md5sum_invocation}
${\footnote {\f1{}\pard{}md5sum}: Print or check message-digests}\par
\pard{\fs24\b {\f1{}md5sum}: Print or check message-digests}\par
\par
\pard{}{K{\footnote K md5sum}}{K{\footnote K 128-bit checksum}}{K{\footnote K checksum, 128-bit}}{K{\footnote K fingerprint, 128-bit}}{K{\footnote K message-digest, 128-bit}} {\f1{}md5sum} computes a 128-bit checksum (or \'A2fingerprint\'A2 or \'A2message-digest\'A2) for each specified {\i file}.  If a {\i file} is specified as {\f1{}-} or if no files are given {\f1{}md5sum} computes the checksum for the standard input.  {\f1{}md5sum} can also determine whether a file and checksum are consistent. Synopses:\par
\par
{\pard\keep\li720\f1{}md5sum [{\i option}]... [{\i file}]...\line
md5sum [{\i option}]... --check [{\i file}]\par
\pard\f0{}}\par
\pard{}For each {\i file}, {\f1{}md5sum} outputs the MD5 checksum, a flag indicating a binary or text input file, and the filename.  If {\i file} is omitted or specified as {\f1{}-}, standard input is read.\par
\par
\pard{}The program accepts the following options.  Also see {\uldb Common options}{\v Common_options}.\par
\par
{\pard{}{\f1{}-b}\par
\pard{}{\f1{}--binary}\par
\pard\li720{}{K{\footnote K -b}}{K{\footnote K -binary}}{K{\footnote K binary input files}}Treat all input files as binary.  This option has no effect on Unix systems, since they don't distinguish between binary and text files.  This option is useful on systems that have different internal and external character representations.  On MS-DOS and MS-Windows, this is the default.\par
\par
\pard{}{\f1{}-c}\par
\pard{}{\f1{}--check}\par
\pard\li720{}Read filenames and checksum information from the single {\i file} (or from stdin if no {\i file} was specified) and report whether each named file and the corresponding checksum data are consistent.  The input to this mode of {\f1{}md5sum} is usually the output of a prior, checksum-generating run of {\f1{}md5sum}.  Each valid line of input consists of an MD5 checksum, a binary/text flag, and then a filename.  Binary files are marked with {\f1{}*}, text with {\f1{} }.  For each such line, {\f1{}md5sum} reads the named file and computes its MD5 checksum.  Then, if the computed message digest does not match the one on the line with the filename, the file is noted as having failed the test.  Otherwise, the file passes the test.  By default, for each valid line, one line is written to standard output indicating whether the named file passed the test.  After all checks have been performed, if there were any failures, a warning is issued to standard error.  Use the {\f1{}--status} option to inhibit that output.  If any listed file cannot be opened or read, if any valid line has an MD5 checksum inconsistent with the associated file, or if no valid line is found, {\f1{}md5sum} exits with nonzero status.  Otherwise, it exits successfully.\par
\par
\pard{}{\f1{}--status}\par
\pard\li720{}{K{\footnote K -status}}{K{\footnote K verifying MD5 checksums}}This option is useful only when verifying checksums.  When verifying checksums, don't generate the default one-line-per-file diagnostic and don't output the warning summarizing any failures.  Failures to open or read a file still evoke individual diagnostics to standard error.  If all listed files are readable and are consistent with the associated MD5 checksums, exit successfully.  Otherwise exit with a status code indicating there was a failure.\par
\par
\pard{}{\f1{}-t}\par
\pard{}{\f1{}--text}\par
\pard\li720{}{K{\footnote K -t}}{K{\footnote K -text}}{K{\footnote K text input files}}Treat all input files as text files.  This is the reverse of {\f1{}--binary}.\par
\par
\pard{}{\f1{}-w}\par
\pard{}{\f1{}--warn}\par
\pard\li720{}{K{\footnote K -w}}{K{\footnote K -warn}}{K{\footnote K verifying MD5 checksums}}When verifying checksums, warn about improperly formatted MD5 checksum lines.  This option is useful only if all but a few lines in the checked input are valid.\par
\par
\pard{}}\par
\page\pard Node: {\b Operating on sorted files}, \keepn Next: {\uldb Operating on fields within a line}{\v Operating_on_fields_within_a_line}, Prev: {\uldb Summarizing files}{\v Summarizing_files}, Up: {\uldb Top}{\v Top}\line
K{\footnote K Operating on sorted files}
#{\footnote Operating_on_sorted_files}
${\footnote \pard{}Operating on sorted files}\par
\pard{\fs24\b Operating on sorted files}\par
\par
\pard{}{K{\footnote K operating on sorted files}}{K{\footnote K sorted files, operations on}} These commands work with (or produce) sorted files.\par
\par
{\par
\pard\keep\fi-2880\li2880\tx2880{}{\uldb sort invocation}{\v sort_invocation}\tab Sort text files.\par
{\uldb uniq invocation}{\v uniq_invocation}\tab Uniquify files.\par
{\uldb comm invocation}{\v comm_invocation}\tab Compare two sorted files line by line.\par
{\uldb ptx invocation}{\v ptx_invocation}\tab Produce a permuted index of file contents.\par
{\uldb tsort invocation}{\v tsort_invocation}\tab Topological sort.\par
\pard{}}\par
\page\pard Node: {\b sort invocation}, \keepn Next: {\uldb uniq invocation}{\v uniq_invocation}, Prev: {\uldb }{\v }, Up: {\uldb Operating on sorted files}{\v Operating_on_sorted_files}\line
K{\footnote K sort invocation}
#{\footnote sort_invocation}
${\footnote {\f1{}\pard{}sort}: Sort text files}\par
\pard{\fs24\b {\f1{}sort}: Sort text files}\par
\par
\pard{}{K{\footnote K sort}}{K{\footnote K sorting files}} {\f1{}sort} sorts, merges, or compares all the lines from the given files, or standard input if none are given or for a {\i file} of {\f1{}-}.  By default, {\f1{}sort} writes the results to standard output.  Synopsis:\par
\par
{\pard\keep\li720\f1{}sort [{\i option}]... [{\i file}]...\par
\pard\f0{}}\par
{\f1{}\pard{}sort} has three modes of operation: sort (the default), merge, and check for sortedness.  The following options change the operation mode:\par
\par
{\pard{}{\f1{}-c}\par
\pard\li720{}{K{\footnote K -c}}{K{\footnote K checking for sortedness}}Check whether the given files are already sorted: if they are not all sorted, print an error message and exit with a status of 1.  Otherwise, exit successfully.\par
\par
\pard{}{\f1{}-m}\par
\pard\li720{}{K{\footnote K -m}}{K{\footnote K merging sorted files}}Merge the given files by sorting them as a group.  Each input file must always be individually sorted.  It always works to sort instead of merge; merging is provided because it is faster, in the case where it works.\par
\par
\pard{}}\par
\pard{}{K{\footnote K LC_COLLATE}}A pair of lines is compared as follows: if any key fields have been specified, {\f1{}sort} compares each pair of fields, in the order specified on the command line, according to the associated ordering options, until a difference is found or no fields are left.  Unless otherwise specified, all comparisons use the character collating sequence specified by the {\f1{}LC_COLLATE} locale.\par
\par
\pard{}If any of the global options {\f1{}Mbdfinr} are given but no key fields are specified, {\f1{}sort} compares the entire lines according to the global options.\par
\par
\pard{}Finally, as a last resort when all keys compare equal (or if no ordering options were specified at all), {\f1{}sort} compares the entire lines.  The last resort comparison honors the {\f1{}-r} global option.  The {\f1{}-s} (stable) option disables this last-resort comparison so that lines in which all fields compare equal are left in their original relative order.  If no fields or global options are specified, {\f1{}-s} has no effect.\par
\par
\pard{}GNU {\f1{}sort} (as specified for all GNU utilities) has no limits on input line length or restrictions on bytes allowed within lines.  In addition, if the final byte of an input file is not a newline, GNU {\f1{}sort} silently supplies one.  A line's trailing newline is part of the line for comparison purposes; for example, with no options in an {\scaps\fs16{}ascii} locale, a line starting with a tab sorts before an empty line because tab precedes newline in the {\scaps\fs16{}ascii} collating sequence.\par
\par
\pard{}Upon any error, {\f1{}sort} exits with a status of {\f1{}2}.\par
\par
\pard{}{K{\footnote K TMPDIR}}If the environment variable {\f1{}TMPDIR} is set, {\f1{}sort} uses its value as the directory for temporary files instead of {\f1{}/tmp}.  The {\f1{}-T {\i tempdir}} option in turn overrides the environment variable.\par
\par
\pard{}{K{\footnote K LC_CTYPE}}The following options affect the ordering of output lines.  They may be specified globally or as part of a specific key field.  If no key fields are specified, global options apply to comparison of entire lines; otherwise the global options are inherited by key fields that do not specify any special options of their own.  The {\f1{}-b}, {\f1{}-d}, {\f1{}-f} and {\f1{}-i} options classify characters according to the {\f1{}LC_CTYPE} locale.\par
\par
{\pard{}{\f1{}-b}\par
\pard\li720{}{K{\footnote K -b}}{K{\footnote K blanks, ignoring leading}}Ignore leading blanks when finding sort keys in each line.\par
\par
\pard{}{\f1{}-d}\par
\pard\li720{}{K{\footnote K -d}}{K{\footnote K phone directory order}}{K{\footnote K telephone directory order}}Sort in \'A2phone directory\'A2 order: ignore all characters except letters, digits and blanks when sorting.\par
\par
\pard{}{\f1{}-f}\par
\pard\li720{}{K{\footnote K -f}}{K{\footnote K case folding}}Fold lowercase characters into the equivalent uppercase characters when sorting so that, for example, {\f1{}b} and {\f1{}B} sort as equal.\par
\par
\pard{}{\f1{}-g}\par
\pard\li720{}{K{\footnote K -g}}{K{\footnote K general numeric sort}}Sort numerically, using the standard C function {\f1{}strtod} to convert a prefix of each line to a double-precision floating point number.  This allows floating point numbers to be specified in scientific notation, like {\f1{}1.0e-34} and {\f1{}10e100}.  Do not report overflow, underflow, or conversion errors.  Use the following collating sequence:\par
\par
{\pard\fi-720\li1440\tx864\tx1440{}\tab{}{\f2\'B7}\tab{}Lines that do not start with numbers (all considered to be equal).\par
\par
\pard\fi-720\li1440\tx864\tx1440{}\tab{}{\f2\'B7}\tab{}NaNs ("Not a Number" values, in IEEE floating point arithmetic) in a consistent but machine-dependent order.\par
\par
\pard\fi-720\li1440\tx864\tx1440{}\tab{}{\f2\'B7}\tab{}Minus infinity.\par
\par
\pard\fi-720\li1440\tx864\tx1440{}\tab{}{\f2\'B7}\tab{}Finite numbers in ascending numeric order (with -0 and +0 equal).\par
\par
\pard\fi-720\li1440\tx864\tx1440{}\tab{}{\f2\'B7}\tab{}Plus infinity.\par
\pard\li720{}}\par
\pard\li720{}Use this option only if there is no alternative; it is much slower than {\f1{}-n} and it can lose information when converting to floating point.\par
\par
\pard{}{\f1{}-i}\par
\pard\li720{}{K{\footnote K -i}}{K{\footnote K unprintable characters, ignoring}}Ignore unprintable characters.\par
\par
\pard{}{\f1{}-M}\par
\pard\li720{}{K{\footnote K -M}}{K{\footnote K months, sorting by}}{K{\footnote K LC_TIME}}An initial string, consisting of any amount of whitespace, followed by a month name abbreviation, is folded to UPPER case and compared in the order {\f1{}JAN} < {\f1{}FEB} < ... < {\f1{}DEC}.  Invalid names compare low to valid names.  The {\f1{}LC_TIME} locale determines the month spellings.\par
\par
\pard{}{\f1{}-n}\par
\pard\li720{}{K{\footnote K -n}}{K{\footnote K numeric sort}}{K{\footnote K LC_NUMERIC}}Sort numerically: the number begins each line; specifically, it consists of optional whitespace, an optional {\f1{}-} sign, and zero or more digits possibly separated by thousands separators, optionally followed by a radix character and zero or more digits.  The {\f1{}LC_NUMERIC} locale specifies the radix character and thousands separator.\par
\par
{\f1{}\pard\li720{}sort -n} uses what might be considered an unconventional method to compare strings representing floating point numbers.  Rather than first converting each string to the C {\f1{}double} type and then comparing those values, sort aligns the radix characters in the two strings and compares the strings a character at a time.  One benefit of using this approach is its speed.  In practice this is much more efficient than performing the two corresponding string-to-double (or even string-to-integer) conversions and then comparing doubles.  In addition, there is no corresponding loss of precision.  Converting each string to {\f1{}double} before comparison would limit precision to about 16 digits on most systems.\par
\par
\pard\li720{}Neither a leading {\f1{}+} nor exponential notation is recognized.  To compare such strings numerically, use the {\f1{}-g} option.\par
\par
\pard{}{\f1{}-r}\par
\pard\li720{}{K{\footnote K -r}}{K{\footnote K reverse sorting}}Reverse the result of comparison, so that lines with greater key values appear earlier in the output instead of later.\par
\par
\pard{}}\par
\pard{}Other options are:\par
\par
{\pard{}{\f1{}-o {\i output-file}}\par
\pard\li720{}{K{\footnote K -o}}{K{\footnote K overwriting of input, allowed}}Write output to {\i output-file} instead of standard output.  If {\i output-file} is one of the input files, {\f1{}sort} copies it to a temporary file before sorting and writing the output to {\i output-file}.\par
\par
\pard{}{\f1{}-t {\i separator}}\par
\pard\li720{}{K{\footnote K -t}}{K{\footnote K field separator character}}Use character {\i separator} as the field separator when finding the sort keys in each line.  By default, fields are separated by the empty string between a non-whitespace character and a whitespace character.  That is, given the input line {\f1{} foo bar}, {\f1{}sort} breaks it into fields {\f1{} foo} and {\f1{} bar}.  The field separator is not considered to be part of either the field preceding or the field following.\par
\par
\pard{}{\f1{}-u}\par
\pard\li720{}{K{\footnote K -u}}{K{\footnote K uniquifying output}}For the default case or the {\f1{}-m} option, only output the first of a sequence of lines that compare equal.  For the {\f1{}-c} option, check that no pair of consecutive lines compares equal.\par
\par
\pard{}{\f1{}-k {\i pos1}[,{\i pos2}]}\par
\pard\li720{}{K{\footnote K -k}}{K{\footnote K sort field}}The recommended, {\scaps\fs16{}posix}, option for specifying a sort field.  The field consists of the part of the line between {\i pos1} and {\i pos2} (or the end of the line, if {\i pos2} is omitted), {\i inclusive}.  Fields and character positions are numbered starting with 1.  So to sort on the second field, you'd use {\f1{}-k 2,2} See below for more examples.\par
\par
\pard{}{\f1{}-z}\par
\pard\li720{}{K{\footnote K -z}}{K{\footnote K sort zero-terminated lines}}Treat the input as a set of lines, each terminated by a zero byte ({\scaps\fs16{}ascii} {\scaps\fs16{}nul} (Null) character) instead of an {\scaps\fs16{}ascii} {\scaps\fs16{}lf} (Line Feed).  This option can be useful in conjunction with {\f1{}perl -0} or {\f1{}find -print0} and {\f1{}xargs -0} which do the same in order to reliably handle arbitrary pathnames (even those which contain Line Feed characters.)\par
\par
\pard{}{\f1{}+{\i pos1}[-{\i pos2}]}\par
\pard\li720{}The obsolete, traditional option for specifying a sort field.  The field consists of the line between {\i pos1} and up to but {\i not including} {\i pos2} (or the end of the line if {\i pos2} is omitted).  Fields and character positions are numbered starting with 0.  See below.\par
\par
\pard{}}\par
\pard{}In addition, when GNU {\f1{}sort} is invoked with exactly one argument, options {\f1{}--help} and {\f1{}--version} are recognized.  See {\uldb Common options}{\v Common_options}.\par
\par
\pard{}Historical (BSD and System V) implementations of {\f1{}sort} have differed in their interpretation of some options, particularly {\f1{}-b}, {\f1{}-f}, and {\f1{}-n}.  GNU sort follows the {\scaps\fs16{}posix} behavior, which is usually (but not always!) like the System V behavior.  According to {\scaps\fs16{}posix}, {\f1{}-n} no longer implies {\f1{}-b}.  For consistency, {\f1{}-M} has been changed in the same way.  This may affect the meaning of character positions in field specifications in obscure cases.  The only fix is to add an explicit {\f1{}-b}.\par
\par
\pard{}A position in a sort field specified with the {\f1{}-k} or {\f1{}+} option has the form {\f1{}{\i f}.{\i c}}, where {\i f} is the number of the field to use and {\i c} is the number of the first character from the beginning of the field (for {\f1{}+{\i pos}}) or from the end of the previous field (for {\f1{}-{\i pos}}).  If the {\f1{}.{\i c}} is omitted, it is taken to be the first character in the field.  If the {\f1{}-b} option was specified, the {\f1{}.{\i c}} part of a field specification is counted from the first nonblank character of the field (for {\f1{}+{\i pos}}) or from the first nonblank character following the previous field (for {\f1{}-{\i pos}}).\par
\par
\pard{}A sort key option may also have any of the option letters {\f1{}Mbdfinr} appended to it, in which case the global ordering options are not used for that particular field.  The {\f1{}-b} option may be independently attached to either or both of the {\f1{}+{\i pos}} and {\f1{}-{\i pos}} parts of a field specification, and if it is inherited from the global options it will be attached to both.  Keys may span multiple fields.\par
\par
\pard{}Here are some examples to illustrate various combinations of options.  In them, the {\scaps\fs16{}posix} {\f1{}-k} option is used to specify sort keys rather than the obsolete {\f1{}+{\i pos1}-{\i pos2}} syntax.\par
\par
{\pard\fi-720\li720\tx144\tx720{}\tab{}{\f2\'B7}\tab{}Sort in descending (reverse) numeric order.\par
\par
{\pard\keep\li1440\f1{}sort -nr\par
\pard\li720\f0{}}\par
\pard\li720{}Sort alphabetically, omitting the first and second fields.  This uses a single key composed of the characters beginning at the start of field three and extending to the end of each line.\par
\par
{\pard\keep\li1440\f1{}sort -k3\par
\pard\li720\f0{}}\par
\pard\fi-720\li720\tx144\tx720{}\tab{}{\f2\'B7}\tab{}Sort numerically on the second field and resolve ties by sorting alphabetically on the third and fourth characters of field five.  Use {\f1{}:} as the field delimiter.\par
\par
{\pard\keep\li1440\f1{}sort -t : -k 2,2n -k 5.3,5.4\par
\pard\li720\f0{}}\par
\pard\li720{}Note that if you had written {\f1{}-k 2} instead of {\f1{}-k 2,2} {\f1{}sort} would have used all characters beginning in the second field and extending to the end of the line as the primary {\i numeric} key.  For the large majority of applications, treating keys spanning more than one field as numeric will not do what you expect.\par
\par
\pard\li720{}Also note that the {\f1{}n} modifier was applied to the field-end specifier for the first key.  It would have been equivalent to specify {\f1{}-k 2n,2} or {\f1{}-k 2n,2n}.  All modifiers except {\f1{}b} apply to the associated {\i field}, regardless of whether the modifier character is attached to the field-start and/or the field-end part of the key specifier.\par
\par
\pard\fi-720\li720\tx144\tx720{}\tab{}{\f2\'B7}\tab{}Sort the password file on the fifth field and ignore any leading white space.  Sort lines with equal values in field five on the numeric user ID in field three.\par
\par
{\pard\keep\li1440\f1{}sort -t : -k 5b,5 -k 3,3n /etc/passwd\par
\pard\li720\f0{}}\par
\pard\li720{}An alternative is to use the global numeric modifier {\f1{}-n}.\par
\par
{\pard\keep\li1440\f1{}sort -t : -n -k 5b,5 -k 3,3 /etc/passwd\par
\pard\li720\f0{}}\par
\pard\fi-720\li720\tx144\tx720{}\tab{}{\f2\'B7}\tab{}Generate a tags file in case insensitive sorted order.  {\par
\pard\keep\li1440\f1{}find src -type f -print0 | sort -t / -z -f | xargs -0 etags --append\par
\pard\li720\f0{}}\par
\pard\li720{}The use of {\f1{}-print0}, {\f1{}-z}, and {\f1{}-0} in this case mean that pathnames that contain Line Feed characters will not get broken up by the sort operation.\par
\par
\pard\li720{}Finally, to ignore both leading and trailing white space, you could have applied the {\f1{}b} modifier to the field-end specifier for the first key,\par
\par
{\pard\keep\li1440\f1{}sort -t : -n -k 5b,5b -k 3,3 /etc/passwd\par
\pard\li720\f0{}}\par
\pard\li720{}or by using the global {\f1{}-b} modifier instead of {\f1{}-n} and an explicit {\f1{}n} with the second key specifier.\par
\par
{\pard\keep\li1440\f1{}sort -t : -b -k 5,5 -k 3,3n /etc/passwd\par
\pard\li720\f0{}}\par
\pard{}}\par
\page\pard Node: {\b uniq invocation}, \keepn Next: {\uldb comm invocation}{\v comm_invocation}, Prev: {\uldb sort invocation}{\v sort_invocation}, Up: {\uldb Operating on sorted files}{\v Operating_on_sorted_files}\line
K{\footnote K uniq invocation}
#{\footnote uniq_invocation}
${\footnote {\f1{}\pard{}uniq}: Uniquify files}\par
\pard{\fs24\b {\f1{}uniq}: Uniquify files}\par
\par
\pard{}{K{\footnote K uniq}}{K{\footnote K uniquify files}} {\f1{}uniq} writes the unique lines in the given {\f1{}input}, or standard input if nothing is given or for an {\i input} name of {\f1{}-}.  Synopsis:\par
\par
{\pard\keep\li720\f1{}uniq [{\i option}]... [{\i input} [{\i output}]]\par
\pard\f0{}}\par
\pard{}By default, {\f1{}uniq} prints the unique lines in a sorted file, i.e., discards all but one of identical successive lines.  Optionally, it can instead show only lines that appear exactly once, or lines that appear more than once.\par
\par
\pard{}The input must be sorted.  If your input is not sorted, perhaps you want to use {\f1{}sort -u}.\par
\par
\pard{}If no {\i output} file is specified, {\f1{}uniq} writes to standard output.\par
\par
\pard{}The program accepts the following options.  Also see {\uldb Common options}{\v Common_options}.\par
\par
{\pard{}{\f1{}-{\i n}}\par
\pard{}{\f1{}-f {\i n}}\par
\pard{}{\f1{}--skip-fields={\i n}}\par
\pard\li720{}{K{\footnote K -{\i n}}}{K{\footnote K -f}}{K{\footnote K -skip-fields}}Skip {\i n} fields on each line before checking for uniqueness.  Fields are sequences of non-space non-tab characters that are separated from each other by at least one spaces or tabs.\par
\par
\pard{}{\f1{}+{\i n}}\par
\pard{}{\f1{}-s {\i n}}\par
\pard{}{\f1{}--skip-chars={\i n}}\par
\pard\li720{}{K{\footnote K +{\i n}}}{K{\footnote K -s}}{K{\footnote K -skip-chars}}Skip {\i n} characters before checking for uniqueness.  If you use both the field and character skipping options, fields are skipped over first.\par
\par
\pard{}{\f1{}-c}\par
\pard{}{\f1{}--count}\par
\pard\li720{}{K{\footnote K -c}}{K{\footnote K -count}}Print the number of times each line occurred along with the line.\par
\par
\pard{}{\f1{}-i}\par
\pard{}{\f1{}--ignore-case}\par
\pard\li720{}{K{\footnote K -i}}{K{\footnote K -ignore-case}}Ignore differences in case when comparing lines.\par
\par
\pard{}{\f1{}-d}\par
\pard{}{\f1{}--repeated}\par
\pard\li720{}{K{\footnote K -d}}{K{\footnote K -repeated}}{K{\footnote K duplicate lines, outputting}}Print only duplicate lines.\par
\par
\pard{}{\f1{}-D}\par
\pard{}{\f1{}--all-repeated}\par
\pard\li720{}{K{\footnote K -D}}{K{\footnote K -all-repeated}}{K{\footnote K all duplicate lines, outputting}}Print all duplicate lines and only duplicate lines.  This option is useful mainly in conjunction with other options e.g., to ignore case or to compare only selected fields.  This is a GNU extension.\par
\par
\pard{}{\f1{}-u}\par
\pard{}{\f1{}--unique}\par
\pard\li720{}{K{\footnote K -u}}{K{\footnote K -unique}}{K{\footnote K unique lines, outputting}}Print only unique lines.\par
\par
\pard{}{\f1{}-w {\i n}}\par
\pard{}{\f1{}--check-chars={\i n}}\par
\pard\li720{}{K{\footnote K -w}}{K{\footnote K -check-chars}}Compare {\i n} characters on each line (after skipping any specified fields and characters).  By default the entire rest of the lines are compared.\par
\par
\pard{}}\par
\page\pard Node: {\b comm invocation}, \keepn Next: {\uldb ptx invocation}{\v ptx_invocation}, Prev: {\uldb uniq invocation}{\v uniq_invocation}, Up: {\uldb Operating on sorted files}{\v Operating_on_sorted_files}\line
K{\footnote K comm invocation}
#{\footnote comm_invocation}
${\footnote {\f1{}\pard{}comm}: Compare two sorted files line by line}\par
\pard{\fs24\b {\f1{}comm}: Compare two sorted files line by line}\par
\par
\pard{}{K{\footnote K comm}}{K{\footnote K line-by-line comparison}}{K{\footnote K comparing sorted files}} {\f1{}comm} writes to standard output lines that are common, and lines that are unique, to two input files; a file name of {\f1{}-} means standard input.  Synopsis:\par
\par
{\pard\keep\li720\f1{}comm [{\i option}]... {\i file1} {\i file2}\par
\pard\f0{}}\par
\pard{}{K{\footnote K LC_COLLATE}}Before {\f1{}comm} can be used, the input files must be sorted using the collating sequence specified by the {\f1{}LC_COLLATE} locale, with trailing newlines significant.  If an input file ends in a non-newline character, a newline is silently appended.  The {\f1{}sort} command with no options always outputs a file that is suitable input to {\f1{}comm}.\par
\par
\pard{}{K{\footnote K differing lines}}{K{\footnote K common lines}}With no options, {\f1{}comm} produces three column output.  Column one contains lines unique to {\i file1}, column two contains lines unique to {\i file2}, and column three contains lines common to both files.  Columns are separated by a single TAB character.\par
\par
\pard{}{K{\footnote K -1}}{K{\footnote K -2}}{K{\footnote K -3}}The options {\f1{}-1}, {\f1{}-2}, and {\f1{}-3} suppress printing of the corresponding columns.  Also see {\uldb Common options}{\v Common_options}.\par
\par
\pard{}Unlike some other comparison utilities, {\f1{}comm} has an exit status that does not depend on the result of the comparison.  Upon normal completion {\f1{}comm} produces an exit code of zero.  If there is an error it exits with nonzero status.\par
\par
\page\pard Node: {\b tsort invocation}, \keepn Next: {\uldb }{\v }, Prev: {\uldb ptx invocation}{\v ptx_invocation}, Up: {\uldb Operating on sorted files}{\v Operating_on_sorted_files}\line
K{\footnote K tsort invocation}
#{\footnote tsort_invocation}
${\footnote {\f1{}\pard{}tsort}: Topological sort}\par
\pard{\fs24\b {\f1{}tsort}: Topological sort}\par
\par
\pard{}{K{\footnote K tsort}}{K{\footnote K topological sort}} {\f1{}tsort} performs a topological sort on the given {\i file}, or standard input if no input file is given or for a {\i file} of {\f1{}-}.  Synopsis:\par
\par
{\pard\keep\li720\f1{}tsort [{\i option}] [{\i file}]\par
\pard\f0{}}\par
{\f1{}\pard{}tsort} reads its input as pairs of strings, separated by blanks, indicating a partial ordering.  The output is a total ordering that corresponds to the given partial ordering.\par
\par
\pard{}For example\par
\par
{\pard\keep\li720\f1{}tsort <<EOF\line
a b c\line
d\line
e f\line
b c d e\line
EOF\par
\pard\f0{}}\par
\pard{}will produce the output\par
\par
{\pard\keep\li720\f1{}a\line
b\line
c\line
d\line
e\line
f\par
\pard\f0{}}\par
{\f1{}\pard{}tsort} will detect cycles in the input and writes the first cycle encountered to standard error.\par
\par
\pard{}Note that for a given partial ordering, generally there is no unique total ordering.\par
\par
\pard{}The only options are {\f1{}--help} and {\f1{}--version}.  See {\uldb Common options}{\v Common_options}.\par
\par
\page\pard Node: {\b ptx invocation}, \keepn Next: {\uldb tsort invocation}{\v tsort_invocation}, Prev: {\uldb comm invocation}{\v comm_invocation}, Up: {\uldb Operating on sorted files}{\v Operating_on_sorted_files}\line
K{\footnote K ptx invocation}
#{\footnote ptx_invocation}
${\footnote {\f1{}\pard{}ptx}: Produce permuted indexes}\par
\pard{\fs24\b {\f1{}ptx}: Produce permuted indexes}\par
\par
\pard{}{K{\footnote K ptx}} {\f1{}ptx} reads a text file and essentially produces a permuted index, with each keyword in its context.  The calling sketch is either one of:\par
\par
{\pard\keep\li720\f1{}ptx [{\i option} ...] [{\i file} ...]\line
ptx -G [{\i option} ...] [{\i input} [{\i output}]]\par
\pard\f0{}}\par
\pard{}The {\f1{}-G} (or its equivalent: {\f1{}--traditional}) option disables all GNU extensions and revert to traditional mode, thus introducing some limitations, and changes several of the program's default option values.  When {\f1{}-G} is not specified, GNU extensions are always enabled.  GNU extensions to {\f1{}ptx} are documented wherever appropriate in this document.  For the full list, see See {\uldb Compatibility in ptx}{\v Compatibility_in_ptx}.\par
\par
\pard{}Individual options are explained in incoming sections.\par
\par
\pard{}When GNU extensions are enabled, there may be zero, one or several {\i file} after the options.  If there is no {\i file}, the program reads the standard input.  If there is one or several {\i file}, they give the name of input files which are all read in turn, as if all the input files were concatenated.  However, there is a full contextual break between each file and, when automatic referencing is requested, file names and line numbers refer to individual text input files.  In all cases, the program produces the permuted index onto the standard output.\par
\par
\pard{}When GNU extensions are {\i not} enabled, that is, when the program operates in traditional mode, there may be zero, one or two parameters besides the options.  If there is no parameters, the program reads the standard input and produces the permuted index onto the standard output.  If there is only one parameter, it names the text {\i input} to be read instead of the standard input.  If two parameters are given, they give respectively the name of the {\i input} file to read and the name of the {\i output} file to produce.  {\i Be very careful} to note that, in this case, the contents of file given by the second parameter is destroyed.  This behaviour is dictated only by System V {\f1{}ptx} compatibility, because GNU Standards discourage output parameters not introduced by an option.\par
\par
\pard{}Note that for {\i any} file named as the value of an option or as an input text file, a single dash {\f1{}-} may be used, in which case standard input is assumed.  However, it would not make sense to use this convention more than once per program invocation.\par
\par
{\par
\pard\keep\fi-2880\li2880\tx2880{}{\uldb General options in ptx}{\v General_options_in_ptx}\tab Options which affect general program behaviour.\par
{\uldb Charset selection in ptx}{\v Charset_selection_in_ptx}\tab Underlying character set considerations.\par
{\uldb Input processing in ptx}{\v Input_processing_in_ptx}\tab Input fields, contexts, and keyword selection.\par
{\uldb Output formatting in ptx}{\v Output_formatting_in_ptx}\tab Types of output format, and sizing the fields.\par
{\uldb Compatibility in ptx}{\v Compatibility_in_ptx}\tab\par
\pard{}}\par
\page\pard Node: {\b General options in ptx}, \keepn Next: {\uldb Charset selection in ptx}{\v Charset_selection_in_ptx}, Prev: {\uldb }{\v }, Up: {\uldb ptx invocation}{\v ptx_invocation}\line
K{\footnote K General options in ptx}
#{\footnote General_options_in_ptx}
${\footnote \pard{}General options}\par
\pard{\fs24\b General options}\par
\par
{\pard{}{\f1{}-C}\par
\pard{}{\f1{}--copyright}\par
\pard\li720{}Prints a short note about the Copyright and copying conditions, then exit without further processing.\par
\par
\pard{}{\f1{}-G}\par
\pard{}{\f1{}--traditional}\par
\pard\li720{}As already explained, this option disables all GNU extensions to {\f1{}ptx} and switch to traditional mode.\par
\par
\pard{}{\f1{}--help}\par
\pard\li720{}Prints a short help on standard output, then exit without further processing.\par
\par
\pard{}{\f1{}--version}\par
\pard\li720{}Prints the program verison on standard output, then exit without further processing.\par
\par
\pard{}}\par
\page\pard Node: {\b Charset selection in ptx}, \keepn Next: {\uldb Input processing in ptx}{\v Input_processing_in_ptx}, Prev: {\uldb General options in ptx}{\v General_options_in_ptx}, Up: {\uldb ptx invocation}{\v ptx_invocation}\line
K{\footnote K Charset selection in ptx}
#{\footnote Charset_selection_in_ptx}
${\footnote \pard{}Charset selection}\par
\pard{\fs24\b Charset selection}\par
\par
\pard{}As it is setup now, the program assumes that the input file is coded using 8-bit ISO 8859-1 code, also known as Latin-1 character set, {\i unless} if it is compiled for MS-DOS, in which case it uses the character set of the IBM-PC.  (GNU {\f1{}ptx} is not known to work on smaller MS-DOS machines anymore.)  Compared to 7-bit {\scaps\fs16{}ascii}, the set of characters which are letters is then different, this fact alters the behaviour of regular expression matching.  Thus, the default regular expression for a keyword allows foreign or diacriticized letters.  Keyword sorting, however, is still crude; it obeys the underlying character set ordering quite blindly.\par
\par
{\pard{}{\f1{}-f}\par
\pard{}{\f1{}--ignore-case}\par
\pard\li720{}Fold lower case letters to upper case for sorting.\par
\par
\pard{}}\par
\page\pard Node: {\b Input processing in ptx}, \keepn Next: {\uldb Output formatting in ptx}{\v Output_formatting_in_ptx}, Prev: {\uldb Charset selection in ptx}{\v Charset_selection_in_ptx}, Up: {\uldb ptx invocation}{\v ptx_invocation}\line
K{\footnote K Input processing in ptx}
#{\footnote Input_processing_in_ptx}
${\footnote \pard{}Word selection and input processing}\par
\pard{\fs24\b Word selection and input processing}\par
\par
{\pard{}{\f1{}-b {\i file}}\par

\pard{}{\f1{}--break-file={\i file}}\par
\pard\li720{}This option provides an alternative (to {\f1{}-W}) method of describing which characters make up words.  It introduces the name of a file which contains a list of characters which can{\i not} be part of one word, this file is called the \'A2Break file\'A2.  Any character which is not part of the Break file is a word constituent.  If both options {\f1{}-b} and {\f1{}-W} are specified, then {\f1{}-W} has precedence and {\f1{}-b} is ignored.\par
\par
\pard\li720{}When GNU extensions are enabled, the only way to avoid newline as a break character is to write all the break characters in the file with no newline at all, not even at the end of the file.  When GNU extensions are disabled, spaces, tabs and newlines are always considered as break characters even if not included in the Break file.\par
\par
\pard{}{\f1{}-i {\i file}}\par
\pard{}{\f1{}--ignore-file={\i file}}\par
\pard\li720{}The file associated with this option contains a list of words which will never be taken as keywords in concordance output.  It is called the \'A2Ignore file\'A2.  The file contains exactly one word in each line; the end of line separation of words is not subject to the value of the {\f1{}-S} option.\par
\par
\pard\li720{}There is a default Ignore file used by {\f1{}ptx} when this option is not specified, usually found in {\f1{}/usr/local/lib/eign} if this has not been changed at installation time.  If you want to deactivate the default Ignore file, specify {\f1{}/dev/null} instead.\par
\par
\pard{}{\f1{}-o {\i file}}\par
\pard{}{\f1{}--only-file={\i file}}\par
\pard\li720{}The file associated with this option contains a list of words which will be retained in concordance output, any word not mentioned in this file is ignored.  The file is called the \'A2Only file\'A2.  The file contains exactly one word in each line; the end of line separation of words is not subject to the value of the {\f1{}-S} option.\par
\par
\pard\li720{}There is no default for the Only file.  In the case there are both an Only file and an Ignore file, a word will be subject to be a keyword only if it is given in the Only file and not given in the Ignore file.\par
\par
\pard{}{\f1{}-r}\par
\pard{}{\f1{}--references}\par
\pard\li720{}On each input line, the leading sequence of non white characters will be taken to be a reference that has the purpose of identifying this input line on the produced permuted index.  For more information about reference production, see See {\uldb Output formatting in ptx}{\v Output_formatting_in_ptx}.  Using this option changes the default value for option {\f1{}-S}.\par
\par
\pard\li720{}Using this option, the program does not try very hard to remove references from contexts in output, but it succeeds in doing so {\i when} the context ends exactly at the newline.  If option {\f1{}-r} is used with {\f1{}-S} default value, or when GNU extensions are disabled, this condition is always met and references are completely excluded from the output contexts.\par
\par
\pard{}{\f1{}-S {\i regexp}}\par
\pard{}{\f1{}--sentence-regexp={\i regexp}}\par
\pard\li720{}This option selects which regular expression will describe the end of a line or the end of a sentence.  In fact, there is other distinction between end of lines or end of sentences than the effect of this regular expression, and input line boundaries have no special significance outside this option.  By default, when GNU extensions are enabled and if {\f1{}-r} option is not used, end of sentences are used.  In this case, the precise {\i regex} is imported from GNU emacs:\par
\par
{\pard\keep\li1440\f1{}[.?!][]\'5C"')\'7D]*\'5C\'5C($\'5C\'5C|\'5Ct\'5C\'5C|  \'5C\'5C)[ \'5Ct\'5Cn]*\par
\pard\li720\f0{}}\par
\pard\li720{}Whenever GNU extensions are disabled or if {\f1{}-r} option is used, end of lines are used; in this case, the default {\i regexp} is just:\par
\par
{\pard\keep\li1440\f1{}\'5Cn\par
\pard\li720\f0{}}\par
\pard\li720{}Using an empty {\i regexp} is equivalent to completely disabling end of line or end of sentence recognition.  In this case, the whole file is considered to be a single big line or sentence.  The user might want to disallow all truncation flag generation as well, through option {\f1{}-F ""}.  See {\uldb Syntax of Regular Expressions}{\v Regexps @emacs.hlp}.\par
\par
\pard\li720{}When the keywords happen to be near the beginning of the input line or sentence, this often creates an unused area at the beginning of the output context line; when the keywords happen to be near the end of the input line or sentence, this often creates an unused area at the end of the output context line.  The program tries to fill those unused areas by wrapping around context in them; the tail of the input line or sentence is used to fill the unused area on the left of the output line; the head of the input line or sentence is used to fill the unused area on the right of the output line.\par
\par
\pard\li720{}As a matter of convenience to the user, many usual backslashed escape sequences, as found in the C language, are recognized and converted to the corresponding characters by {\f1{}ptx} itself.\par
\par
\pard{}{\f1{}-W {\i regexp}}\par
\pard{}{\f1{}--word-regexp={\i regexp}}\par
\pard\li720{}This option selects which regular expression will describe each keyword.  By default, if GNU extensions are enabled, a word is a sequence of letters; the {\i regexp} used is {\f1{}\'5Cw+}.  When GNU extensions are disabled, a word is by default anything which ends with a space, a tab or a newline; the {\i regexp} used is {\f1{}[^ \'5Ct\'5Cn]+}.\par
\par
\pard\li720{}An empty {\i regexp} is equivalent to not using this option, letting the default dive in.  See {\uldb Syntax of Regular Expressions}{\v Regexps @emacs.hlp}.\par
\par
\pard\li720{}As a matter of convenience to the user, many usual backslashed escape sequences, as found in the C language, are recognized and converted to the corresponding characters by {\f1{}ptx} itself.\par
\par
\pard{}}\par
\page\pard Node: {\b Output formatting in ptx}, \keepn Next: {\uldb Compatibility in ptx}{\v Compatibility_in_ptx}, Prev: {\uldb Input processing in ptx}{\v Input_processing_in_ptx}, Up: {\uldb ptx invocation}{\v ptx_invocation}\line
K{\footnote K Output formatting in ptx}
#{\footnote Output_formatting_in_ptx}
${\footnote \pard{}Output formatting}\par
\pard{\fs24\b Output formatting}\par
\par
\pard{}Output format is mainly controlled by {\f1{}-O} and {\f1{}-T} options, described in the table below.  When neither {\f1{}-O} nor {\f1{}-T} is selected, and if GNU extensions are enabled, the program choose an output format suited for a dumb terminal.  Each keyword occurrence is output to the center of one line, surrounded by its left and right contexts.  Each field is properly justified, so the concordance output could readily be observed.  As a special feature, if automatic references are selected by option {\f1{}-A} and are output before the left context, that is, if option {\f1{}-R} is {\i not} selected, then a colon is added after the reference; this nicely interfaces with GNU Emacs {\f1{}next-error} processing.  In this default output format, each white space character, like newline and tab, is merely changed to exactly one space, with no special attempt to compress consecutive spaces.  This might change in the future.  Except for those white space characters, every other character of the underlying set of 256 characters is transmitted verbatim.\par
\par
\pard{}Output format is further controlled by the following options.\par
\par
{\pard{}{\f1{}-g {\i number}}\par
\pard{}{\f1{}--gap-size={\i number}}\par
\pard\li720{}Select the size of the minimum white gap between the fields on the output line.\par
\par
\pard{}{\f1{}-w {\i number}}\par
\pard{}{\f1{}--width={\i number}}\par
\pard\li720{}Select the output maximum width of each final line.  If references are used, they are included or excluded from the output maximum width depending on the value of option {\f1{}-R}.  If this option is not selected, that is, when references are output before the left context, the output maximum width takes into account the maximum length of all references.  If this options is selected, that is, when references are output after the right context, the output maximum width does not take into account the space taken by references, nor the gap that precedes them.\par
\par
\pard{}{\f1{}-A}\par
\pard{}{\f1{}--auto-reference}\par
\pard\li720{}Select automatic references.  Each input line will have an automatic reference made up of the file name and the line ordinal, with a single colon between them.  However, the file name will be empty when standard input is being read.  If both {\f1{}-A} and {\f1{}-r} are selected, then the input reference is still read and skipped, but the automatic reference is used at output time, overriding the input reference.\par
\par
\pard{}{\f1{}-R}\par
\pard{}{\f1{}--right-side-refs}\par
\pard\li720{}In default output format, when option {\f1{}-R} is not used, any reference produced by the effect of options {\f1{}-r} or {\f1{}-A} are given to the far right of output lines, after the right context.  In default output format, when option {\f1{}-R} is specified, references are rather given to the beginning of each output line, before the left context.  For any other output format, option {\f1{}-R} is almost ignored, except for the fact that the width of references is {\i not} taken into account in total output width given by {\f1{}-w} whenever {\f1{}-R} is selected.\par
\par
\pard\li720{}This option is automatically selected whenever GNU extensions are disabled.\par
\par
\pard{}{\f1{}-F {\i string}}\par
\pard{}{\f1{}--flac-truncation={\i string}}\par
\pard\li720{}This option will request that any truncation in the output be reported using the string {\i string}.  Most output fields theoretically extend towards the beginning or the end of the current line, or current sentence, as selected with option {\f1{}-S}.  But there is a maximum allowed output line width, changeable through option {\f1{}-w}, which is further divided into space for various output fields.  When a field has to be truncated because cannot extend until the beginning or the end of the current line to fit in the, then a truncation occurs.  By default, the string used is a single slash, as in {\f1{}-F /}.\par
\par
{\i \pard\li720{}string} may have more than one character, as in {\f1{}-F ...}.  Also, in the particular case {\i string} is empty ({\f1{}-F ""}), truncation flagging is disabled, and no truncation marks are appended in this case.\par
\par
\pard\li720{}As a matter of convenience to the user, many usual backslashed escape sequences, as found in the C language, are recognized and converted to the corresponding characters by {\f1{}ptx} itself.\par
\par
\pard{}{\f1{}-M {\i string}}\par
\pard{}{\f1{}--macro-name={\i string}}\par
\pard\li720{}Select another {\i string} to be used instead of {\f1{}xx}, while generating output suitable for {\f1{}nroff}, {\f1{}troff} or TeX.\par
\par
\pard{}{\f1{}-O}\par
\pard{}{\f1{}--format=roff}\par
\pard\li720{}Choose an output format suitable for {\f1{}nroff} or {\f1{}troff} processing.  Each output line will look like:\par
\par
{\pard\keep\li1440\f1{}.xx "{\i tail}" "{\i before}" "{\i keyword_and_after}" "{\i head}" "{\i ref}"\par
\pard\li720\f0{}}\par
\pard\li720{}so it will be possible to write an {\f1{}.xx} roff macro to take care of the output typesetting.  This is the default output format when GNU extensions are disabled.  Option {\f1{}-M} might be used to change {\f1{}xx} to another macro name.\par
\par
\pard\li720{}In this output format, each non-graphical character, like newline and tab, is merely changed to exactly one space, with no special attempt to compress consecutive spaces.  Each quote character: {\f1{}"} is doubled so it will be correctly processed by {\f1{}nroff} or {\f1{}troff}.\par
\par
\pard{}{\f1{}-T}\par
\pard{}{\f1{}--format=tex}\par
\pard\li720{}Choose an output format suitable for TeX processing.  Each output line will look like:\par
\par
{\pard\keep\li1440\f1{}\'5Cxx \'7B{\i tail}\'7D\'7B{\i before}\'7D\'7B{\i keyword}\'7D\'7B{\i after}\'7D\'7B{\i head}\'7D\'7B{\i ref}\'7D\par
\pard\li720\f0{}}\par
\pard\li720{}so it will be possible to write a {\f1{}\'5Cxx} definition to take care of the output typesetting.  Note that when references are not being produced, that is, neither option {\f1{}-A} nor option {\f1{}-r} is selected, the last parameter of each {\f1{}\'5Cxx} call is inhibited.  Option {\f1{}-M} might be used to change {\f1{}xx} to another macro name.\par
\par
\pard\li720{}In this output format, some special characters, like {\f1{}$}, {\f1{}%}, {\f1{}&}, {\f1{}#} and {\f1{}_} are automatically protected with a backslash.  Curly brackets {\f1{}\'7B}, {\f1{}\'7D} are also protected with a backslash, but also enclosed in a pair of dollar signs to force mathematical mode.  The backslash itself produces the sequence {\f1{}\'5Cbackslash\'7B\'7D}.  Circumflex and tilde diacritics produce the sequence {\f1{}^\'5C\'7B \'7D} and {\f1{}~\'5C\'7B \'7D} respectively.  Other diacriticized characters of the underlying character set produce an appropriate TeX sequence as far as possible.  The other non-graphical characters, like newline and tab, and all others characters which are not part of {\scaps\fs16{}ascii}, are merely changed to exactly one space, with no special attempt to compress consecutive spaces.  Let me know how to improve this special character processing for TeX.\par
\par
\pard{}}\par
\page\pard Node: {\b Compatibility in ptx}, \keepn Next: {\uldb }{\v }, Prev: {\uldb Output formatting in ptx}{\v Output_formatting_in_ptx}, Up: {\uldb ptx invocation}{\v ptx_invocation}\line
K{\footnote K Compatibility in ptx}
#{\footnote Compatibility_in_ptx}
${\footnote \pard{}The GNU extensions to {\f1{}ptx}}\par
\pard{\fs24\b The GNU extensions to {\f1{}ptx}}\par
\par
\pard{}This version of {\f1{}ptx} contains a few features which do not exist in System V {\f1{}ptx}.  These extra features are suppressed by using the {\f1{}-G} command line option, unless overridden by other command line options.  Some GNU extensions cannot be recovered by overriding, so the simple rule is to avoid {\f1{}-G} if you care about GNU extensions.  Here are the differences between this program and System V {\f1{}ptx}.\par
\par
{\pard\fi-720\li720\tx144\tx720{}\tab{}{\f2\'B7}\tab{}This program can read many input files at once, it always writes the resulting concordance on standard output.  On the other end, System V {\f1{}ptx} reads only one file and produce the result on standard output or, if a second {\i file} parameter is given on the command, to that {\i file}.\par
\par
\pard\li720{}Having output parameters not introduced by options is a quite dangerous practice which GNU avoids as far as possible.  So, for using {\f1{}ptx} portably between GNU and System V, you should pay attention to always use it with a single input file, and always expect the result on standard output.  You might also want to automatically configure in a {\f1{}-G} option to {\f1{}ptx} calls in products using {\f1{}ptx}, if the configurator finds that the installed {\f1{}ptx} accepts {\f1{}-G}.\par
\par
\pard\fi-720\li720\tx144\tx720{}\tab{}{\f2\'B7}\tab{}The only options available in System V {\f1{}ptx} are options {\f1{}-b}, {\f1{}-f}, {\f1{}-g}, {\f1{}-i}, {\f1{}-o}, {\f1{}-r}, {\f1{}-t} and {\f1{}-w}.  All other options are GNU extensions and are not repeated in this enumeration.  Moreover, some options have a slightly different meaning when GNU extensions are enabled, as explained below.\par
\par
\pard\fi-720\li720\tx144\tx720{}\tab{}{\f2\'B7}\tab{}By default, concordance output is not formatted for {\f1{}troff} or {\f1{}nroff}.  It is rather formatted for a dumb terminal.  {\f1{}troff} or {\f1{}nroff} output may still be selected through option {\f1{}-O}.\par
\par
\pard\fi-720\li720\tx144\tx720{}\tab{}{\f2\'B7}\tab{}Unless {\f1{}-R} option is used, the maximum reference width is subtracted from the total output line width.  With GNU extensions disabled, width of references is not taken into account in the output line width computations.\par
\par
\pard\fi-720\li720\tx144\tx720{}\tab{}{\f2\'B7}\tab{}All 256 characters, even {\f1{}NUL}s, are always read and processed from input file with no adverse effect, even if GNU extensions are disabled.  However, System V {\f1{}ptx} does not accept 8-bit characters, a few control characters are rejected, and the tilde {\f1{}~} is condemned.\par
\par
\pard\fi-720\li720\tx144\tx720{}\tab{}{\f2\'B7}\tab{}Input line length is only limited by available memory, even if GNU extensions are disabled.  However, System V {\f1{}ptx} processes only the first 200 characters in each line.\par
\par
\pard\fi-720\li720\tx144\tx720{}\tab{}{\f2\'B7}\tab{}The break (non-word) characters default to be every character except all letters of the underlying character set, diacriticized or not.  When GNU extensions are disabled, the break characters default to space, tab and newline only.\par
\par
\pard\fi-720\li720\tx144\tx720{}\tab{}{\f2\'B7}\tab{}The program makes better use of output line width.  If GNU extensions are disabled, the program rather tries to imitate System V {\f1{}ptx}, but still, there are some slight disposition glitches this program does not completely reproduce.\par
\par
\pard\fi-720\li720\tx144\tx720{}\tab{}{\f2\'B7}\tab{}The user can specify both an Ignore file and an Only file.  This is not allowed with System V {\f1{}ptx}.\par
\par
\pard{}}\par
\page\pard Node: {\b Operating on fields within a line}, \keepn Next: {\uldb Operating on characters}{\v Operating_on_characters}, Prev: {\uldb Operating on sorted files}{\v Operating_on_sorted_files}, Up: {\uldb Top}{\v Top}\line
K{\footnote K Operating on fields within a line}
#{\footnote Operating_on_fields_within_a_line}
${\footnote \pard{}Operating on fields within a line}\par
\pard{\fs24\b Operating on fields within a line}\par
\par
{\par
\pard\keep\fi-2880\li2880\tx2880{}{\uldb cut invocation}{\v cut_invocation}\tab Print selected parts of lines.\par
{\uldb paste invocation}{\v paste_invocation}\tab Merge lines of files.\par
{\uldb join invocation}{\v join_invocation}\tab Join lines on a common field.\par
\pard{}}\par
\page\pard Node: {\b cut invocation}, \keepn Next: {\uldb paste invocation}{\v paste_invocation}, Prev: {\uldb }{\v }, Up: {\uldb Operating on fields within a line}{\v Operating_on_fields_within_a_line}\line
K{\footnote K cut invocation}
#{\footnote cut_invocation}
${\footnote {\f1{}\pard{}cut}: Print selected parts of lines}\par
\pard{\fs24\b {\f1{}cut}: Print selected parts of lines}\par
\par
\pard{}{K{\footnote K cut}}{\f1{}cut} writes to standard output selected parts of each line of each input file, or standard input if no files are given or for a file name of {\f1{}-}.  Synopsis:\par
\par
{\pard\keep\li720\f1{}cut [{\i option}]... [{\i file}]...\par
\pard\f0{}}\par
\pard{}In the table which follows, the {\i byte-list}, {\i character-list}, and {\i field-list} are one or more numbers or ranges (two numbers separated by a dash) separated by commas.  Bytes, characters, and fields are numbered from starting at 1.  Incomplete ranges may be given: {\f1{}-{\i m}} means {\f1{}1-{\i m}}; {\f1{}{\i n}-} means {\f1{}{\i n}} through end of line or last field.\par
\par
\pard{}The program accepts the following options.  Also see {\uldb Common options}{\v Common_options}.\par
\par
{\pard{}{\f1{}-b {\i byte-list}}\par
\pard{}{\f1{}--bytes={\i byte-list}}\par
\pard\li720{}{K{\footnote K -b}}{K{\footnote K -bytes}}Print only the bytes in positions listed in {\i byte-list}.  Tabs and backspaces are treated like any other character; they take up 1 byte.\par
\par
\pard{}{\f1{}-c {\i character-list}}\par
\pard{}{\f1{}--characters={\i character-list}}\par
\pard\li720{}{K{\footnote K -c}}{K{\footnote K -characters}}Print only characters in positions listed in {\i character-list}.  The same as {\f1{}-b} for now, but internationalization will change that.  Tabs and backspaces are treated like any other character; they take up 1 character.\par
\par
\pard{}{\f1{}-f {\i field-list}}\par
\pard{}{\f1{}--fields={\i field-list}}\par
\pard\li720{}{K{\footnote K -f}}{K{\footnote K -fields}}Print only the fields listed in {\i field-list}.  Fields are separated by a TAB character by default.\par
\par
\pard{}{\f1{}-d {\i input_delim_byte}}\par
\pard{}{\f1{}--delimiter={\i input_delim_byte}}\par
\pard\li720{}{K{\footnote K -d}}{K{\footnote K -delimiter}}For {\f1{}-f}, fields are separated in the input by the first character in {\i input_delim_byte} (default is TAB).\par
\par
\pard{}{\f1{}-n}\par
\pard\li720{}{K{\footnote K -n}}Do not split multi-byte characters (no-op for now).\par
\par
\pard{}{\f1{}-s}\par
\pard{}{\f1{}--only-delimited}\par
\pard\li720{}{K{\footnote K -s}}{K{\footnote K -only-delimited}}For {\f1{}-f}, do not print lines that do not contain the field separator character.\par
\par
\pard{}{\f1{}--output-delimiter={\i output_delim_string}}\par
\pard\li720{}{K{\footnote K -output-delimiter}}For {\f1{}-f}, output fields are separated by {\i output_delim_string} The default is to use the input delimiter.\par
\par
\pard{}}\par
\page\pard Node: {\b paste invocation}, \keepn Next: {\uldb join invocation}{\v join_invocation}, Prev: {\uldb cut invocation}{\v cut_invocation}, Up: {\uldb Operating on fields within a line}{\v Operating_on_fields_within_a_line}\line
K{\footnote K paste invocation}
#{\footnote paste_invocation}
${\footnote {\f1{}\pard{}paste}: Merge lines of files}\par
\pard{\fs24\b {\f1{}paste}: Merge lines of files}\par
\par
\pard{}{K{\footnote K paste}}{K{\footnote K merging files}} {\f1{}paste} writes to standard output lines consisting of sequentially corresponding lines of each given file, separated by a TAB character.  Standard input is used for a file name of {\f1{}-} or if no input files are given.\par
\par
\pard{}Synopsis:\par
\par
{\pard\keep\li720\f1{}paste [{\i option}]... [{\i file}]...\par
\pard\f0{}}\par
\pard{}The program accepts the following options.  Also see {\uldb Common options}{\v Common_options}.\par
\par
{\pard{}{\f1{}-s}\par
\pard{}{\f1{}--serial}\par
\pard\li720{}{K{\footnote K -s}}{K{\footnote K -serial}}Paste the lines of one file at a time rather than one line from each file.\par
\par
\pard{}{\f1{}-d {\i delim-list}}\par
\pard{}{\f1{}--delimiters {\i delim-list}}\par
\pard\li720{}{K{\footnote K -d}}{K{\footnote K -delimiters}}Consecutively use the characters in {\i delim-list} instead of TAB to separate merged lines.  When {\i delim-list} is exhausted, start again at its beginning.\par
\par
\pard{}}\par
\page\pard Node: {\b join invocation}, \keepn Next: {\uldb }{\v }, Prev: {\uldb paste invocation}{\v paste_invocation}, Up: {\uldb Operating on fields within a line}{\v Operating_on_fields_within_a_line}\line
K{\footnote K join invocation}
#{\footnote join_invocation}
${\footnote {\f1{}\pard{}join}: Join lines on a common field}\par
\pard{\fs24\b {\f1{}join}: Join lines on a common field}\par
\par
\pard{}{K{\footnote K join}}{K{\footnote K common field, joining on}} {\f1{}join} writes to standard output a line for each pair of input lines that have identical join fields.  Synopsis:\par
\par
{\pard\keep\li720\f1{}join [{\i option}]... {\i file1} {\i file2}\par
\pard\f0{}}\par
\pard{}{K{\footnote K LC_COLLATE}}Either {\i file1} or {\i file2} (but not both) can be {\f1{}-}, meaning standard input.  {\i file1} and {\i file2} should be already sorted in increasing textual order on the join fields, using the collating sequence specified by the {\f1{}LC_COLLATE} locale.  Unless the {\f1{}-t} option is given, the input should be sorted ignoring blanks at the start of the join field, as in {\f1{}sort -b}.  If the {\f1{}--ignore-case} option is given, lines should be sorted without regard to the case of characters in the join field, as in {\f1{}sort -f}.\par
\par
\pard{}The defaults are: the join field is the first field in each line; fields in the input are separated by one or more blanks, with leading blanks on the line ignored; fields in the output are separated by a space; each output line consists of the join field, the remaining fields from {\i file1}, then the remaining fields from {\i file2}.\par
\par
\pard{}The program accepts the following options.  Also see {\uldb Common options}{\v Common_options}.\par
\par
{\pard{}{\f1{}-a {\i file-number}}\par
\pard\li720{}{K{\footnote K -a}}Print a line for each unpairable line in file {\i file-number} (either {\f1{}1} or {\f1{}2}), in addition to the normal output.\par
\par
\pard{}{\f1{}-e {\i string}}\par
\pard\li720{}{K{\footnote K -e}}Replace those output fields that are missing in the input with {\i string}.\par
\par
\pard{}{\f1{}-i}\par
\pard{}{\f1{}--ignore-case}\par
\pard\li720{}{K{\footnote K -i}}{K{\footnote K -ignore-case}}Ignore differences in case when comparing keys.  With this option, the lines of the input files must be ordered in the same way.  Use {\f1{}sort -f} to produce this ordering.\par
\par
\pard{}{\f1{}-1 {\i field}}\par
\pard{}{\f1{}-j1 {\i field}}\par
\pard\li720{}{K{\footnote K -1}}{K{\footnote K -j1}}Join on field {\i field} (a positive integer) of file 1.\par
\par
\pard{}{\f1{}-2 {\i field}}\par
\pard{}{\f1{}-j2 {\i field}}\par
\pard\li720{}{K{\footnote K -2}}{K{\footnote K -j2}}Join on field {\i field} (a positive integer) of file 2.\par
\par
\pard{}{\f1{}-j {\i field}}\par
\pard\li720{}Equivalent to {\f1{}-1 {\i field} -2 {\i field}}.\par
\par
\pard{}{\f1{}-o {\i field-list}...}\par
\pard\li720{}Construct each output line according to the format in {\i field-list}.  Each element in {\i field-list} is either the single character {\f1{}0} or has the form {\i m.n} where the file number, {\i m}, is {\f1{}1} or {\f1{}2} and {\i n} is a positive field number.\par
\par
\pard\li720{}A field specification of {\f1{}0} denotes the join field.  In most cases, the functionality of the {\f1{}0} field spec may be reproduced using the explicit {\i m.n} that corresponds to the join field.  However, when printing unpairable lines (using either of the {\f1{}-a} or {\f1{}-v} options), there is no way to specify the join field using {\i m.n} in {\i field-list} if there are unpairable lines in both files.  To give {\f1{}join} that functionality, {\scaps\fs16{}posix} invented the {\f1{}0} field specification notation.\par
\par
\pard\li720{}The elements in {\i field-list} are separated by commas or blanks.  Multiple {\i field-list} arguments can be given after a single {\f1{}-o} option; the values of all lists given with {\f1{}-o} are concatenated together.  All output lines - including those printed because of any -a or -v option - are subject to the specified {\i field-list}.\par
\par
\pard{}{\f1{}-t {\i char}}\par
\pard\li720{}Use character {\i char} as the input and output field separator.\par
\par
\pard{}{\f1{}-v {\i file-number}}\par
\pard\li720{}Print a line for each unpairable line in file {\i file-number} (either {\f1{}1} or {\f1{}2}), instead of the normal output.\par
\par
\pard{}}\par
\pard{}In addition, when GNU {\f1{}join} is invoked with exactly one argument, options {\f1{}--help} and {\f1{}--version} are recognized.  See {\uldb Common options}{\v Common_options}.\par
\par
\page\pard Node: {\b Operating on characters}, \keepn Next: {\uldb Opening the software toolbox}{\v Opening_the_software_toolbox}, Prev: {\uldb Operating on fields within a line}{\v Operating_on_fields_within_a_line}, Up: {\uldb Top}{\v Top}\line
K{\footnote K Operating on characters}
#{\footnote Operating_on_characters}
${\footnote \pard{}Operating on characters}\par
\pard{\fs24\b Operating on characters}\par
\par
\pard{}{K{\footnote K operating on characters}} This commands operate on individual characters.\par
\par
{\par
\pard\keep\fi-2880\li2880\tx2880{}{\uldb tr invocation}{\v tr_invocation}\tab Translate, squeeze, and/or delete characters.\par
{\uldb expand invocation}{\v expand_invocation}\tab Convert tabs to spaces.\par
{\uldb unexpand invocation}{\v unexpand_invocation}\tab Convert spaces to tabs.\par
\pard{}}\par
\page\pard Node: {\b tr invocation}, \keepn Next: {\uldb expand invocation}{\v expand_invocation}, Prev: {\uldb }{\v }, Up: {\uldb Operating on characters}{\v Operating_on_characters}\line
K{\footnote K tr invocation}
#{\footnote tr_invocation}
${\footnote {\f1{}\pard{}tr}: Translate, squeeze, and/or delete characters}\par
\pard{\fs24\b {\f1{}tr}: Translate, squeeze, and/or delete characters}\par
\par
\pard{}{K{\footnote K tr}} Synopsis:\par
\par
{\pard\keep\li720\f1{}tr [{\i option}]... {\i set1} [{\i set2}]\par
\pard\f0{}}\par
{\f1{}\pard{}tr} copies standard input to standard output, performing one of the following operations:\par
\par
{\pard\fi-720\li720\tx144\tx720{}\tab{}{\f2\'B7}\tab{}translate, and optionally squeeze repeated characters in the result,\par
\par
\pard\fi-720\li720\tx144\tx720{}\tab{}{\f2\'B7}\tab{}squeeze repeated characters,\par
\par
\pard\fi-720\li720\tx144\tx720{}\tab{}{\f2\'B7}\tab{}delete characters,\par
\par
\pard\fi-720\li720\tx144\tx720{}\tab{}{\f2\'B7}\tab{}delete characters, then squeeze repeated characters from the result.\par
\pard{}}\par
\pard{}The {\i set1} and (if given) {\i set2} arguments define ordered sets of characters, referred to below as {\i set1} and {\i set2}.  These sets are the characters of the input that {\f1{}tr} operates on.  The {\f1{}--complement} ({\f1{}-c}) option replaces {\i set1} with its complement (all of the characters that are not in {\i set1}).\par
\par
{\par
\pard\keep\fi-2880\li2880\tx2880{}{\uldb Character sets}{\v Character_sets}\tab Specifying sets of characters.\par
{\uldb Translating}{\v Translating}\tab Changing one characters to another.\par
{\uldb Squeezing}{\v Squeezing}\tab Squeezing repeats and deleting.\par
{\uldb Warnings in tr}{\v Warnings_in_tr}\tab Warning messages.\par
\pard{}}\par
\page\pard Node: {\b Character sets}, \keepn Next: {\uldb Translating}{\v Translating}, Prev: {\uldb }{\v }, Up: {\uldb tr invocation}{\v tr_invocation}\line
K{\footnote K Character sets}
#{\footnote Character_sets}
${\footnote \pard{}Specifying sets of characters}\par
\pard{\fs24\b Specifying sets of characters}\par
\par
\pard{}{K{\footnote K specifying sets of characters}} The format of the {\i set1} and {\i set2} arguments resembles the format of regular expressions; however, they are not regular expressions, only lists of characters.  Most characters simply represent themselves in these strings, but the strings can contain the shorthands listed below, for convenience.  Some of them can be used only in {\i set1} or {\i set2}, as noted below.\par
\par
{\pard{}Backslash escapes\par
\pard\li720{}{K{\footnote K backslash escapes}} A backslash followed by a character not listed below causes an error message.\par
\par
{\pard\li720{}{\f1{}\'5Ca}\par
\pard\li1440{}Control-G.\par
\par
\pard\li720{}{\f1{}\'5Cb}\par
\pard\li1440{}Control-H.\par
\par
\pard\li720{}{\f1{}\'5Cf}\par
\pard\li1440{}Control-L.\par
\par
\pard\li720{}{\f1{}\'5Cn}\par
\pard\li1440{}Control-J.\par
\par
\pard\li720{}{\f1{}\'5Cr}\par
\pard\li1440{}Control-M.\par
\par
\pard\li720{}{\f1{}\'5Ct}\par
\pard\li1440{}Control-I.\par
\par
\pard\li720{}{\f1{}\'5Cv}\par
\pard\li1440{}Control-K.\par
\par
\pard\li720{}{\f1{}\'5C{\i ooo}}\par
\pard\li1440{}The character with the value given by {\i ooo}, which is 1 to 3 octal digits,\par
\par
\pard\li720{}{\f1{}\'5C\'5C}\par
\pard\li1440{}A backslash.\par
\pard\li720{}}\par
\pard{}Ranges\par
\pard\li720{}{K{\footnote K ranges}} The notation {\f1{}{\i m}-{\i n}} expands to all of the characters from {\i m} through {\i n}, in ascending order.  {\i m} should collate before {\i n}; if it doesn't, an error results.  As an example, {\f1{}0-9} is the same as {\f1{}0123456789}.  Although GNU {\f1{}tr} does not support the System V syntax that uses square brackets to enclose ranges, translations specified in that format will still work as long as the brackets in {\i string1} correspond to identical brackets in {\i string2}.\par
\par
\pard{}Repeated characters\par
\pard\li720{}{K{\footnote K repeated characters}} The notation {\f1{}[{\i c}*{\i n}]} in {\i set2} expands to {\i n} copies of character {\i c}.  Thus, {\f1{}[y*6]} is the same as {\f1{}yyyyyy}.  The notation {\f1{}[{\i c}*]} in {\i string2} expands to as many copies of {\i c} as are needed to make {\i set2} as long as {\i set1}.  If {\i n} begins with {\f1{}0}, it is interpreted in octal, otherwise in decimal.\par
\par
\pard{}Character classes\par
\pard\li720{}{K{\footnote K characters classes}} The notation {\f1{}[:{\i class}:]} expands to all of the characters in the (predefined) class {\i class}.  The characters expand in no particular order, except for the {\f1{}upper} and {\f1{}lower} classes, which expand in ascending order.  When the {\f1{}--delete} ({\f1{}-d}) and {\f1{}--squeeze-repeats} ({\f1{}-s}) options are both given, any character class can be used in {\i set2}.  Otherwise, only the character classes {\f1{}lower} and {\f1{}upper} are accepted in {\i set2}, and then only if the corresponding character class ({\f1{}upper} and {\f1{}lower}, respectively) is specified in the same relative position in {\i set1}.  Doing this specifies case conversion.  The class names are given below; an error results when an invalid class name is given.\par
\par
{\pard\li720{}{\f1{}alnum}\par
\pard\li1440{}{K{\footnote K alnum}}Letters and digits.\par
\par
\pard\li720{}{\f1{}alpha}\par
\pard\li1440{}{K{\footnote K alpha}}Letters.\par
\par
\pard\li720{}{\f1{}blank}\par
\pard\li1440{}{K{\footnote K blank}}Horizontal whitespace.\par
\par
\pard\li720{}{\f1{}cntrl}\par
\pard\li1440{}{K{\footnote K cntrl}}Control characters.\par
\par
\pard\li720{}{\f1{}digit}\par
\pard\li1440{}{K{\footnote K digit}}Digits.\par
\par
\pard\li720{}{\f1{}graph}\par
\pard\li1440{}{K{\footnote K graph}}Printable characters, not including space.\par
\par
\pard\li720{}{\f1{}lower}\par
\pard\li1440{}{K{\footnote K lower}}Lowercase letters.\par
\par
\pard\li720{}{\f1{}print}\par
\pard\li1440{}{K{\footnote K print}}Printable characters, including space.\par
\par
\pard\li720{}{\f1{}punct}\par
\pard\li1440{}{K{\footnote K punct}}Punctuation characters.\par
\par
\pard\li720{}{\f1{}space}\par
\pard\li1440{}{K{\footnote K space}}Horizontal or vertical whitespace.\par
\par
\pard\li720{}{\f1{}upper}\par
\pard\li1440{}{K{\footnote K upper}}Uppercase letters.\par
\par
\pard\li720{}{\f1{}xdigit}\par
\pard\li1440{}{K{\footnote K xdigit}}Hexadecimal digits.\par
\pard\li720{}}\par
\pard{}Equivalence classes\par
\pard\li720{}{K{\footnote K equivalence classes}} The syntax {\f1{}[={\i c}=]} expands to all of the characters that are equivalent to {\i c}, in no particular order.  Equivalence classes are a relatively recent invention intended to support non-English alphabets.  But there seems to be no standard way to define them or determine their contents.  Therefore, they are not fully implemented in GNU {\f1{}tr}; each character's equivalence class consists only of that character, which is of no particular use.\par
\par
\pard{}}\par
\page\pard Node: {\b Translating}, \keepn Next: {\uldb Squeezing}{\v Squeezing}, Prev: {\uldb Character sets}{\v Character_sets}, Up: {\uldb tr invocation}{\v tr_invocation}\line
K{\footnote K Translating}
#{\footnote Translating}
${\footnote \pard{}Translating}\par
\pard{\fs24\b Translating}\par
\par
\pard{}{K{\footnote K translating characters}} {\f1{}tr} performs translation when {\i set1} and {\i set2} are both given and the {\f1{}--delete} ({\f1{}-d}) option is not given.  {\f1{}tr} translates each character of its input that is in {\i set1} to the corresponding character in {\i set2}.  Characters not in {\i set1} are passed through unchanged.  When a character appears more than once in {\i set1} and the corresponding characters in {\i set2} are not all the same, only the final one is used.  For example, these two commands are equivalent:\par
\par
{\pard\keep\li720\f1{}tr aaa xyz\line
tr a z\par
\pard\f0{}}\par
\pard{}A common use of {\f1{}tr} is to convert lowercase characters to uppercase.  This can be done in many ways.  Here are three of them:\par
\par
{\pard\keep\li720\f1{}tr abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ\line
tr a-z A-Z\line
tr '[:lower:]' '[:upper:]'\par
\pard\f0{}}\par
\pard{}When {\f1{}tr} is performing translation, {\i set1} and {\i set2} typically have the same length.  If {\i set1} is shorter than {\i set2}, the extra characters at the end of {\i set2} are ignored.\par
\par
\pard{}On the other hand, making {\i set1} longer than {\i set2} is not portable; {\scaps\fs16{}posix.2} says that the result is undefined.  In this situation, BSD {\f1{}tr} pads {\i set2} to the length of {\i set1} by repeating the last character of {\i set2} as many times as necessary.  System V {\f1{}tr} truncates {\i set1} to the length of {\i set2}.\par
\par
\pard{}By default, GNU {\f1{}tr} handles this case like BSD {\f1{}tr}.  When the {\f1{}--truncate-set1} ({\f1{}-t}) option is given, GNU {\f1{}tr} handles this case like the System V {\f1{}tr} instead.  This option is ignored for operations other than translation.\par
\par
\pard{}Acting like System V {\f1{}tr} in this case breaks the relatively common BSD idiom:\par
\par
{\pard\keep\li720\f1{}tr -cs A-Za-z0-9 '\'5C012'\par
\pard\f0{}}\par
\pard{}because it converts only zero bytes (the first element in the complement of {\i set1}), rather than all non-alphanumerics, to newlines.\par
\par
\page\pard Node: {\b Squeezing}, \keepn Next: {\uldb Warnings in tr}{\v Warnings_in_tr}, Prev: {\uldb Translating}{\v Translating}, Up: {\uldb tr invocation}{\v tr_invocation}\line
K{\footnote K Squeezing}
#{\footnote Squeezing}
${\footnote \pard{}Squeezing repeats and deleting}\par
\pard{\fs24\b Squeezing repeats and deleting}\par
\par
\pard{}{K{\footnote K squeezing repeat characters}}{K{\footnote K deleting characters}} When given just the {\f1{}--delete} ({\f1{}-d}) option, {\f1{}tr} removes any input characters that are in {\i set1}.\par
\par
\pard{}When given just the {\f1{}--squeeze-repeats} ({\f1{}-s}) option, {\f1{}tr} replaces each input sequence of a repeated character that is in {\i set1} with a single occurrence of that character.\par
\par
\pard{}When given both {\f1{}--delete} and {\f1{}--squeeze-repeats}, {\f1{}tr} first performs any deletions using {\i set1}, then squeezes repeats from any remaining characters using {\i set2}.\par
\par
\pard{}The {\f1{}--squeeze-repeats} option may also be used when translating, in which case {\f1{}tr} first performs translation, then squeezes repeats from any remaining characters using {\i set2}.\par
\par
\pard{}Here are some examples to illustrate various combinations of options:\par
\par
{\pard\fi-720\li720\tx144\tx720{}\tab{}{\f2\'B7}\tab{}Remove all zero bytes:\par
\par
{\pard\keep\li1440\f1{}tr -d '\'5C000'\par
\pard\li720\f0{}}\par
\pard\fi-720\li720\tx144\tx720{}\tab{}{\f2\'B7}\tab{}Put all words on lines by themselves.  This converts all non-alphanumeric characters to newlines, then squeezes each string of repeated newlines into a single newline:\par
\par
{\pard\keep\li1440\f1{}tr -cs 'a-zA-Z0-9' '[\'5Cn*]'\par
\pard\li720\f0{}}\par
\pard\fi-720\li720\tx144\tx720{}\tab{}{\f2\'B7}\tab{}Convert each sequence of repeated newlines to a single newline:\par
\par
{\pard\keep\li1440\f1{}tr -s '\'5Cn'\par
\pard\li720\f0{}}\par
\pard\fi-720\li720\tx144\tx720{}\tab{}{\f2\'B7}\tab{}Find doubled occurrences of words in a document.  For example, people often write "the the" with the duplicated words separated by a newline.  The bourne shell script below works first by converting each sequence of punctuation and blank characters to a single newline.  That puts each "word" on a line by itself.  Next it maps all uppercase characters to lower case, and finally it runs {\f1{}uniq} with the {\f1{}-d} option to print out only the words that were adjacent duplicates.\par
\par
{\pard\keep\li1440\f1{}#!/bin/sh\line
cat "$@" \'5C\line
  | tr -s '[:punct:][:blank:]' '\'5Cn' \'5C\line
  | tr '[:upper:]' '[:lower:]' \'5C\line
  | uniq -d\par
\pard\li720\f0{}}\par
\pard{}}\par
\page\pard Node: {\b Warnings in tr}, \keepn Next: {\uldb }{\v }, Prev: {\uldb Squeezing}{\v Squeezing}, Up: {\uldb tr invocation}{\v tr_invocation}\line
K{\footnote K Warnings in tr}
#{\footnote Warnings_in_tr}
${\footnote \pard{}Warning messages}\par
\pard{\fs24\b Warning messages}\par
\par
\pard{}{K{\footnote K POSIXLY_CORRECT}}Setting the environment variable {\f1{}POSIXLY_CORRECT} turns off the following warning and error messages, for strict compliance with {\scaps\fs16{}posix.2}.  Otherwise, the following diagnostics are issued:\par
\par
{\pard\fi-720\li720\tx144\tx720{}\tab{}1. \tab{}When the {\f1{}--delete} option is given but {\f1{}--squeeze-repeats} is not, and {\i set2} is given, GNU {\f1{}tr} by default prints a usage message and exits, because {\i set2} would not be used.  The {\scaps\fs16{}posix} specification says that {\i set2} must be ignored in this case. Silently ignoring arguments is a bad idea.\par
\par
\pard\fi-720\li720\tx144\tx720{}\tab{}2. \tab{}When an ambiguous octal escape is given.  For example, {\f1{}\'5C400} is actually {\f1{}\'5C40} followed by the digit {\f1{}0}, because the value 400 octal does not fit into a single byte.\par
\par
\pard{}}\par
\pard{}GNU {\f1{}tr} does not provide complete BSD or System V compatibility.  For example, it is impossible to disable interpretation of the {\scaps\fs16{}posix} constructs {\f1{}[:alpha:]}, {\f1{}[=c=]}, and {\f1{}[c*10]}.  Also, GNU {\f1{}tr} does not delete zero bytes automatically, unlike traditional Unix versions, which provide no way to preserve zero bytes.\par
\par
\page\pard Node: {\b expand invocation}, \keepn Next: {\uldb unexpand invocation}{\v unexpand_invocation}, Prev: {\uldb tr invocation}{\v tr_invocation}, Up: {\uldb Operating on characters}{\v Operating_on_characters}\line
K{\footnote K expand invocation}
#{\footnote expand_invocation}
${\footnote {\f1{}\pard{}expand}: Convert tabs to spaces}\par
\pard{\fs24\b {\f1{}expand}: Convert tabs to spaces}\par
\par
\pard{}{K{\footnote K expand}}{K{\footnote K tabs to spaces, converting}}{K{\footnote K converting tabs to spaces}} {\f1{}expand} writes the contents of each given {\i file}, or standard input if none are given or for a {\i file} of {\f1{}-}, to standard output, with tab characters converted to the appropriate number of spaces.  Synopsis:\par
\par
{\pard\keep\li720\f1{}expand [{\i option}]... [{\i file}]...\par
\pard\f0{}}\par
\pard{}By default, {\f1{}expand} converts all tabs to spaces.  It preserves backspace characters in the output; they decrement the column count for tab calculations.  The default action is equivalent to {\f1{}-8} (set tabs every 8 columns).\par
\par
\pard{}The program accepts the following options.  Also see {\uldb Common options}{\v Common_options}.\par
\par
{\pard{}{\f1{}-{\i tab1}[,{\i tab2}]...}\par
\pard{}{\f1{}-t {\i tab1}[,{\i tab2}]...}\par
\pard{}{\f1{}--tabs={\i tab1}[,{\i tab2}]...}\par
\pard\li720{}{K{\footnote K -{\i tab}}}{K{\footnote K -t}}{K{\footnote K -tabs}}{K{\footnote K tabstops, setting}}If only one tab stop is given, set the tabs {\i tab1} spaces apart (default is 8).  Otherwise, set the tabs at columns {\i tab1}, {\i tab2}, ... (numbered from 0), and replace any tabs beyond the last tabstop given with single spaces.  If the tabstops are specified with the {\f1{}-t} or {\f1{}--tabs} option, they can be separated by blanks as well as by commas.\par
\par
\pard{}{\f1{}-i}\par
\pard{}{\f1{}--initial}\par
\pard\li720{}{K{\footnote K -i}}{K{\footnote K -initial}}{K{\footnote K initial tabs, converting}}Only convert initial tabs (those that precede all non-space or non-tab characters) on each line to spaces.\par
\par
\pard{}}\par
\page\pard Node: {\b unexpand invocation}, \keepn Next: {\uldb }{\v }, Prev: {\uldb expand invocation}{\v expand_invocation}, Up: {\uldb Operating on characters}{\v Operating_on_characters}\line
K{\footnote K unexpand invocation}
#{\footnote unexpand_invocation}
${\footnote {\f1{}\pard{}unexpand}: Convert spaces to tabs}\par
\pard{\fs24\b {\f1{}unexpand}: Convert spaces to tabs}\par
\par
\pard{}{K{\footnote K unexpand}} {\f1{}unexpand} writes the contents of each given {\i file}, or standard input if none are given or for a {\i file} of {\f1{}-}, to standard output, with strings of two or more space or tab characters converted to as many tabs as possible followed by as many spaces as are needed.  Synopsis:\par
\par
{\pard\keep\li720\f1{}unexpand [{\i option}]... [{\i file}]...\par
\pard\f0{}}\par
\pard{}By default, {\f1{}unexpand} converts only initial spaces and tabs (those that precede all non space or tab characters) on each line.  It preserves backspace characters in the output; they decrement the column count for tab calculations.  By default, tabs are set at every 8th column.\par
\par
\pard{}The program accepts the following options.  Also see {\uldb Common options}{\v Common_options}.\par
\par
{\pard{}{\f1{}-{\i tab1}[,{\i tab2}]...}\par
\pard{}{\f1{}-t {\i tab1}[,{\i tab2}]...}\par
\pard{}{\f1{}--tabs={\i tab1}[,{\i tab2}]...}\par
\pard\li720{}{K{\footnote K -{\i tab}}}{K{\footnote K -t}}{K{\footnote K -tabs}}If only one tab stop is given, set the tabs {\i tab1} spaces apart instead of the default 8.  Otherwise, set the tabs at columns {\i tab1}, {\i tab2}, ... (numbered from 0), and leave spaces and tabs beyond the tabstops given unchanged.  If the tabstops are specified with the {\f1{}-t} or {\f1{}--tabs} option, they can be separated by blanks as well as by commas.  This option implies the {\f1{}-a} option.\par
\par
\pard{}{\f1{}-a}\par
\pard{}{\f1{}--all}\par
\pard\li720{}{K{\footnote K -a}}{K{\footnote K -all}}Convert all strings of two or more spaces or tabs, not just initial ones, to tabs.\par
\par
\pard{}}\par
\page\pard Node: {\b Opening the software toolbox}, \keepn Next: {\uldb Index}{\v Index}, Prev: {\uldb Operating on characters}{\v Operating_on_characters}, Up: {\uldb Top}{\v Top}\line
K{\footnote K Opening the software toolbox}
#{\footnote Opening_the_software_toolbox}
${\footnote \pard{}Opening the software toolbox}\par
\pard{\fs24\b Opening the software toolbox}\par
\par
\pard{}This chapter originally appeared in {\i Linux Journal}, volume 1, number 2, in the {\i What's GNU?} column. It was written by Arnold Robbins.\par
\par
{\par
\pard\keep\fi-2880\li2880\tx2880{}{\uldb Toolbox introduction}{\v Toolbox_introduction}\tab Toolbox introduction\par
{\uldb I/O redirection}{\v I_O_redirection}\tab I/O redirection\par
{\uldb The who command}{\v The_who_command}\tab The {\f1{}who} command\par
{\uldb The cut command}{\v The_cut_command}\tab The {\f1{}cut} command\par
{\uldb The sort command}{\v The_sort_command}\tab The {\f1{}sort} command\par
{\uldb The uniq command}{\v The_uniq_command}\tab The {\f1{}uniq} command\par
{\uldb Putting the tools together}{\v Putting_the_tools_together}\tab Putting the tools together\par
\pard{}}\par
\page\pard Node: {\b Toolbox introduction}, \keepn Next: {\uldb I/O redirection}{\v I_O_redirection}, Prev: {\uldb }{\v }, Up: {\uldb Opening the software toolbox}{\v Opening_the_software_toolbox}\line
K{\footnote K Toolbox introduction}
#{\footnote Toolbox_introduction}
${\footnote \pard{}Toolbox introduction}\par
\pard{\fs24\b Toolbox introduction}\par
\par
\pard{}This month's column is only peripherally related to the GNU Project, in that it describes a number of the GNU tools on your Linux system and how they might be used.  What it's really about is the "Software Tools" philosophy of program development and usage.\par
\par
\pard{}The software tools philosophy was an important and integral concept in the initial design and development of Unix (of which Linux and GNU are essentially clones).  Unfortunately, in the modern day press of Internetworking and flashy GUIs, it seems to have fallen by the wayside.  This is a shame, since it provides a powerful mental model for solving many kinds of problems.\par
\par
\pard{}Many people carry a Swiss Army knife around in their pants pockets (or purse).  A Swiss Army knife is a handy tool to have: it has several knife blades, a screwdriver, tweezers, toothpick, nail file, corkscrew, and perhaps a number of other things on it.  For the everyday, small miscellaneous jobs where you need a simple, general purpose tool, it's just the thing.\par
\par
\pard{}On the other hand, an experienced carpenter doesn't build a house using a Swiss Army knife.  Instead, he has a toolbox chock full of specialized tools--a saw, a hammer, a screwdriver, a plane, and so on.  And he knows exactly when and where to use each tool; you won't catch him hammering nails with the handle of his screwdriver.\par
\par
\pard{}The Unix developers at Bell Labs were all professional programmers and trained computer scientists.  They had found that while a one-size-fits-all program might appeal to a user because there's only one program to use, in practice such programs are\par
\par
{\pard\fi-720\li720\tx144\tx720{}\tab{}a.\tab{}difficult to write,\par
\par
\pard\fi-720\li720\tx144\tx720{}\tab{}b.\tab{}difficult to maintain and debug, and\par
\par
\pard\fi-720\li720\tx144\tx720{}\tab{}c.\tab{}difficult to extend to meet new situations.\par
\pard{}}\par
\pard{}Instead, they felt that programs should be specialized tools.  In short, each program "should do one thing well."  No more and no less.  Such programs are simpler to design, write, and get right--they only do one thing.\par
\par
\pard{}Furthermore, they found that with the right machinery for hooking programs together, that the whole was greater than the sum of the parts.  By combining several special purpose programs, you could accomplish a specific task that none of the programs was designed for, and accomplish it much more quickly and easily than if you had to write a special purpose program.  We will see some (classic) examples of this further on in the column.  (An important additional point was that, if necessary, take a detour and build any software tools you may need first, if you don't already have something appropriate in the toolbox.)\par
\par
\page\pard Node: {\b I/O redirection}, \keepn Next: {\uldb The who command}{\v The_who_command}, Prev: {\uldb Toolbox introduction}{\v Toolbox_introduction}, Up: {\uldb Opening the software toolbox}{\v Opening_the_software_toolbox}\line
K{\footnote K I/O redirection}
#{\footnote I_O_redirection}
${\footnote \pard{}I/O redirection}\par
\pard{\fs24\b I/O redirection}\par
\par
\pard{}Hopefully, you are familiar with the basics of I/O redirection in the shell, in particular the concepts of "standard input," "standard output," and "standard error".  Briefly, "standard input" is a data source, where data comes from.  A program should not need to either know or care if the data source is a disk file, a keyboard, a magnetic tape, or even a punched card reader.  Similarly, "standard output" is a data sink, where data goes to.  The program should neither know nor care where this might be.  Programs that only read their standard input, do something to the data, and then send it on, are called "filters", by analogy to filters in a water pipeline.\par
\par
\pard{}With the Unix shell, it's very easy to set up data pipelines:\par
\par
{\pard\keep\li720\f1{}program_to_create_data | filter1 | .... | filterN > final.pretty.data\par
\pard\f0{}}\par
\pard{}We start out by creating the raw data; each filter applies some successive transformation to the data, until by the time it comes out of the pipeline, it is in the desired form.\par
\par
\pard{}This is fine and good for standard input and standard output.  Where does the standard error come in to play?  Well, think about {\f1{}filter1} in the pipeline above.  What happens if it encounters an error in the data it sees?  If it writes an error message to standard output, it will just disappear down the pipeline into {\f1{}filter2}'s input, and the user will probably never see it.  So programs need a place where they can send error messages so that the user will notice them.  This is standard error, and it is usually connected to your console or window, even if you have redirected standard output of your program away from your screen.\par
\par
\pard{}For filter programs to work together, the format of the data has to be agreed upon.  The most straightforward and easiest format to use is simply lines of text.  Unix data files are generally just streams of bytes, with lines delimited by the {\scaps\fs16{}ascii} {\scaps\fs16{}lf} (Line Feed) character, conventionally called a "newline" in the Unix literature. (This is {\f1{}'\'5Cn'} if you're a C programmer.)  This is the format used by all the traditional filtering programs.  (Many earlier operating systems had elaborate facilities and special purpose programs for managing binary data.  Unix has always shied away from such things, under the philosophy that it's easiest to simply be able to view and edit your data with a text editor.)\par
\par
\pard{}OK, enough introduction. Let's take a look at some of the tools, and then we'll see how to hook them together in interesting ways.   In the following discussion, we will only present those command line options that interest us.  As you should always do, double check your system documentation for the full story.\par
\par
\page\pard Node: {\b The who command}, \keepn Next: {\uldb The cut command}{\v The_cut_command}, Prev: {\uldb I/O redirection}{\v I_O_redirection}, Up: {\uldb Opening the software toolbox}{\v Opening_the_software_toolbox}\line
K{\footnote K The who command}
#{\footnote The_who_command}
${\footnote \pard{}The {\f1{}who} command}\par
\pard{\fs24\b The {\f1{}who} command}\par
\par
\pard{}The first program is the {\f1{}who} command.  By itself, it generates a list of the users who are currently logged in.  Although I'm writing this on a single-user system, we'll pretend that several people are logged in:\par
\par
{\pard\keep\li720\f1{}$ who\line
arnold   console Jan 22 19:57\line
miriam   ttyp0   Jan 23 14:19(:0.0)\line
bill     ttyp1   Jan 21 09:32(:0.0)\line
arnold   ttyp2   Jan 23 20:48(:0.0)\par
\pard\f0{}}\par
\pard{}Here, the {\f1{}$} is the usual shell prompt, at which I typed {\f1{}who}.  There are three people logged in, and I am logged in twice.  On traditional Unix systems, user names are never more than eight characters long.  This little bit of trivia will be useful later.  The output of {\f1{}who} is nice, but the data is not all that exciting.\par
\par
\page\pard Node: {\b The cut command}, \keepn Next: {\uldb The sort command}{\v The_sort_command}, Prev: {\uldb The who command}{\v The_who_command}, Up: {\uldb Opening the software toolbox}{\v Opening_the_software_toolbox}\line
K{\footnote K The cut command}
#{\footnote The_cut_command}
${\footnote \pard{}The {\f1{}cut} command}\par
\pard{\fs24\b The {\f1{}cut} command}\par
\par
\pard{}The next program we'll look at is the {\f1{}cut} command.  This program cuts out columns or fields of input data.  For example, we can tell it to print just the login name and full name from the {\f1{}/etc/passwd file}.  The {\f1{}/etc/passwd} file has seven fields, separated by colons:\par
\par
{\pard\keep\li720\f1{}arnold:xyzzy:2076:10:Arnold D. Robbins:/home/arnold:/bin/ksh\par
\pard\f0{}}\par
\pard{}To get the first and fifth fields, we would use cut like this:\par
\par
{\pard\keep\li720\f1{}$ cut -d: -f1,5 /etc/passwd\line
root:Operator\line
...\line
arnold:Arnold D. Robbins\line
miriam:Miriam A. Robbins\line
...\par
\pard\f0{}}\par
\pard{}With the {\f1{}-c} option, {\f1{}cut} will cut out specific characters (i.e., columns) in the input lines.  This command looks like it might be useful for data filtering.\par
\par
\page\pard Node: {\b The sort command}, \keepn Next: {\uldb The uniq command}{\v The_uniq_command}, Prev: {\uldb The cut command}{\v The_cut_command}, Up: {\uldb Opening the software toolbox}{\v Opening_the_software_toolbox}\line
K{\footnote K The sort command}
#{\footnote The_sort_command}
${\footnote \pard{}The {\f1{}sort} command}\par
\pard{\fs24\b The {\f1{}sort} command}\par
\par
\pard{}Next we'll look at the {\f1{}sort} command.  This is one of the most powerful commands on a Unix-style system; one that you will often find yourself using when setting up fancy data plumbing. The {\f1{}sort} command reads and sorts each file named on the command line.  It then merges the sorted data and writes it to standard output.  It will read standard input if no files are given on the command line (thus making it into a filter).  The sort is based on the character collating sequence or based on user-supplied ordering criteria.\par
\par
\page\pard Node: {\b The uniq command}, \keepn Next: {\uldb Putting the tools together}{\v Putting_the_tools_together}, Prev: {\uldb The sort command}{\v The_sort_command}, Up: {\uldb Opening the software toolbox}{\v Opening_the_software_toolbox}\line
K{\footnote K The uniq command}
#{\footnote The_uniq_command}
${\footnote \pard{}The {\f1{}uniq} command}\par
\pard{\fs24\b The {\f1{}uniq} command}\par
\par
\pard{}Finally (at least for now), we'll look at the {\f1{}uniq} program.  When sorting data, you will often end up with duplicate lines, lines that are identical.  Usually, all you need is one instance of each line.  This is where {\f1{}uniq} comes in. The {\f1{}uniq} program reads its standard input, which it expects to be sorted.  It only prints out one copy of each duplicated line.  It does have several options.  Later on, we'll use the {\f1{}-c} option, which prints each unique line, preceded by a count of the number of times that line occurred in the input.\par
\par
\page\pard Node: {\b Putting the tools together}, \keepn Next: {\uldb }{\v }, Prev: {\uldb The uniq command}{\v The_uniq_command}, Up: {\uldb Opening the software toolbox}{\v Opening_the_software_toolbox}\line
K{\footnote K Putting the tools together}
#{\footnote Putting_the_tools_together}
${\footnote \pard{}Putting the tools together}\par
\pard{\fs24\b Putting the tools together}\par
\par
\pard{}Now, let's suppose this is a large BBS system with dozens of users logged in.  The management wants the SysOp to write a program that will generate a sorted list of logged in users.  Furthermore, even if a user is logged in multiple times, his or her name should only show up in the output once.\par
\par
\pard{}The SysOp could sit down with the system documentation and write a C program that did this. It would take perhaps a couple of hundred lines of code and about two hours to write it, test it, and debug it.  However, knowing the software toolbox, the SysOp can instead start out by generating just a list of logged on users:\par
\par
{\pard\keep\li720\f1{}$ who | cut -c1-8\line
arnold\line
miriam\line
bill\line
arnold\par
\pard\f0{}}\par
\pard{}Next, sort the list:\par
\par
{\pard\keep\li720\f1{}$ who | cut -c1-8 | sort\line
arnold\line
arnold\line
bill\line
miriam\par
\pard\f0{}}\par
\pard{}Finally, run the sorted list through {\f1{}uniq}, to weed out duplicates:\par
\par
{\pard\keep\li720\f1{}$ who | cut -c1-8 | sort | uniq\line
arnold\line
bill\line
miriam\par
\pard\f0{}}\par
\pard{}The {\f1{}sort} command actually has a {\f1{}-u} option that does what {\f1{}uniq} does. However, {\f1{}uniq} has other uses for which one cannot substitute {\f1{}sort -u}.\par
\par
\pard{}The SysOp puts this pipeline into a shell script, and makes it available for all the users on the system:\par
\par
{\pard\keep\li720\f1{}# cat > /usr/local/bin/listusers\line
who | cut -c1-8 | sort | uniq\line
^D\line
# chmod +x /usr/local/bin/listusers\par
\pard\f0{}}\par
\pard{}There are four major points to note here.  First, with just four programs, on one command line, the SysOp was able to save about two hours worth of work.  Furthermore, the shell pipeline is just about as efficient as the C program would be, and it is much more efficient in terms of programmer time.  People time is much more expensive than computer time, and in our modern "there's never enough time to do everything" society, saving two hours of programmer time is no mean feat.\par
\par
\pard{}Second, it is also important to emphasize that with the {\i combination} of the tools, it is possible to do a special purpose job never imagined by the authors of the individual programs.\par
\par
\pard{}Third, it is also valuable to build up your pipeline in stages, as we did here.  This allows you to view the data at each stage in the pipeline, which helps you acquire the confidence that you are indeed using these tools correctly.\par
\par
\pard{}Finally, by bundling the pipeline in a shell script, other users can use your command, without having to remember the fancy plumbing you set up for them. In terms of how you run them, shell scripts and compiled programs are indistinguishable.\par
\par
\pard{}After the previous warm-up exercise, we'll look at two additional, more complicated pipelines.  For them, we need to introduce two more tools.\par
\par
\pard{}The first is the {\f1{}tr} command, which stands for "transliterate."  The {\f1{}tr} command works on a character-by-character basis, changing characters. Normally it is used for things like mapping upper case to lower case:\par
\par
{\pard\keep\li720\f1{}$ echo ThIs ExAmPlE HaS MIXED case! | tr '[A-Z]' '[a-z]'\line
this example has mixed case!\par
\pard\f0{}}\par
\pard{}There are several options of interest:\par
\par
{\pard{}{\f1{}-c}\par
\pard\li720{}work on the complement of the listed characters, i.e., operations apply to characters not in the given set\par
\par
\pard{}{\f1{}-d}\par
\pard\li720{}delete characters in the first set from the output\par
\par
\pard{}{\f1{}-s}\par
\pard\li720{}squeeze repeated characters in the output into just one character.\par
\pard{}}\par
\pard{}We will be using all three options in a moment.\par
\par
\pard{}The other command we'll look at is {\f1{}comm}.  The {\f1{}comm} command takes two sorted input files as input data, and prints out the files' lines in three columns.  The output columns are the data lines unique to the first file, the data lines unique to the second file, and the data lines that are common to both.  The {\f1{}-1}, {\f1{}-2}, and {\f1{}-3} command line options omit the respective columns. (This is non-intuitive and takes a little getting used to.)  For example:\par
\par
{\pard\keep\li720\f1{}$ cat f1\line
11111\line
22222\line
33333\line
44444\line
$ cat f2\line
00000\line
22222\line
33333\line
55555\line
$ comm f1 f2\line
        00000\line
11111\line
                22222\line
                33333\line
44444\line
        55555\par
\pard\f0{}}\par
\pard{}The single dash as a filename tells {\f1{}comm} to read standard input instead of a regular file.\par
\par
\pard{}Now we're ready to build a fancy pipeline.  The first application is a word frequency counter.  This helps an author determine if he or she is over-using certain words.\par
\par
\pard{}The first step is to change the case of all the letters in our input file to one case.  "The" and "the" are the same word when doing counting.\par
\par
{\pard\keep\li720\f1{}$ tr '[A-Z]' '[a-z]' < whats.gnu | ...\par
\pard\f0{}}\par
\pard{}The next step is to get rid of punctuation.  Quoted words and unquoted words should be treated identically; it's easiest to just get the punctuation out of the way.\par
\par
{\pard\keep\li720\f1{}$ tr '[A-Z]' '[a-z]' < whats.gnu | tr -cd '[A-Za-z0-9_ \'5C012]' | ...\par
\pard\f0{}}\par
\pard{}The second {\f1{}tr} command operates on the complement of the listed characters, which are all the letters, the digits, the underscore, and the blank.  The {\f1{}\'5C012} represents the newline character; it has to be left alone.  (The {\scaps\fs16{}ascii} tab character should also be included for good measure in a production script.)\par
\par
\pard{}At this point, we have data consisting of words separated by blank space.  The words only contain alphanumeric characters (and the underscore).  The next step is break the data apart so that we have one word per line. This makes the counting operation much easier, as we will see shortly.\par
\par
{\pard\keep\li720\f1{}$ tr '[A-Z]' '[a-z]' < whats.gnu | tr -cd '[A-Za-z0-9_ \'5C012]' |\line
> tr -s '[ ]' '\'5C012' | ...\par
\pard\f0{}}\par
\pard{}This command turns blanks into newlines.  The {\f1{}-s} option squeezes multiple newline characters in the output into just one.  This helps us avoid blank lines. (The {\f1{}>} is the shell's "secondary prompt."  This is what the shell prints when it notices you haven't finished typing in all of a command.)\par
\par
\pard{}We now have data consisting of one word per line, no punctuation, all one case.  We're ready to count each word:\par
\par
{\pard\keep\li720\f1{}$ tr '[A-Z]' '[a-z]' < whats.gnu | tr -cd '[A-Za-z0-9_ \'5C012]' |\line
> tr -s '[ ]' '\'5C012' | sort | uniq -c | ...\par
\pard\f0{}}\par
\pard{}At this point, the data might look something like this:\par
\par
{\pard\keep\li720\f1{}  60 a\line
   2 able\line
   6 about\line
   1 above\line
   2 accomplish\line
   1 acquire\line
   1 actually\line
   2 additional\par
\pard\f0{}}\par
\pard{}The output is sorted by word, not by count!  What we want is the most frequently used words first.  Fortunately, this is easy to accomplish, with the help of two more {\f1{}sort} options:\par
\par
{\pard{}{\f1{}-n}\par
\pard\li720{}do a numeric sort, not a textual one\par
\par
\pard{}{\f1{}-r}\par
\pard\li720{}reverse the order of the sort\par
\pard{}}\par
\pard{}The final pipeline looks like this:\par
\par
{\pard\keep\li720\f1{}$ tr '[A-Z]' '[a-z]' < whats.gnu | tr -cd '[A-Za-z0-9_ \'5C012]' |\line
> tr -s '[ ]' '\'5C012' | sort | uniq -c | sort -nr\line
 156 the\line
  60 a\line
  58 to\line
  51 of\line
  51 and\line
 ...\par
\pard\f0{}}\par
\pard{}Whew!  That's a lot to digest.  Yet, the same principles apply. With six commands, on two lines (really one long one split for convenience), we've created a program that does something interesting and useful, in much less time than we could have written a C program to do the same thing.\par
\par
\pard{}A minor modification to the above pipeline can give us a simple spelling checker!  To determine if you've spelled a word correctly, all you have to do is look it up in a dictionary.  If it is not there, then chances are that your spelling is incorrect.  So, we need a dictionary.  If you have the Slackware Linux distribution, you have the file {\f1{}/usr/lib/ispell/ispell.words}, which is a sorted, 38,400 word dictionary.\par
\par
\pard{}Now, how to compare our file with the dictionary?  As before, we generate a sorted list of words, one per line:\par
\par
{\pard\keep\li720\f1{}$ tr '[A-Z]' '[a-z]' < whats.gnu | tr -cd '[A-Za-z0-9_ \'5C012]' |\line
> tr -s '[ ]' '\'5C012' | sort -u | ...\par
\pard\f0{}}\par
\pard{}Now, all we need is a list of words that are {\i not} in the dictionary.  Here is where the {\f1{}comm} command comes in.\par
\par
{\pard\keep\li720\f1{}$ tr '[A-Z]' '[a-z]' < whats.gnu | tr -cd '[A-Za-z0-9_ \'5C012]' |\line
> tr -s '[ ]' '\'5C012' | sort -u |\line
> comm -23 - /usr/lib/ispell/ispell.words\par
\pard\f0{}}\par
\pard{}The {\f1{}-2} and {\f1{}-3} options eliminate lines that are only in the dictionary (the second file), and lines that are in both files.  Lines only in the first file (standard input, our stream of words), are words that are not in the dictionary.  These are likely candidates for spelling errors.  This pipeline was the first cut at a production spelling checker on Unix.\par
\par
\pard{}There are some other tools that deserve brief mention.\par
\par
{\pard{}{\f1{}grep}\par
\pard\li720{}search files for text that matches a regular expression\par
\par
\pard{}{\f1{}egrep}\par
\pard\li720{}like {\f1{}grep}, but with more powerful regular expressions\par
\par
\pard{}{\f1{}wc}\par
\pard\li720{}count lines, words, characters\par
\par
\pard{}{\f1{}tee}\par
\pard\li720{}a T-fitting for data pipes, copies data to files and to standard output\par
\par
\pard{}{\f1{}sed}\par
\pard\li720{}the stream editor, an advanced tool\par
\par
\pard{}{\f1{}awk}\par
\pard\li720{}a data manipulation language, another advanced tool\par
\pard{}}\par
\pard{}The software tools philosophy also espoused the following bit of advice: "Let someone else do the hard part." This means, take something that gives you most of what you need, and then massage it the rest of the way until it's in the form that you want.\par
\par
\pard{}To summarize:\par
\par
{\pard\fi-720\li720\tx144\tx720{}\tab{}1. \tab{}Each program should do one thing well. No more, no less.\par
\par
\pard\fi-720\li720\tx144\tx720{}\tab{}2. \tab{}Combining programs with appropriate plumbing leads to results where the whole is greater than the sum of the parts.  It also leads to novel uses of programs that the authors might never have imagined.\par
\par
\pard\fi-720\li720\tx144\tx720{}\tab{}3. \tab{}Programs should never print extraneous header or trailer data, since these could get sent on down a pipeline. (A point we didn't mention earlier.)\par
\par
\pard\fi-720\li720\tx144\tx720{}\tab{}4. \tab{}Let someone else do the hard part.\par
\par
\pard\fi-720\li720\tx144\tx720{}\tab{}5. \tab{}Know your toolbox! Use each program appropriately. If you don't have an appropriate tool, build one.\par
\pard{}}\par
\pard{}As of this writing, all the programs we've discussed are available via anonymous {\f1{}ftp} from {\f1{}prep.ai.mit.edu} as {\f1{}/pub/gnu/textutils-1.9.tar.gz}.({\ul 1}{\v Putting_the_tools_together_1})\par
\par
\pard{}None of what I have presented in this column is new. The Software Tools philosophy was first introduced in the book {\i Software Tools}, by Brian Kernighan and P.J. Plauger (Addison-Wesley, ISBN 0-201-03669-X).   This book showed how to write and use software tools.   It was written in 1976, using a preprocessor for FORTRAN named {\f1{}ratfor} (RATional FORtran).  At the time, C was not as ubiquitous as it is now; FORTRAN was.  The last chapter presented a {\f1{}ratfor} to FORTRAN processor, written in {\f1{}ratfor}. {\f1{}ratfor} looks an awful lot like C; if you know C, you won't have any problem following the code.\par
\par
\pard{}In 1981, the book was updated and made available as {\i Software Tools in Pascal} (Addison-Wesley, ISBN 0-201-10342-7).  Both books remain in print, and are well worth reading if you're a programmer.  They certainly made a major change in how I view programming.\par
\par
\pard{}Initially, the programs in both books were available (on 9-track tape) from Addison-Wesley.  Unfortunately, this is no longer the case, although you might be able to find copies floating around the Internet.  For a number of years, there was an active Software Tools Users Group, whose members had ported the original {\f1{}ratfor} programs to essentially every computer system with a FORTRAN compiler.  The popularity of the group waned in the middle '80s as Unix began to spread beyond universities.\par
\par
\pard{}With the current proliferation of GNU code and other clones of Unix programs, these programs now receive little attention; modern C versions are much more efficient and do more than these programs do.  Nevertheless, as exposition of good programming style, and evangelism for a still-valuable philosophy, these books are unparalleled, and I recommend them highly.\par
\par
\pard{}Acknowledgment: I would like to express my gratitude to Brian Kernighan of Bell Labs, the original Software Toolsmith, for reviewing this column.\par
\par
\page\pard#{\footnote Putting_the_tools_together_1}
\pard{}(1) Version 1.9 was current when this column was written. Check the nearest GNU archive for the current version.  The main GNU FTP site is now {\f1{}ftp.gnu.org}.\par
\par
\page\pard Node: {\b Index}, \keepn Next: {\uldb }{\v }, Prev: {\uldb Opening the software toolbox}{\v Opening_the_software_toolbox}, Up: {\uldb Top}{\v Top}\line
K{\footnote K Index}
#{\footnote Index}
${\footnote \pard{}Index}\par
\pard{\fs24\b Index}\par
\par
{\fi-2880\li2880\tx2880{\f1{}+{\i count}}:\tab {\uldb tail invocation}{\v tail_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}+{\i first_page}[:{\i last_page}]}:\tab {\uldb pr invocation}{\v pr_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}+{\i n}}:\tab {\uldb uniq invocation}{\v uniq_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--across}:\tab {\uldb pr invocation}{\v pr_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--address-radix}:\tab {\uldb od invocation}{\v od_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--all-repeated}:\tab {\uldb uniq invocation}{\v uniq_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--all}:\tab {\uldb unexpand invocation}{\v unexpand_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--before}:\tab {\uldb tac invocation}{\v tac_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--binary} <1>:\tab {\uldb cat invocation}{\v cat_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--binary}:\tab {\uldb md5sum invocation}{\v md5sum_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--body-numbering}:\tab {\uldb nl invocation}{\v nl_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--bytes} <1>:\tab {\uldb cut invocation}{\v cut_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--bytes} <2>:\tab {\uldb wc invocation}{\v wc_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--bytes} <3>:\tab {\uldb tail invocation}{\v tail_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--bytes} <4>:\tab {\uldb fold invocation}{\v fold_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--bytes} <5>:\tab {\uldb head invocation}{\v head_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--bytes}:\tab {\uldb split invocation}{\v split_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--characters}:\tab {\uldb cut invocation}{\v cut_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--chars}:\tab {\uldb wc invocation}{\v wc_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--check-chars}:\tab {\uldb uniq invocation}{\v uniq_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--columns}:\tab {\uldb pr invocation}{\v pr_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--count}:\tab {\uldb uniq invocation}{\v uniq_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--crown-margin}:\tab {\uldb fmt invocation}{\v fmt_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--delimiters}:\tab {\uldb paste invocation}{\v paste_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--delimiter}:\tab {\uldb cut invocation}{\v cut_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--digits}:\tab {\uldb csplit invocation}{\v csplit_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--double-space}:\tab {\uldb pr invocation}{\v pr_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--elide-empty-files}:\tab {\uldb csplit invocation}{\v csplit_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--expand-tabs}:\tab {\uldb pr invocation}{\v pr_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--fields}:\tab {\uldb cut invocation}{\v cut_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--first-line-number}:\tab {\uldb pr invocation}{\v pr_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--follow}:\tab {\uldb tail invocation}{\v tail_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--footer-numbering}:\tab {\uldb nl invocation}{\v nl_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--form-feed}:\tab {\uldb pr invocation}{\v pr_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--format}:\tab {\uldb od invocation}{\v od_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--header-numbering}:\tab {\uldb nl invocation}{\v nl_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--header}:\tab {\uldb pr invocation}{\v pr_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--help}:\tab {\uldb Common options}{\v Common_options}.\par}{\fi-2880\li2880\tx2880{\f1{}--ignore-case} <1>:\tab {\uldb uniq invocation}{\v uniq_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--ignore-case}:\tab {\uldb join invocation}{\v join_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--indent}:\tab {\uldb pr invocation}{\v pr_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--initial}:\tab {\uldb expand invocation}{\v expand_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--join-blank-lines}:\tab {\uldb nl invocation}{\v nl_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--join-lines}:\tab {\uldb pr invocation}{\v pr_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--keep-files}:\tab {\uldb csplit invocation}{\v csplit_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--length}:\tab {\uldb pr invocation}{\v pr_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--line-bytes}:\tab {\uldb split invocation}{\v split_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--lines} <1>:\tab {\uldb tail invocation}{\v tail_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--lines} <2>:\tab {\uldb head invocation}{\v head_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--lines} <3>:\tab {\uldb split invocation}{\v split_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--lines}:\tab {\uldb wc invocation}{\v wc_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--max-consecutive-size-changes}:\tab {\uldb tail invocation}{\v tail_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--max-line-length}:\tab {\uldb wc invocation}{\v wc_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--max-unchanged-stats}:\tab {\uldb tail invocation}{\v tail_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--merge}:\tab {\uldb pr invocation}{\v pr_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--no-file-warnings}:\tab {\uldb pr invocation}{\v pr_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--no-renumber}:\tab {\uldb nl invocation}{\v nl_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--number-format}:\tab {\uldb nl invocation}{\v nl_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--number-lines}:\tab {\uldb pr invocation}{\v pr_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--number-nonblank}:\tab {\uldb cat invocation}{\v cat_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--number-separator}:\tab {\uldb nl invocation}{\v nl_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--number-width}:\tab {\uldb nl invocation}{\v nl_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--number}:\tab {\uldb cat invocation}{\v cat_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--omit-header}:\tab {\uldb pr invocation}{\v pr_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--omit-pagination}:\tab {\uldb pr invocation}{\v pr_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--only-delimited}:\tab {\uldb cut invocation}{\v cut_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--output-delimiter}:\tab {\uldb cut invocation}{\v cut_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--output-duplicates}:\tab {\uldb od invocation}{\v od_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--output-tabs}:\tab {\uldb pr invocation}{\v pr_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--page-increment}:\tab {\uldb nl invocation}{\v nl_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--page_width}:\tab {\uldb pr invocation}{\v pr_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--pages}:\tab {\uldb pr invocation}{\v pr_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--pid}:\tab {\uldb tail invocation}{\v tail_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--prefix}:\tab {\uldb csplit invocation}{\v csplit_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--quiet} <1>:\tab {\uldb head invocation}{\v head_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--quiet} <2>:\tab {\uldb csplit invocation}{\v csplit_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--quiet}:\tab {\uldb tail invocation}{\v tail_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--read-bytes}:\tab {\uldb od invocation}{\v od_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--regex}:\tab {\uldb tac invocation}{\v tac_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--repeated}:\tab {\uldb uniq invocation}{\v uniq_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--retry}:\tab {\uldb tail invocation}{\v tail_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--section-delimiter}:\tab {\uldb nl invocation}{\v nl_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--sep-string}:\tab {\uldb pr invocation}{\v pr_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--separator} <1>:\tab {\uldb pr invocation}{\v pr_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--separator}:\tab {\uldb tac invocation}{\v tac_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--serial}:\tab {\uldb paste invocation}{\v paste_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--show-all}:\tab {\uldb cat invocation}{\v cat_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--show-control-chars}:\tab {\uldb pr invocation}{\v pr_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--show-ends}:\tab {\uldb cat invocation}{\v cat_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--show-nonprinting} <1>:\tab {\uldb cat invocation}{\v cat_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--show-nonprinting}:\tab {\uldb pr invocation}{\v pr_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--show-tabs}:\tab {\uldb cat invocation}{\v cat_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--silent} <1>:\tab {\uldb head invocation}{\v head_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--silent} <2>:\tab {\uldb csplit invocation}{\v csplit_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--silent}:\tab {\uldb tail invocation}{\v tail_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--skip-bytes}:\tab {\uldb od invocation}{\v od_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--skip-chars}:\tab {\uldb uniq invocation}{\v uniq_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--skip-fields}:\tab {\uldb uniq invocation}{\v uniq_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--sleep-interval}:\tab {\uldb tail invocation}{\v tail_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--spaces}:\tab {\uldb fold invocation}{\v fold_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--split-only}:\tab {\uldb fmt invocation}{\v fmt_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--squeeze-blank}:\tab {\uldb cat invocation}{\v cat_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--starting-line-number}:\tab {\uldb nl invocation}{\v nl_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--status}:\tab {\uldb md5sum invocation}{\v md5sum_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--strings}:\tab {\uldb od invocation}{\v od_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--suffix}:\tab {\uldb csplit invocation}{\v csplit_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--sysv}:\tab {\uldb sum invocation}{\v sum_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--tabs} <1>:\tab {\uldb expand invocation}{\v expand_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--tabs}:\tab {\uldb unexpand invocation}{\v unexpand_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--tagged-paragraph}:\tab {\uldb fmt invocation}{\v fmt_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--text}:\tab {\uldb md5sum invocation}{\v md5sum_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--traditional}:\tab {\uldb od invocation}{\v od_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--uniform-spacing}:\tab {\uldb fmt invocation}{\v fmt_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--unique}:\tab {\uldb uniq invocation}{\v uniq_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--verbose} <1>:\tab {\uldb head invocation}{\v head_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--verbose} <2>:\tab {\uldb split invocation}{\v split_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--verbose}:\tab {\uldb tail invocation}{\v tail_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--version}:\tab {\uldb Common options}{\v Common_options}.\par}{\fi-2880\li2880\tx2880{\f1{}--warn}:\tab {\uldb md5sum invocation}{\v md5sum_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--width} <1>:\tab {\uldb fmt invocation}{\v fmt_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--width} <2>:\tab {\uldb fold invocation}{\v fold_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--width} <3>:\tab {\uldb od invocation}{\v od_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--width}:\tab {\uldb pr invocation}{\v pr_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}--words}:\tab {\uldb wc invocation}{\v wc_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-1} <1>:\tab {\uldb comm invocation}{\v comm_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-1}:\tab {\uldb join invocation}{\v join_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-2} <1>:\tab {\uldb join invocation}{\v join_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-2}:\tab {\uldb comm invocation}{\v comm_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-3}:\tab {\uldb comm invocation}{\v comm_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-a} <1>:\tab {\uldb od invocation}{\v od_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-a} <2>:\tab {\uldb join invocation}{\v join_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-a} <3>:\tab {\uldb pr invocation}{\v pr_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-a}:\tab {\uldb unexpand invocation}{\v unexpand_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-A} <1>:\tab {\uldb cat invocation}{\v cat_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-A}:\tab {\uldb od invocation}{\v od_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-B}:\tab {\uldb cat invocation}{\v cat_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-b} <1>:\tab {\uldb cut invocation}{\v cut_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-b} <2>:\tab {\uldb nl invocation}{\v nl_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-b} <3>:\tab {\uldb split invocation}{\v split_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-b} <4>:\tab {\uldb sort invocation}{\v sort_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-b} <5>:\tab {\uldb tac invocation}{\v tac_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-b} <6>:\tab {\uldb csplit invocation}{\v csplit_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-b} <7>:\tab {\uldb od invocation}{\v od_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-b} <8>:\tab {\uldb fold invocation}{\v fold_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-b} <9>:\tab {\uldb md5sum invocation}{\v md5sum_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-b}:\tab {\uldb cat invocation}{\v cat_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-c} <1>:\tab {\uldb sort invocation}{\v sort_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-c} <2>:\tab {\uldb pr invocation}{\v pr_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-c} <3>:\tab {\uldb uniq invocation}{\v uniq_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-c} <4>:\tab {\uldb tail invocation}{\v tail_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-c} <5>:\tab {\uldb head invocation}{\v head_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-c} <6>:\tab {\uldb cut invocation}{\v cut_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-c} <7>:\tab {\uldb fmt invocation}{\v fmt_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-c} <8>:\tab {\uldb od invocation}{\v od_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-c}:\tab {\uldb wc invocation}{\v wc_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-C}:\tab {\uldb split invocation}{\v split_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-d} <1>:\tab {\uldb pr invocation}{\v pr_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-d} <2>:\tab {\uldb cut invocation}{\v cut_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-d} <3>:\tab {\uldb uniq invocation}{\v uniq_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-d}:\tab {\uldb sort invocation}{\v sort_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-D}:\tab {\uldb uniq invocation}{\v uniq_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-d} <1>:\tab {\uldb od invocation}{\v od_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-d} <2>:\tab {\uldb paste invocation}{\v paste_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-d}:\tab {\uldb nl invocation}{\v nl_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-E}:\tab {\uldb cat invocation}{\v cat_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-e} <1>:\tab {\uldb cat invocation}{\v cat_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-e} <2>:\tab {\uldb join invocation}{\v join_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-e}:\tab {\uldb pr invocation}{\v pr_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-f} <1>:\tab {\uldb pr invocation}{\v pr_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-f} <2>:\tab {\uldb uniq invocation}{\v uniq_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-f} <3>:\tab {\uldb nl invocation}{\v nl_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-f} <4>:\tab {\uldb csplit invocation}{\v csplit_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-f} <5>:\tab {\uldb cut invocation}{\v cut_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-f} <6>:\tab {\uldb tail invocation}{\v tail_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-f} <7>:\tab {\uldb sort invocation}{\v sort_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-f}:\tab {\uldb od invocation}{\v od_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-F}:\tab {\uldb pr invocation}{\v pr_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-g}:\tab {\uldb sort invocation}{\v sort_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-h} <1>:\tab {\uldb nl invocation}{\v nl_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-h} <2>:\tab {\uldb od invocation}{\v od_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-h}:\tab {\uldb pr invocation}{\v pr_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-i} <1>:\tab {\uldb join invocation}{\v join_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-i} <2>:\tab {\uldb pr invocation}{\v pr_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-i} <3>:\tab {\uldb sort invocation}{\v sort_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-i} <4>:\tab {\uldb uniq invocation}{\v uniq_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-i} <5>:\tab {\uldb expand invocation}{\v expand_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-i} <6>:\tab {\uldb od invocation}{\v od_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-i}:\tab {\uldb nl invocation}{\v nl_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-j1}:\tab {\uldb join invocation}{\v join_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-j2}:\tab {\uldb join invocation}{\v join_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-J}:\tab {\uldb pr invocation}{\v pr_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-j}:\tab {\uldb od invocation}{\v od_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-k} <1>:\tab {\uldb sort invocation}{\v sort_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-k}:\tab {\uldb csplit invocation}{\v csplit_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-l} <1>:\tab {\uldb pr invocation}{\v pr_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-l} <2>:\tab {\uldb split invocation}{\v split_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-l}:\tab {\uldb od invocation}{\v od_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-L}:\tab {\uldb wc invocation}{\v wc_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-l} <1>:\tab {\uldb nl invocation}{\v nl_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-l}:\tab {\uldb wc invocation}{\v wc_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-m} <1>:\tab {\uldb pr invocation}{\v pr_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-m}:\tab {\uldb sort invocation}{\v sort_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-M}:\tab {\uldb sort invocation}{\v sort_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-N}:\tab {\uldb od invocation}{\v od_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-n} <1>:\tab {\uldb sort invocation}{\v sort_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-n} <2>:\tab {\uldb nl invocation}{\v nl_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-n} <3>:\tab {\uldb csplit invocation}{\v csplit_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-n} <4>:\tab {\uldb cut invocation}{\v cut_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-n} <5>:\tab {\uldb cat invocation}{\v cat_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-n} <6>:\tab {\uldb pr invocation}{\v pr_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-n}:\tab {\uldb tail invocation}{\v tail_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-N}:\tab {\uldb pr invocation}{\v pr_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-n}:\tab {\uldb head invocation}{\v head_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-o} <1>:\tab {\uldb sort invocation}{\v sort_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-o} <2>:\tab {\uldb pr invocation}{\v pr_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-o}:\tab {\uldb od invocation}{\v od_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-p}:\tab {\uldb nl invocation}{\v nl_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-q} <1>:\tab {\uldb csplit invocation}{\v csplit_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-q} <2>:\tab {\uldb head invocation}{\v head_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-q}:\tab {\uldb tail invocation}{\v tail_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-r} <1>:\tab {\uldb sort invocation}{\v sort_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-r} <2>:\tab {\uldb tac invocation}{\v tac_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-r} <3>:\tab {\uldb pr invocation}{\v pr_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-r}:\tab {\uldb sum invocation}{\v sum_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-s} <1>:\tab {\uldb tac invocation}{\v tac_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-s} <2>:\tab {\uldb nl invocation}{\v nl_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-s} <3>:\tab {\uldb cut invocation}{\v cut_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-s} <4>:\tab {\uldb paste invocation}{\v paste_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-s} <5>:\tab {\uldb csplit invocation}{\v csplit_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-s} <6>:\tab {\uldb fold invocation}{\v fold_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-s} <7>:\tab {\uldb cat invocation}{\v cat_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-s} <8>:\tab {\uldb sum invocation}{\v sum_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-s} <9>:\tab {\uldb uniq invocation}{\v uniq_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-s} <10>:\tab {\uldb od invocation}{\v od_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-s} <11>:\tab {\uldb pr invocation}{\v pr_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-s}:\tab {\uldb fmt invocation}{\v fmt_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-S}:\tab {\uldb pr invocation}{\v pr_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-t} <1>:\tab {\uldb od invocation}{\v od_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-t} <2>:\tab {\uldb sort invocation}{\v sort_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-t}:\tab {\uldb fmt invocation}{\v fmt_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-T}:\tab {\uldb cat invocation}{\v cat_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-t} <1>:\tab {\uldb cat invocation}{\v cat_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-t} <2>:\tab {\uldb expand invocation}{\v expand_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-t} <3>:\tab {\uldb unexpand invocation}{\v unexpand_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-t}:\tab {\uldb md5sum invocation}{\v md5sum_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-T}:\tab {\uldb pr invocation}{\v pr_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-t}:\tab {\uldb pr invocation}{\v pr_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-u} <1>:\tab {\uldb uniq invocation}{\v uniq_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-u} <2>:\tab {\uldb fmt invocation}{\v fmt_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-u} <3>:\tab {\uldb sort invocation}{\v sort_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-u}:\tab {\uldb cat invocation}{\v cat_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-v} <1>:\tab {\uldb pr invocation}{\v pr_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-v} <2>:\tab {\uldb od invocation}{\v od_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-v} <3>:\tab {\uldb tail invocation}{\v tail_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-v} <4>:\tab {\uldb head invocation}{\v head_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-v} <5>:\tab {\uldb cat invocation}{\v cat_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-v}:\tab {\uldb nl invocation}{\v nl_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-w} <1>:\tab {\uldb md5sum invocation}{\v md5sum_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-w} <2>:\tab {\uldb wc invocation}{\v wc_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-w} <3>:\tab {\uldb pr invocation}{\v pr_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-w} <4>:\tab {\uldb uniq invocation}{\v uniq_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-w} <5>:\tab {\uldb nl invocation}{\v nl_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-w} <6>:\tab {\uldb fold invocation}{\v fold_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-w}:\tab {\uldb od invocation}{\v od_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-W}:\tab {\uldb pr invocation}{\v pr_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-w}:\tab {\uldb fmt invocation}{\v fmt_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-x}:\tab {\uldb od invocation}{\v od_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-z} <1>:\tab {\uldb sort invocation}{\v sort_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-z}:\tab {\uldb csplit invocation}{\v csplit_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-{\i column}}:\tab {\uldb pr invocation}{\v pr_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-{\i count}} <1>:\tab {\uldb tail invocation}{\v tail_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-{\i count}}:\tab {\uldb head invocation}{\v head_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-{\i n}}:\tab {\uldb uniq invocation}{\v uniq_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-{\i tab}} <1>:\tab {\uldb unexpand invocation}{\v unexpand_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-{\i tab}}:\tab {\uldb expand invocation}{\v expand_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}-{\i width}}:\tab {\uldb fmt invocation}{\v fmt_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}128-bit checksum}:\tab {\uldb md5sum invocation}{\v md5sum_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}16-bit checksum}:\tab {\uldb sum invocation}{\v sum_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}across columns}:\tab {\uldb pr invocation}{\v pr_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}all duplicate lines, outputting}:\tab {\uldb uniq invocation}{\v uniq_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}alnum}:\tab {\uldb Character sets}{\v Character_sets}.\par}{\fi-2880\li2880\tx2880{\f1{}alpha}:\tab {\uldb Character sets}{\v Character_sets}.\par}{\fi-2880\li2880\tx2880{\f1{}ASCII dump of files}:\tab {\uldb od invocation}{\v od_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}backslash escapes}:\tab {\uldb Character sets}{\v Character_sets}.\par}{\fi-2880\li2880\tx2880{\f1{}binary and text I/O in cat}:\tab {\uldb cat invocation}{\v cat_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}binary input files}:\tab {\uldb md5sum invocation}{\v md5sum_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}blank lines, numbering}:\tab {\uldb nl invocation}{\v nl_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}blanks, ignoring leading}:\tab {\uldb sort invocation}{\v sort_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}blank}:\tab {\uldb Character sets}{\v Character_sets}.\par}{\fi-2880\li2880\tx2880{\f1{}body, numbering}:\tab {\uldb nl invocation}{\v nl_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}BSD {\f1{}sum}}:\tab {\uldb sum invocation}{\v sum_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}BSD {\f1{}tail}}:\tab {\uldb tail invocation}{\v tail_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}bugs, reporting}:\tab {\uldb Introduction}{\v Introduction}.\par}{\fi-2880\li2880\tx2880{\f1{}byte count}:\tab {\uldb wc invocation}{\v wc_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}case folding}:\tab {\uldb sort invocation}{\v sort_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}cat}:\tab {\uldb cat invocation}{\v cat_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}characters classes}:\tab {\uldb Character sets}{\v Character_sets}.\par}{\fi-2880\li2880\tx2880{\f1{}checking for sortedness}:\tab {\uldb sort invocation}{\v sort_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}checksum, 128-bit}:\tab {\uldb md5sum invocation}{\v md5sum_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}checksum, 16-bit}:\tab {\uldb sum invocation}{\v sum_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}cksum}:\tab {\uldb cksum invocation}{\v cksum_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}cntrl}:\tab {\uldb Character sets}{\v Character_sets}.\par}{\fi-2880\li2880\tx2880{\f1{}common field, joining on}:\tab {\uldb join invocation}{\v join_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}common lines}:\tab {\uldb comm invocation}{\v comm_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}common options}:\tab {\uldb Common options}{\v Common_options}.\par}{\fi-2880\li2880\tx2880{\f1{}comm}:\tab {\uldb comm invocation}{\v comm_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}comparing sorted files}:\tab {\uldb comm invocation}{\v comm_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}concatenate and write files}:\tab {\uldb cat invocation}{\v cat_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}context splitting}:\tab {\uldb csplit invocation}{\v csplit_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}converting tabs to spaces}:\tab {\uldb expand invocation}{\v expand_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}copying files}:\tab {\uldb cat invocation}{\v cat_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}CRC checksum}:\tab {\uldb cksum invocation}{\v cksum_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}crown margin}:\tab {\uldb fmt invocation}{\v fmt_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}csplit}:\tab {\uldb csplit invocation}{\v csplit_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}cut}:\tab {\uldb cut invocation}{\v cut_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}cyclic redundancy check}:\tab {\uldb cksum invocation}{\v cksum_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}deleting characters}:\tab {\uldb Squeezing}{\v Squeezing}.\par}{\fi-2880\li2880\tx2880{\f1{}descriptor follow option}:\tab {\uldb tail invocation}{\v tail_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}differing lines}:\tab {\uldb comm invocation}{\v comm_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}digit}:\tab {\uldb Character sets}{\v Character_sets}.\par}{\fi-2880\li2880\tx2880{\f1{}double spacing}:\tab {\uldb pr invocation}{\v pr_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}down columns}:\tab {\uldb pr invocation}{\v pr_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}duplicate lines, outputting}:\tab {\uldb uniq invocation}{\v uniq_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}empty lines, numbering}:\tab {\uldb nl invocation}{\v nl_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}entire files, output of}:\tab {\uldb Output of entire files}{\v Output_of_entire_files}.\par}{\fi-2880\li2880\tx2880{\f1{}equivalence classes}:\tab {\uldb Character sets}{\v Character_sets}.\par}{\fi-2880\li2880\tx2880{\f1{}expand}:\tab {\uldb expand invocation}{\v expand_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}field separator character}:\tab {\uldb sort invocation}{\v sort_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}file contents, dumping unambiguously}:\tab {\uldb od invocation}{\v od_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}file offset radix}:\tab {\uldb od invocation}{\v od_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}fingerprint, 128-bit}:\tab {\uldb md5sum invocation}{\v md5sum_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}first part of files, outputting}:\tab {\uldb head invocation}{\v head_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}fmt}:\tab {\uldb fmt invocation}{\v fmt_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}folding long input lines}:\tab {\uldb fold invocation}{\v fold_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}fold}:\tab {\uldb fold invocation}{\v fold_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}footers, numbering}:\tab {\uldb nl invocation}{\v nl_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}formatting file contents}:\tab {\uldb Formatting file contents}{\v Formatting_file_contents}.\par}{\fi-2880\li2880\tx2880{\f1{}general numeric sort}:\tab {\uldb sort invocation}{\v sort_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}graph}:\tab {\uldb Character sets}{\v Character_sets}.\par}{\fi-2880\li2880\tx2880{\f1{}growing files}:\tab {\uldb tail invocation}{\v tail_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}headers, numbering}:\tab {\uldb nl invocation}{\v nl_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}head}:\tab {\uldb head invocation}{\v head_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}help, online}:\tab {\uldb Common options}{\v Common_options}.\par}{\fi-2880\li2880\tx2880{\f1{}hex dump of files}:\tab {\uldb od invocation}{\v od_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}indenting lines}:\tab {\uldb pr invocation}{\v pr_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}initial part of files, outputting}:\tab {\uldb head invocation}{\v head_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}initial tabs, converting}:\tab {\uldb expand invocation}{\v expand_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}input tabs}:\tab {\uldb pr invocation}{\v pr_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}introduction}:\tab {\uldb Introduction}{\v Introduction}.\par}{\fi-2880\li2880\tx2880{\f1{}join}:\tab {\uldb join invocation}{\v join_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}Knuth, Donald E.}:\tab {\uldb fmt invocation}{\v fmt_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}last part of files, outputting}:\tab {\uldb tail invocation}{\v tail_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}LC_COLLATE} <1>:\tab {\uldb comm invocation}{\v comm_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}LC_COLLATE} <2>:\tab {\uldb join invocation}{\v join_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}LC_COLLATE}:\tab {\uldb sort invocation}{\v sort_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}LC_CTYPE}:\tab {\uldb sort invocation}{\v sort_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}LC_NUMERIC}:\tab {\uldb sort invocation}{\v sort_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}LC_TIME}:\tab {\uldb sort invocation}{\v sort_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}left margin}:\tab {\uldb pr invocation}{\v pr_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}line count}:\tab {\uldb wc invocation}{\v wc_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}line numbering}:\tab {\uldb nl invocation}{\v nl_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}line-breaking}:\tab {\uldb fmt invocation}{\v fmt_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}line-by-line comparison}:\tab {\uldb comm invocation}{\v comm_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}ln format for {\f1{}nl}}:\tab {\uldb nl invocation}{\v nl_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}logical pages, numbering on}:\tab {\uldb nl invocation}{\v nl_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}lower}:\tab {\uldb Character sets}{\v Character_sets}.\par}{\fi-2880\li2880\tx2880{\f1{}md5sum}:\tab {\uldb md5sum invocation}{\v md5sum_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}merging files in parallel}:\tab {\uldb pr invocation}{\v pr_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}merging files}:\tab {\uldb paste invocation}{\v paste_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}merging sorted files}:\tab {\uldb sort invocation}{\v sort_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}message-digest, 128-bit}:\tab {\uldb md5sum invocation}{\v md5sum_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}months, sorting by}:\tab {\uldb sort invocation}{\v sort_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}multicolumn output, generating}:\tab {\uldb pr invocation}{\v pr_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}name follow option}:\tab {\uldb tail invocation}{\v tail_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}nl}:\tab {\uldb nl invocation}{\v nl_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}numbering lines}:\tab {\uldb nl invocation}{\v nl_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}numeric sort}:\tab {\uldb sort invocation}{\v sort_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}octal dump of files}:\tab {\uldb od invocation}{\v od_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}od}:\tab {\uldb od invocation}{\v od_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}operating on characters}:\tab {\uldb Operating on characters}{\v Operating_on_characters}.\par}{\fi-2880\li2880\tx2880{\f1{}operating on sorted files}:\tab {\uldb Operating on sorted files}{\v Operating_on_sorted_files}.\par}{\fi-2880\li2880\tx2880{\f1{}output file name prefix} <1>:\tab {\uldb csplit invocation}{\v csplit_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}output file name prefix}:\tab {\uldb split invocation}{\v split_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}output file name suffix}:\tab {\uldb csplit invocation}{\v csplit_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}output of entire files}:\tab {\uldb Output of entire files}{\v Output_of_entire_files}.\par}{\fi-2880\li2880\tx2880{\f1{}output of parts of files}:\tab {\uldb Output of parts of files}{\v Output_of_parts_of_files}.\par}{\fi-2880\li2880\tx2880{\f1{}output tabs}:\tab {\uldb pr invocation}{\v pr_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}overwriting of input, allowed}:\tab {\uldb sort invocation}{\v sort_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}paragraphs, reformatting}:\tab {\uldb fmt invocation}{\v fmt_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}parts of files, output of}:\tab {\uldb Output of parts of files}{\v Output_of_parts_of_files}.\par}{\fi-2880\li2880\tx2880{\f1{}paste}:\tab {\uldb paste invocation}{\v paste_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}phone directory order}:\tab {\uldb sort invocation}{\v sort_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}pieces, splitting a file into}:\tab {\uldb split invocation}{\v split_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}Plass, Michael F.}:\tab {\uldb fmt invocation}{\v fmt_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}POSIX.2}:\tab {\uldb Introduction}{\v Introduction}.\par}{\fi-2880\li2880\tx2880{\f1{}POSIXLY_CORRECT}:\tab {\uldb Warnings in tr}{\v Warnings_in_tr}.\par}{\fi-2880\li2880\tx2880{\f1{}printing, preparing files for}:\tab {\uldb pr invocation}{\v pr_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}print}:\tab {\uldb Character sets}{\v Character_sets}.\par}{\fi-2880\li2880\tx2880{\f1{}pr}:\tab {\uldb pr invocation}{\v pr_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}ptx}:\tab {\uldb ptx invocation}{\v ptx_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}punct}:\tab {\uldb Character sets}{\v Character_sets}.\par}{\fi-2880\li2880\tx2880{\f1{}radix for file offsets}:\tab {\uldb od invocation}{\v od_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}ranges}:\tab {\uldb Character sets}{\v Character_sets}.\par}{\fi-2880\li2880\tx2880{\f1{}reformatting paragraph text}:\tab {\uldb fmt invocation}{\v fmt_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}repeated characters}:\tab {\uldb Character sets}{\v Character_sets}.\par}{\fi-2880\li2880\tx2880{\f1{}reverse sorting}:\tab {\uldb sort invocation}{\v sort_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}reversing files}:\tab {\uldb tac invocation}{\v tac_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}rn format for {\f1{}nl}}:\tab {\uldb nl invocation}{\v nl_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}rz format for {\f1{}nl}}:\tab {\uldb nl invocation}{\v nl_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}screen columns}:\tab {\uldb fold invocation}{\v fold_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}section delimiters of pages}:\tab {\uldb nl invocation}{\v nl_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}sentences and line-breaking}:\tab {\uldb fmt invocation}{\v fmt_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}sort field}:\tab {\uldb sort invocation}{\v sort_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}sort zero-terminated lines}:\tab {\uldb sort invocation}{\v sort_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}sorted files, operations on}:\tab {\uldb Operating on sorted files}{\v Operating_on_sorted_files}.\par}{\fi-2880\li2880\tx2880{\f1{}sorting files}:\tab {\uldb sort invocation}{\v sort_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}sort}:\tab {\uldb sort invocation}{\v sort_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}space}:\tab {\uldb Character sets}{\v Character_sets}.\par}{\fi-2880\li2880\tx2880{\f1{}specifying sets of characters}:\tab {\uldb Character sets}{\v Character_sets}.\par}{\fi-2880\li2880\tx2880{\f1{}splitting a file into pieces by context}:\tab {\uldb csplit invocation}{\v csplit_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}splitting a file into pieces}:\tab {\uldb split invocation}{\v split_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}split}:\tab {\uldb split invocation}{\v split_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}squeezing blank lines}:\tab {\uldb cat invocation}{\v cat_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}squeezing repeat characters}:\tab {\uldb Squeezing}{\v Squeezing}.\par}{\fi-2880\li2880\tx2880{\f1{}string constants, outputting}:\tab {\uldb od invocation}{\v od_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}summarizing files}:\tab {\uldb Summarizing files}{\v Summarizing_files}.\par}{\fi-2880\li2880\tx2880{\f1{}sum}:\tab {\uldb sum invocation}{\v sum_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}System V {\f1{}sum}}:\tab {\uldb sum invocation}{\v sum_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}tabs to spaces, converting}:\tab {\uldb expand invocation}{\v expand_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}tabstops, setting}:\tab {\uldb expand invocation}{\v expand_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}tac}:\tab {\uldb tac invocation}{\v tac_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}tagged paragraphs}:\tab {\uldb fmt invocation}{\v fmt_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}tail}:\tab {\uldb tail invocation}{\v tail_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}telephone directory order}:\tab {\uldb sort invocation}{\v sort_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}text input files}:\tab {\uldb md5sum invocation}{\v md5sum_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}text utilities}:\tab {\uldb Top}{\v Top}.\par}{\fi-2880\li2880\tx2880{\f1{}text, reformatting}:\tab {\uldb fmt invocation}{\v fmt_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}TMPDIR}:\tab {\uldb sort invocation}{\v sort_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}topological sort}:\tab {\uldb tsort invocation}{\v tsort_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}total counts}:\tab {\uldb wc invocation}{\v wc_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}translating characters}:\tab {\uldb Translating}{\v Translating}.\par}{\fi-2880\li2880\tx2880{\f1{}tr}:\tab {\uldb tr invocation}{\v tr_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}tsort}:\tab {\uldb tsort invocation}{\v tsort_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}type size}:\tab {\uldb od invocation}{\v od_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}unexpand}:\tab {\uldb unexpand invocation}{\v unexpand_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}unique lines, outputting}:\tab {\uldb uniq invocation}{\v uniq_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}uniquify files}:\tab {\uldb uniq invocation}{\v uniq_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}uniquifying output}:\tab {\uldb sort invocation}{\v sort_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}uniq}:\tab {\uldb uniq invocation}{\v uniq_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}unprintable characters, ignoring}:\tab {\uldb sort invocation}{\v sort_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}upper}:\tab {\uldb Character sets}{\v Character_sets}.\par}{\fi-2880\li2880\tx2880{\f1{}utilities for text handling}:\tab {\uldb Top}{\v Top}.\par}{\fi-2880\li2880\tx2880{\f1{}verifying MD5 checksums}:\tab {\uldb md5sum invocation}{\v md5sum_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}version number, finding}:\tab {\uldb Common options}{\v Common_options}.\par}{\fi-2880\li2880\tx2880{\f1{}wc}:\tab {\uldb wc invocation}{\v wc_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}word count}:\tab {\uldb wc invocation}{\v wc_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}wrapping long input lines}:\tab {\uldb fold invocation}{\v fold_invocation}.\par}{\fi-2880\li2880\tx2880{\f1{}xdigit}:\tab {\uldb Character sets}{\v Character_sets}.\par}\page K{\footnote Makertf}#{\footnote hcMakertf}${\footnote \pard{}About Makertf}\pard{\fs24\b About Makertf}\par\par\pard{}Makertf is a program that converts "Texinfo" files into "Rich Text Format" (RTF) files. It can be used to make WinHelp Files from GNU manuals and other documentation written in Texinfo. Visit http://www.snafu.de/~cschenk/makertf for more information.}