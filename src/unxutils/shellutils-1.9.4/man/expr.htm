<!-- manual page source format generated by PolyglotMan v3.0.7, -->
<!-- available via anonymous ftp from ftp.cs.berkeley.edu:/ucb/people/phelps/tcltk/rman.tar.Z -->

<HTML>
<HEAD>
<TITLE>EXPR(1L) manual page</TITLE>
</HEAD>
<BODY bgcolor=white>
<A HREF="#toc">Table of Contents</A><P>
 
<H2><A NAME="sect0" HREF="#toc0">Name </A></H2>
expr - evaluate expressions  
<H2><A NAME="sect1" HREF="#toc1">Synopsis </A></H2>
<B>expr</B> expression...  <BR>
<B>expr</B> {--help,--version}  <BR>
 
<H2><A NAME="sect2" HREF="#toc2">Description </A></H2>
This manual page documents the GNU version of <B>expr</B>. <B>expr</B> evaluates 
an expression and writes the result on its standard output. Each token 
of the expression must be a separate argument.  Operands are either numbers 
or strings.  Strings are not quoted for <B>expr </B>, though you may need to quote 
them to protect them from the shell. <B>expr</B> coerces anything appearing in 
an operand position to an integer or a string depending on the operation 
being applied to it. <P>
The operators (in order of increasing precedence) 
are: 
<DL>

<DT><I>| </I> </DT>
<DD>Yields its first argument if it is neither null nor 0, otherwise 
its second argument.  This is the usual `or' operation. </DD>

<DT><I>&amp; </I> </DT>
<DD>Yields its first 
argument if neither argument is null or 0, otherwise 0. </DD>

<DT><I>&lt; </I>  <I>&lt;= </I>  <I>= </I>  <I>== </I> 
 <I>!= </I>  <I>&gt;= </I>  <I>&gt; </I> </DT>
<DD>Compare their arguments and return 1 if the relation is true, 
0 otherwise.  (<I>== </I> is a synonym for <I>= </I>.) <B>expr </B> tries to coerce both arguments 
to numbers and do a numeric comparison; if it fails when trying to coerce 
either argument it then does a lexicographic comparison. </DD>

<DT><I>+ </I>  <I>- </I> </DT>
<DD>Perform 
arithmetic operations.  Both arguments are coerced to numbers; an error 
occurs if this cannot be done. </DD>

<DT><I>* </I>  <I>/ </I>  <I>% </I> </DT>
<DD>Perform arithmetic operations 
(`%' is the remainder operation, as in C).  Both arguments are coerced to 
numbers; an error occurs if this cannot be done. </DD>

<DT><I>: </I> </DT>
<DD>Perform pattern matching. 
 Its arguments are coerced to strings and the second one is considered 
to be a regular expression, with a `^' implicitly added at the beginning. 
 The first argument is then matched against this regular expression.  If 
the match succeeds and part of the string is enclosed in `\(' and `\)', that 
part is the value of the <I>: </I> expression; otherwise an integer whose value 
is the number of characters matched is returned.  If the match fails, the 
<I>: </I> operator returns the null string if `\(' and `\)' are used, otherwise 0.  
Only one `\(' and `\)' pair can be used. </DD>

<DT>In addition, the following keywords 
are recognized:  </DT>
<DD></DD>

<DT><B>match</B><I> string regex</I>  </DT>
<DD>An alternative way to do pattern 
matching.  This is the same as ``<I>string </I> <B>: </B> <I>regex </I>''. </DD>

<DT><B>substr</B><I> string position 
length</I>  </DT>
<DD>Return the substring of <I>string </I> beginning at <I>position </I> with length 
at most <I>length </I>.  If either <I>position </I> or <I>length </I> is negative or non-numeric, 
return a null string. </DD>

<DT><B>index</B><I> string character-class</I>  </DT>
<DD>Return the first position 
in <I>string </I> where the first character in <I>character-class </I> was found.  If 
no character in <I>character-class </I> is found in <I>string </I>, return 0. </DD>

<DT><B>length</B><I> string</I> 
 </DT>
<DD>Return the length of <I>string </I>. </DD>
</DL>
<P>
Parentheses are used for grouping in the 
usual manner.  The keywords cannot be used as strings.  
<H3><A NAME="sect3" HREF="#toc3">Options </A></H3>
When GNU 
<B>expr</B> is invoked with exactly one argument, the following options are recognized: 

<DL>

<DT><I>--help</I>  </DT>
<DD>Print a usage message on standard output and exit successfully. </DD>

<DT><I>--version</I> 
 </DT>
<DD>Print version information on standard output then exit successfully. </DD>
</DL>
 

<H2><A NAME="sect4" HREF="#toc4">Examples </A></H2>
<P>
To add 1 to the shell variable <I>a</I>: 
<DL>

<DT>a=`expr $a + 1`  </DT>
<DD></DD>
</DL>
<P>
To find the 
filename part of the pathname stored in variable <I>a</I>, which may or may not 
contain `/': 
<DL>

<DT>expr $a : '.*/\(.*\)' '|' $a  </DT>
<DD></DD>
</DL>
<P>
Note the quoted shell metacharacters. <P>
<B>expr</B> 
returns the following exit status: <P>
0 if the expression is neither null 
nor 0,  <BR>
1 if the expression is null or 0,  <BR>
2 for invalid expressions. <P>

<HR><P>
<A NAME="toc"><B>Table of Contents</B></A><P>
<UL>
<LI><A NAME="toc0" HREF="#sect0">Name</A></LI>
<LI><A NAME="toc1" HREF="#sect1">Synopsis</A></LI>
<LI><A NAME="toc2" HREF="#sect2">Description</A></LI>
<UL>
<LI><A NAME="toc3" HREF="#sect3">Options</A></LI>
</UL>
<LI><A NAME="toc4" HREF="#sect4">Examples</A></LI>
</UL>
</BODY></HTML>
