{\rtf1\windows \deff0{\fonttbl
{\f0\fswiss MS Sans Serif;}{\f1\fmodern Courier New;}{\f2\ftech Symbol;}}\fs20
\page #{\footnote hcAbout}${\footnote \pard{}About this help file}\pard{\fs24\b About this help file}\par\par\pard{}This file was made with the help of {\ul Makertf 3.12b-1}{\v hcMakertf} from the input file dc.texi.\par\par{This file documents {\scaps\fs16{}dc}, an arbitrary precision calculator.\par
\par
\pard{}Published by the Free Software Foundation, 675 Massachusetts Avenue, Cambridge, MA 02139 USA\par
\par
\pard{}Copyright (C) 1984, 1994, 1997, 1998 Free Software Foundation, Inc.\par
\par
\pard{}Permission is granted to make and distribute verbatim copies of this manual provided the copyright notice and this permission notice are preserved on all copies.\par
\par
\pard{}Permission is granted to copy and distribute modified versions of this manual under the conditions for verbatim copying, provided that the entire resulting derived work is distributed under the terms of a permission notice identical to this one.\par
\par
\pard{}Permission is granted to copy and distribute translations of this manual into another language, under the above conditions for modified versions, except that this permission notice may be stated in a translation approved by the Foundation.  }\par
\par
\page\pard Node: {\b Top}, \keepn Next: {\uldb Introduction}{\v Introduction}, Prev: {\uldb (dir)}{\v Top @dir.hlp}, Up: {\uldb (dir)}{\v Top @dir.hlp}\tab\tab{\uldb About this help file}{\v hcAbout}\line
K{\footnote K Top}
#{\footnote Top}
{\par
\par
\pard\pard\keep\fi-2880\li2880\tx2880{}{\uldb Introduction}{\v Introduction}\tab Introduction\par
{\uldb Invocation}{\v Invocation}\tab Invocation\par
{\uldb Printing Commands}{\v Printing_Commands}\tab Printing Commands\par
{\uldb Arithmetic}{\v Arithmetic}\tab Arithmetic\par
{\uldb Stack Control}{\v Stack_Control}\tab Stack Control\par
{\uldb Registers}{\v Registers}\tab Registers\par
{\uldb Parameters}{\v Parameters}\tab Parameters\par
{\uldb Strings}{\v Strings}\tab Strings\par
{\uldb Status Inquiry}{\v Status_Inquiry}\tab Status Inquiry\par
{\uldb Miscellaneous}{\v Miscellaneous}\tab Other commands\par
{\uldb Reporting bugs}{\v Reporting_bugs}\tab Reporting bugs\par
\pard{}}\par
\page\pard Node: {\b Introduction}, \keepn Next: {\uldb Invocation}{\v Invocation}, Prev: {\uldb Top}{\v Top}, Up: {\uldb Top}{\v Top}\line
K{\footnote K Introduction}
#{\footnote Introduction}
${\footnote \pard{}Introduction}\par
\pard{\fs24\b Introduction}\par
\par
{\scaps\fs16{}\pard{}dc} is a reverse-polish desk calculator which supports unlimited precision arithmetic.  It also allows you to define and call macros.  Normally {\scaps\fs16{}dc} reads from the standard input; if any command arguments are given to it, they are filenames, and {\scaps\fs16{}dc} reads and executes the contents of the files instead of reading from standard input.  All normal output is to standard output; all error messages are written to standard error.\par
\par
\pard{}To exit, use {\f1{}q}.  {\f1{}C-c} does not exit; it is used to abort macros that are looping, etc.  (Currently this is not true; {\f1{}C-c} does exit.)\par
\par
\pard{}A reverse-polish calculator stores numbers on a stack.  Entering a number pushes it on the stack.  Arithmetic operations pop arguments off the stack and push the results.\par
\par
\pard{}To enter a number in {\scaps\fs16{}dc}, type the digits, with an optional decimal point.  Exponential notation is not supported.  To enter a negative number, begin the number with {\f1{}_}.  {\f1{}-} cannot be used for this, as it is a binary operator for subtraction instead.  To enter two numbers in succession, separate them with spaces or newlines.  These have no meaning as commands.\par
\par
\page\pard Node: {\b Invocation}, \keepn Next: {\uldb Printing Commands}{\v Printing_Commands}, Prev: {\uldb Introduction}{\v Introduction}, Up: {\uldb Top}{\v Top}\line
K{\footnote K Invocation}
#{\footnote Invocation}
${\footnote \pard{}Invocation}\par
\pard{\fs24\b Invocation}\par
\par
{\scaps\fs16{}\pard{}dc} may be invoked with the following command-line options: {\par
\pard{}{\f1{}-e {\i expr}}\par

\pard{}{\f1{}--expression={\i expr}}\par
\pard\li720{}Evaluate {\i expr} as {\scaps\fs16{}dc} commands.\par
\par
\pard{}{\f1{}-f {\i file}}\par

\pard{}{\f1{}--file={\i file}}\par
\pard\li720{}Read and evaluate {\scaps\fs16{}dc} commands from {\i file}.\par
\par
\pard{}{\f1{}-h}\par

\pard{}{\f1{}--help}\par
\pard\li720{}Print a usage message summarizing the command-line options, then exit.\par
\par
\pard{}{\f1{}-V}\par

\pard{}{\f1{}--version}\par
\pard\li720{}Print the version information for this program, then exit.\par
\pard{}}\par
\pard{}If any command-line parameters remain after processing the options, these parameters are interpreted as additional {\i file}s whose contents are read and evaluated.  A file name of {\f1{}-} refers to the standard input stream.  If no {\f1{}-e} option was specified, and no files were specified, then the standard input will be read for commands to evaluate.\par
\par
\page\pard Node: {\b Printing Commands}, \keepn Next: {\uldb Arithmetic}{\v Arithmetic}, Prev: {\uldb Invocation}{\v Invocation}, Up: {\uldb Top}{\v Top}\line
K{\footnote K Printing Commands}
#{\footnote Printing_Commands}
${\footnote \pard{}Printing Commands}\par
\pard{\fs24\b Printing Commands}\par
\par
{\pard{}{\f1{}p}\par
\pard\li720{}Prints the value on the top of the stack, without altering the stack.  A newline is printed after the value.\par
\par
\pard{}{\f1{}n}\par
\pard\li720{}Prints the value on the top of the stack, popping it off, and does not print a newline after.  (This command is a GNU extension.)\par
\par
\pard{}{\f1{}P}\par
\pard\li720{}Pops off the value on top of the stack.  If it it a string, it is simply printed without a trailing newline.  Otherwise it is a number, and the integer portion of its absolute value is printed out as a "base (UCHAR_MAX+1)" byte stream.  Assuming that (UCHAR_MAX+1) is 256 (as it is on most machines with 8-bit bytes), the sequence {\f1{}KSK 0k1/ [_1*]sx d0>x [256~aPd0<x]dsxx sxLKk} could also accomplish this function, except for the side-effect of clobbering the x register.  (Details of the behavior with a number are a GNU extension.)\par
\par
\pard{}{\f1{}f}\par
\pard\li720{}Prints the entire contents of the stack without altering anything.  This is a good command to use if you are lost or want to figure out what the effect of some command has been.\par
\pard{}}\par
\page\pard Node: {\b Arithmetic}, \keepn Next: {\uldb Stack Control}{\v Stack_Control}, Prev: {\uldb Printing Commands}{\v Printing_Commands}, Up: {\uldb Top}{\v Top}\line
K{\footnote K Arithmetic}
#{\footnote Arithmetic}
${\footnote \pard{}Arithmetic}\par
\pard{\fs24\b Arithmetic}\par
\par
{\pard{}{\f1{}+}\par
\pard\li720{}Pops two values off the stack, adds them, and pushes the result.  The precision of the result is determined only by the values of the arguments, and is enough to be exact.\par
\par
\pard{}{\f1{}-}\par
\pard\li720{}Pops two values, subtracts the first one popped from the second one popped, and pushes the result.\par
\par
\pard{}{\f1{}*}\par
\pard\li720{}Pops two values, multiplies them, and pushes the result.  The number of fraction digits in the result is the largest of the precision value, the number of fraction digits in the multiplier, or the number of fraction digits in the multiplicand; but in no event exceeding the number of digits required for an exact result.\par
\par
\pard{}{\f1{}/}\par
\pard\li720{}Pops two values, divides the second one popped from the first one popped, and pushes the result.  The number of fraction digits is specified by the precision value.\par
\par
\pard{}{\f1{}%}\par
\pard\li720{}Pops two values, computes the remainder of the division that the {\f1{}/} command would do, and pushes that.  The value computed is the same as that computed by the sequence {\f1{}Sd dld/ Ld*-} .\par
\par
\pard{}{\f1{}~}\par
\pard\li720{}Pops two values, divides the second one popped from the first one popped.  The quotient is pushed first, and the remainder is pushed next.  The number of fraction digits used in the division is specified by the precision value.  (The sequence {\f1{}SdSn lnld/ LnLd%} could also accomplish this function, with slightly different error checking.)  (This command is a GNU extension.)\par
\par
\pard{}{\f1{}^}\par
\pard\li720{}Pops two values and exponentiates, using the first value popped as the exponent and the second popped as the base.  The fraction part of the exponent is ignored.  The precision value specifies the number of fraction digits in the result.\par
\par
\pard{}{\f1{}|}\par
\pard\li720{}Pops three values and computes a modular exponentiation.  The first value popped is used as the reduction modulus; this value must be a non-zero number, and the result may not be accurate if the modulus is not an integer.  The second popped is used as the exponent; this value must be a non-negative number, and any fractional part of this exponent will be ignored.  The third value popped is the base which gets exponentiated, which should be an integer.  For small integers this is like the sequence {\f1{}Sm^Lm%}, but, unlike {\f1{}^}, this command will work with arbritrarily large exponents.  (This command is a GNU extension.)\par
\par
\pard{}{\f1{}v}\par
\pard\li720{}Pops one value, computes its square root, and pushes that.  The precision value specifies the number of fraction digits in the result.\par
\pard{}}\par
\pard{}Most arithmetic operations are affected by the {\i precision value}, which you can set with the {\f1{}k} command.  The default precision value is zero, which means that all arithmetic except for addition and subtraction produces integer results.\par
\par
\page\pard Node: {\b Stack Control}, \keepn Next: {\uldb Registers}{\v Registers}, Prev: {\uldb Arithmetic}{\v Arithmetic}, Up: {\uldb Top}{\v Top}\line
K{\footnote K Stack Control}
#{\footnote Stack_Control}
${\footnote \pard{}Stack Control}\par
\pard{\fs24\b Stack Control}\par
\par
{\pard{}{\f1{}c}\par
\pard\li720{}Clears the stack, rendering it empty.\par
\par
\pard{}{\f1{}d}\par
\pard\li720{}Duplicates the value on the top of the stack, pushing another copy of it.  Thus, {\f1{}4d*p} computes 4 squared and prints it.\par
\par
\pard{}{\f1{}r}\par
\pard\li720{}Reverses the order of (swaps) the top two values on the stack.  (This command is a GNU extension.)\par
\pard{}}\par
\page\pard Node: {\b Registers}, \keepn Next: {\uldb Parameters}{\v Parameters}, Prev: {\uldb Stack Control}{\v Stack_Control}, Up: {\uldb Top}{\v Top}\line
K{\footnote K Registers}
#{\footnote Registers}
${\footnote \pard{}Registers}\par
\pard{\fs24\b Registers}\par
\par
{\scaps\fs16{}\pard{}dc} provides at least 256 memory registers, each named by a single character.  You can store a number in a register and retrieve it later.\par
\par
{\pard{}{\f1{}s{\i r}}\par
\pard\li720{}Pop the value off the top of the stack and store it into register {\i r}.\par
\par
\pard{}{\f1{}l{\i r}}\par
\pard\li720{}Copy the value in register {\i r}, and push it onto the stack.  This does not alter the contents of {\i r}.\par
\par
\pard\li720{}Each register also contains its own stack.  The current register value is the top of the register's stack.\par
\par
\pard{}{\f1{}S{\i r}}\par
\pard\li720{}Pop the value off the top of the (main) stack and push it onto the stack of register {\i r}.  The previous value of the register becomes inaccessible.\par
\par
\pard{}{\f1{}L{\i r}}\par
\pard\li720{}Pop the value off the top of register {\i r}'s stack and push it onto the main stack.  The previous value in register {\i r}'s stack, if any, is now accessible via the {\f1{}l{\i r}} command.\par
\pard{}}\par
\page\pard Node: {\b Parameters}, \keepn Next: {\uldb Strings}{\v Strings}, Prev: {\uldb Registers}{\v Registers}, Up: {\uldb Top}{\v Top}\line
K{\footnote K Parameters}
#{\footnote Parameters}
${\footnote \pard{}Parameters}\par
\pard{\fs24\b Parameters}\par
\par
{\scaps\fs16{}\pard{}dc} has three parameters that control its operation: the precision, the input radix, and the output radix.  The precision specifies the number of fraction digits to keep in the result of most arithmetic operations.  The input radix controls the interpretation of numbers typed in; {\i all} numbers typed in use this radix.  The output radix is used for printing numbers.\par
\par
\pard{}The input and output radices are separate parameters; you can make them unequal, which can be useful or confusing.  The input radix must be between 2 and 16 inclusive.  The output radix must be at least 2.  The precision must be zero or greater.  The precision is always measured in decimal digits, regardless of the current input or output radix.\par
\par
{\pard{}{\f1{}i}\par
\pard\li720{}Pops the value off the top of the stack and uses it to set the input radix.\par
\par
\pard{}{\f1{}o}\par
\pard\li720{}Pops the value off the top of the stack and uses it to set the output radix.\par
\par
\pard{}{\f1{}k}\par
\pard\li720{}Pops the value off the top of the stack and uses it to set the precision.\par
\par
\pard{}{\f1{}I}\par
\pard\li720{}Pushes the current input radix on the stack.\par
\par
\pard{}{\f1{}O}\par
\pard\li720{}Pushes the current output radix on the stack.\par
\par
\pard{}{\f1{}K}\par
\pard\li720{}Pushes the current precision on the stack.\par
\par
\pard{}}\par
\page\pard Node: {\b Strings}, \keepn Next: {\uldb Status Inquiry}{\v Status_Inquiry}, Prev: {\uldb Parameters}{\v Parameters}, Up: {\uldb Top}{\v Top}\line
K{\footnote K Strings}
#{\footnote Strings}
${\footnote \pard{}Strings}\par
\pard{\fs24\b Strings}\par
\par
{\scaps\fs16{}\pard{}dc} can operate on strings as well as on numbers.  The only things you can do with strings are print them and execute them as macros (which means that the contents of the string are processed as {\scaps\fs16{}dc} commands).  Both registers and the stack can hold strings, and {\scaps\fs16{}dc} always knows whether any given object is a string or a number.  Some commands such as arithmetic operations demand numbers as arguments and print errors if given strings.  Other commands can accept either a number or a string; for example, the {\f1{}p} command can accept either and prints the object according to its type.\par
\par
{\pard{}{\f1{}[{\i characters}]}\par
\pard\li720{}Makes a string containing {\i characters} and pushes it on the stack.  For example, {\f1{}[foo]P} prints the characters {\f1{}foo} (with no newline).\par
\par
\pard{}{\f1{}a}\par
\pard\li720{}The mnemonic for this is somewhat erroneous: asciify.  The top-of-stack is popped.  If it was a number, then the low-order byte of this number is converted into a string and pushed onto the stack.  Otherwise the top-of-stack was a string, and the first character of that string is pushed back.  (This command is a GNU extension.)\par
\par
\pard{}{\f1{}x}\par
\pard\li720{}Pops a value off the stack and executes it as a macro.  Normally it should be a string; if it is a number, it is simply pushed back onto the stack.  For example, {\f1{}[1p]x} executes the macro {\f1{}1p}, which pushes 1 on the stack and prints {\f1{}1} on a separate line.\par
\par
\pard\li720{}Macros are most often stored in registers; {\f1{}[1p]sa} stores a macro to print {\f1{}1} into register {\f1{}a}, and {\f1{}lax} invokes the macro.\par
\par
\pard{}{\f1{}>{\i r}}\par
\pard\li720{}Pops two values off the stack and compares them assuming they are numbers, executing the contents of register {\i r} as a macro if the original top-of-stack is greater.  Thus, {\f1{}1 2>a} will invoke register {\f1{}a}'s contents and {\f1{}2 1>a} will not.\par
\par
\pard{}{\f1{}!>{\i r}}\par
\pard\li720{}Similar but invokes the macro if the original top-of-stack is not greater (is less than or equal to) what was the second-to-top.\par
\par
\pard{}{\f1{}<{\i r}}\par
\pard\li720{}Similar but invokes the macro if the original top-of-stack is less.\par
\par
\pard{}{\f1{}!<{\i r}}\par
\pard\li720{}Similar but invokes the macro if the original top-of-stack is not less (is greater than or equal to) what was the second-to-top.\par
\par
\pard{}{\f1{}={\i r}}\par
\pard\li720{}Similar but invokes the macro if the two numbers popped are equal.\par
\par
\pard{}{\f1{}!={\i r}}\par
\pard\li720{}Similar but invokes the macro if the two numbers popped are not equal.\par
\par
\pard{}{\f1{}?}\par
\pard\li720{}Reads a line from the terminal and executes it.  This command allows a macro to request input from the user.\par
\par
\pard{}{\f1{}q}\par
\pard\li720{}During the execution of a macro, this command exits from the macro and also from the macro which invoked it.  If called from the top level, or from a macro which was called directly from the top level, the {\f1{}q} command will cause {\scaps\fs16{}dc} to exit.\par
\par
\pard{}{\f1{}Q}\par
\pard\li720{}Pops a value off the stack and uses it as a count of levels of macro execution to be exited.  Thus, {\f1{}3Q} exits three levels.\par
\pard{}}\par
\page\pard Node: {\b Status Inquiry}, \keepn Next: {\uldb Miscellaneous}{\v Miscellaneous}, Prev: {\uldb Strings}{\v Strings}, Up: {\uldb Top}{\v Top}\line
K{\footnote K Status Inquiry}
#{\footnote Status_Inquiry}
${\footnote \pard{}Status Inquiry}\par
\pard{\fs24\b Status Inquiry}\par
\par
{\pard{}{\f1{}Z}\par
\pard\li720{}Pops a value off the stack, calculates the number of digits it has (or number of characters, if it is a string) and pushes that number.\par
\par
\pard{}{\f1{}X}\par
\pard\li720{}Pops a value off the stack, calculates the number of fraction digits it has, and pushes that number.  For a string, the value pushed is 0.\par
\par
\pard{}{\f1{}z}\par
\pard\li720{}Pushes the current stack depth: the number of objects on the stack before the execution of the {\f1{}z} command.\par
\pard{}}\par
\page\pard Node: {\b Miscellaneous}, \keepn Next: {\uldb Reporting bugs}{\v Reporting_bugs}, Prev: {\uldb Status Inquiry}{\v Status_Inquiry}, Up: {\uldb Top}{\v Top}\line
K{\footnote K Miscellaneous}
#{\footnote Miscellaneous}
${\footnote \pard{}Miscellaneous}\par
\pard{\fs24\b Miscellaneous}\par
\par
{\pard{}{\f1{}!}\par
\pard\li720{}Will run the rest of the line as a system command.  Note that parsing of the !<, !=, and !> commands take precidence, so if you want to run a command starting with <, =, or > you will need to add a space after the !.\par
\par
\pard{}{\f1{}#}\par
\pard\li720{}Will interpret the rest of the line as a comment.  (This command is a GNU extension.)\par
\par
\pard{}{\f1{}:{\i r}}\par
\pard\li720{}Will pop the top two values off of the stack.  The old second-to-top value will be stored in the array {\i r}, indexed by the old top-of-stack value.\par
\par
\pard{}{\f1{};{\i r}}\par
\pard\li720{}Pops the top-of-stack and uses it as an index into the array {\i r}.  The selected value is then pushed onto the stack.\par
\pard{}}\par
\pard{}Note that each stacked instance of a register has its own array associated with it.  Thus {\f1{}1 {\i 0:a} 0S{\i a} 2 {\i 0:a} L{\i a} {\i 0;a}p} will print 1, because the 2 was stored in an instance of {\i 0:a} that was later popped.\par
\par
\page\pard Node: {\b Reporting bugs}, \keepn Next: {\uldb }{\v }, Prev: {\uldb Miscellaneous}{\v Miscellaneous}, Up: {\uldb Top}{\v Top}\line
K{\footnote K Reporting bugs}
#{\footnote Reporting_bugs}
${\footnote \pard{}Reporting bugs}\par
\pard{\fs24\b Reporting bugs}\par
\par
\pard{}Email bug reports to {\f1{}bug-gnu-utils@prep.ai.mit.edu}.  Be sure to include the word "dc" somewhere in the "Subject:" field.\par
\par
\page K{\footnote Makertf}#{\footnote hcMakertf}${\footnote \pard{}About Makertf}\pard{\fs24\b About Makertf}\par\par\pard{}Makertf is a program that converts "Texinfo" files into "Rich Text Format" (RTF) files. It can be used to make WinHelp Files from GNU manuals and other documentation written in Texinfo. Visit http://www.snafu.de/~cschenk/makertf for more information.}