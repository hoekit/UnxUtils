Install
=======

You will need an ANSI C compiler (like gcc or egcs) to compile
this package.

Just type `make', followed by `make install'.

History
=======

The main difference with version 1.0 by Paul Vixie is that this
version will not return directory names as being executables
and that by default it will expand a leading "./" and "~/" to
its full path on output.

Manual page
===========

WHICH(1)                                                 WHICH(1)


NAME
       which - show full path of commands

SYNOPSIS
       which [options] [--] programname [...]

DESCRIPTION
       Which takes one or more arguments.  For each of its argu-
       ments it prints to stdout the full path of the executables
       that would have been executed when this argument had been
       entered at the shell prompt.  It does this by searching
       for an executable or script in the directories listed in
       the environment variable PATH using the same algorithm as
       bash(1).

OPTIONS
       --version, -v, -V
           Print version information on standard output then exit
           successfully.

       --skip-dot
           Skip directories in PATH that start with a dot.

       --skip-tilde
           Skip directories in PATH that start with a tilde and
           executables which reside in the HOME directory.

       --show-dot
           If a directory in PATH starts with a dot and a match-
           ing executable was found for that path, then print
           "./programname" rather than the full path.

       --show-tilde
           Output a tilde when a directory matches the HOME
           directory.  This option is ignored when which is
           invoked as root.

       --tty-only
           Stop processing options on the right if not on tty.

       --all, -a
           Print all matching executables in PATH, not just the
           first.

RETURN VALUE
       Which returns the number of failed arguments, or -1 when
       no programname was given.

EXAMPLE
       A useful way to use this utility is by adding an alias for
       which like the following:

              alias which='which --tty-only --show-tilde --show-dot'
       This will print the readable ~/ and ./ when starting which
       from  your prompt, while still printing the full path when
       used from a script:

              > which q2
              ~/bin/q2
              > echo `which q2`
              /home/carlo/bin/q2

BUGS
       If programname is an alias which starts a  different  exe-
       cutable,  then  which will give the wrong path; it doesn't
       do alias expansion.  The HOME directory is  determined  by
       looking  for  the  HOME environment variable, which aborts
       when this variable doesn't exist.  Which will consider two
       equivalent  directories  to  be different when one of them
       contains a path with a symbolic link.

AUTHOR
       Carlo Wood <carlo@gnu.org>

SEE ALSO
       bash(1)
