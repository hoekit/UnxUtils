<!-- manual page source format generated by PolyglotMan v3.0.7, -->
<!-- available via anonymous ftp from ftp.cs.berkeley.edu:/ucb/people/phelps/tcltk/rman.tar.Z -->

<HTML>
<HEAD>
<TITLE>less(man) manual page</TITLE>
</HEAD>
<BODY bgcolor=white>
<A HREF="#toc">Table of Contents</A><P>

<H1>less(man) manual page</H1>

<H2><A NAME="sect0" HREF="#toc0">Name</A></H2>


<P>
less - opposite of more

<H2><A NAME="sect1" HREF="#toc1"><B>Synopsis</B></A></H2>

<P>
<B>less</B> <B>-?</B><BR>

<B>less</B> <B>--help</B><BR>

<B>less</B> <B>-V</B><BR>

<B>less</B> <B>--version</B><BR>

<B>less</B> <B>[-[+]aBcCdeEfgGiImMnNqQrsSuUVwX]</B><BR>

<B>[-b</B> <I>bufs</I><B>]</B> <B>[-h</B> <I>lines</I><B>]</B> <B>[-j</B> <I>line</I><B>]</B> <B>[-k</B> <I>keyfile</I><B>]</B>
<B>[-{oO}</B> <I>logfile</I><B>]</B> <B>[-p</B> <I>pattern</I><B>]</B> <B>[-P</B> <I>prompt</I><B>]</B> <B>[-t</B> <I>tag</I><B>]</B>
<B>[-T</B> <I>tagsfile</I><B>]</B> <B>[-x</B> <I>tab</I><B>]</B> <B>[-y</B> <I>lines</I><B>]</B> <B>[-[z]</B> <I>lines</I><B>]</B>
<B>[+[+]</B><I>cmd</I><B>]</B> <B>[--]</B> <B>[</B><I>filename</I><B>]...</B><BR>

(See the OPTIONS section for alternate option syntax with
long option names.)

<H2><A NAME="sect2" HREF="#toc2"><B>Description</B></A></H2>

<P>
<I>Less</I> is a program similar to <I>more</I> (1), but which allows
backward movement in the file as well as forward movement.
Also, <I>less</I> does not have to read the entire input file
before starting, so with large input files it starts up
faster than text editors like <I>vi</I> (1). <I>Less</I> uses termcap
(or terminfo on some systems), so it can run on a variety
of terminals. There is even limited support for hardcopy
terminals. (On a hardcopy terminal, lines which should be
printed at the top of the screen are prefixed with a
caret.)
<P>
Commands are based on both <I>more</I> and <I>vi.</I> Commands may be
preceded by a decimal number, called N in the descriptions
below. The number is used by some commands, as indicated.

<H2><A NAME="sect3" HREF="#toc3"><B>Commands</B></A></H2>

<P>
In the following descriptions, ^X means control-X. ESC
stands for the ESCAPE key; for example ESC-v means the two
character sequence ESCAPE", then v".
<P>
h or H Help: display a summary of these commands. If you
forget all the other commands, remember this one.
<P>
SPACE or ^V or f or ^F<BR>

Scroll forward N lines, default one window (see
option -z below). If N is more than the screen
size, only the final screenful is displayed. Warning:
some systems use ^V as a special literalization
character.

<DL>

<DT>z </DT></DT>
<DD>     Like SPACE, but if N is specified, it becomes the
new window size.
</DD>

<DT>ESC-SPACE</DT></DT>
<DD>
Like SPACE, but scrolls a full screenful, even if
it reaches end-of-file in the process.
</DD>
</DL>
<P>
RETURN or ^N or e or ^E or j or ^J
Scroll forward N lines, default 1. The entire N
lines are displayed, even if N is more than the
screen size.
<P>
d or ^D<BR>

Scroll forward N lines, default one half of the
screen size. If N is specified, it becomes the new
default for subsequent d and u commands.
<P>
b or ^B or ESC-v<BR>

Scroll backward N lines, default one window (see
option -z below). If N is more than the screen
size, only the final screenful is displayed.

<DL>

<DT>w </DT></DT>
<DD>     Like ESC-v, but if N is specified, it becomes the
new window size.
</DD>
</DL>
<P>
y or ^Y or ^P or k or ^K<BR>

Scroll backward N lines, default 1. The entire N
lines are displayed, even if N is more than the
screen size. Warning: some systems use ^Y as a
special job control character.
<P>
u or ^U<BR>

Scroll backward N lines, default one half of the
screen size. If N is specified, it becomes the new
default for subsequent d and u commands.
<P>
ESC-) or RIGHTARROW<BR>

Scroll horizontally right N characters, default 8.
This behaves best if you also set the -S option
(chop lines). Note that if you wish to enter a
number N, you must use ESC-), not RIGHTARROW,
because the arrow is taken to be a line editing
command (see the LINE EDITING section).
<P>
ESC-( or LEFTARROW<BR>

Scroll horizontally left N characters, default 8.
<P>
r or ^R or ^L<BR>

Repaint the screen.

<DL>

<DT>R </DT></DT>
<DD>     Repaint the screen, discarding any buffered input.
Useful if the file is changing while it is being
viewed.
</DD>

<DT>F </DT></DT>
<DD>     Scroll forward, and keep trying to read when the
end of file is reached. Normally this command
would be used when already at the end of the file.
It is a way to monitor the tail of a file which is
growing while it is being viewed. (The behavior is
similar to the tail -f command.)
</DD>
</DL>
<P>
g or &lt; or ESC-&lt;<BR>

Go to line N in the file, default 1 (beginning of
file). (Warning: this may be slow if N is large.)
<P>
G or &gt; or ESC-&gt;<BR>

Go to line N in the file, default the end of the
file. (Warning: this may be slow if N is large, or
if N is not specified and standard input, rather
than a file, is being read.)
<P>
p or % Go to a position N percent into the file. N should
be between 0 and 100.

<DL>

<DT>{ </DT></DT>
<DD>     If a left curly bracket appears in the top line
displayed on the screen, the { command will go to
the matching right curly bracket. The matching
right curly bracket is positioned on the bottom
line of the screen. If there is more than one left
curly bracket on the top line, a number N may be
used to specify the N-th bracket on the line.
</DD>

<DT>} </DT></DT>
<DD>     If a right curly bracket appears in the bottom line
displayed on the screen, the } command will go to
the matching left curly bracket. The matching left
curly bracket is positioned on the top line of the
screen. If there is more than one right curly
bracket on the top line, a number N may be used to
specify the N-th bracket on the line.
</DD>

<DT>( </DT></DT>
<DD>     Like {, but applies to parentheses rather than
curly brackets.
</DD>

<DT>) </DT></DT>
<DD>     Like }, but applies to parentheses rather than
curly brackets.
</DD>

<DT>[ </DT></DT>
<DD>     Like {, but applies to square brackets rather than
curly brackets.
</DD>

<DT>] </DT></DT>
<DD>     Like }, but applies to square brackets rather than
curly brackets.
</DD>
</DL>
<P>
ESC-^F Followed by two characters, acts like {, but uses
the two characters as open and close brackets,
respectively. For example, ESC ^F &lt; &gt; could be
used to go forward to the &gt; which matches the &lt; in
the top displayed line.
<P>
ESC-^B Followed by two characters, acts like }, but uses
the two characters as open and close brackets,
respectively. For example, ESC ^B &lt; &gt; could be
used to go backward to the &lt; which matches the &gt; in
the bottom displayed line.

<DL>

<DT>m </DT></DT>
<DD>     Followed by any lowercase letter, marks the current
position with that letter.
</DD>

<DT>` </DT></DT>
<DD>     (Single quote.) Followed by any lowercase letter,
returns to the position which was previously marked
with that letter. Followed by another single
quote, returns to the position at which the last
large movement command was executed. Followed by
a ^ or $, jumps to the beginning or end of the file
respectively. Marks are preserved when a new file
is examined, so the ` command can be used to switch
between input files.
</DD>

<DT>^X^X </DT></DT>
<DD>Same as single quote.
</DD>
</DL>
<P>
/pattern<BR>

Search forward in the file for the N-th line containing
the pattern. N defaults to 1. The pattern
is a regular expression, as recognized by <I>ed.</I> The
search starts at the second line displayed (but see
the -a and -j options, which change this).
<P>
Certain characters are special if entered at the
beginning of the pattern; they modify the type of
search rather than become part of the pattern:
<P>
^N or !<BR>

Search for lines which do NOT match the pattern.
<P>
^E or *<BR>

Search multiple files. That is, if the
search reaches the END of the current file
without finding a match, the search continues
in the next file in the command line
list.
<P>
^F or @<BR>

Begin the search at the first line of the
FIRST file in the command line list, regardless
of what is currently displayed on the
screen or the settings of the -a or -j
options.

<DL>

<DT>^K </DT></DT>
<DD>    Highlight any text which matches the pattern
on the current screen, but don't move to the
first match (KEEP current position).
</DD>

<DT>^R </DT></DT>
<DD>    Don't interpret regular expression metacharacters;
that is, do a simple textual comparison.
</DD>
</DL>
<P>
?pattern<BR>

Search backward in the file for the N-th line
containing the pattern. The search starts at the
line immediately before the top line displayed.
<P>
Certain characters are special as in the / command:
<P>
^N or !<BR>

Search for lines which do NOT match the pattern.
<P>
^E or *<BR>

Search multiple files. That is, if the
search reaches the beginning of the current
file without finding a match, the search
continues in the previous file in the command
line list.
<P>
^F or @<BR>

Begin the search at the last line of the
last file in the command line list, regardless
of what is currently displayed on the
screen or the settings of the -a or -j
options.

<DL>

<DT>^K </DT></DT>
<DD>    As in forward searches.
</DD>

<DT>^R </DT></DT>
<DD>    As in forward searches.
</DD>
</DL>
<P>
ESC-/pattern<BR>

Same as /*".
<P>
ESC-?pattern<BR>

Same as ?*".

<DL>

<DT>n </DT></DT>
<DD>     Repeat previous search, for N-th line containing
the last pattern. If the previous search was modified
by ^N, the search is made for the N-th line
NOT containing the pattern. If the previous search
was modified by ^E, the search continues in the
next (or previous) file if not satisfied in the
current file. If the previous search was modified
by ^R, the search is done without using regular
expressions. There is no effect if the previous
search was modified by ^F or ^K.
</DD>

<DT>N </DT></DT>
<DD>     Repeat previous search, but in the reverse direction.
</DD>
</DL>
<P>
ESC-n Repeat previous search, but crossing file boundaries.
The effect is as if the previous search
were modified by *.
<P>
ESC-N Repeat previous search, but in the reverse direction
and crossing file boundaries.
<P>
ESC-u Undo search highlighting. Turn off highlighting of
strings matching the current search pattern. If
highlighting is already off because of a previous
ESC-u command, turn highlighting back on. Any
search command will also turn highlighting back on.
(Highlighting can also be disabled by toggling the
-G option; in that case search commands do not turn
highlighting back on.)
<P>
:e [filename]<BR>

Examine a new file. If the filename is missing,
the current file (see the :n and :p commands
below) from the list of files in the command line
is re-examined. A percent sign (%) in the filename
is replaced by the name of the current file. A
pound sign (#) is replaced by the name of the previously
examined file. However, two consecutive
percent signs are simply replaced with a single
percent sign. This allows you to enter a filename
that contains a percent sign in the name. Similarly,
two consecutive pound signs are replaced
with a single pound sign. The filename is inserted
into the command line list of files so that it can
be seen by subsequent :n and :p commands. If the
filename consists of several files, they are all
inserted into the list of files and the first one
is examined. If the filename contains one or more
spaces, the entire filename should be enclosed in
double quotes (also see the - option).
<P>
^X^V or E<BR>

Same as :e. Warning: some systems use ^V as a special
literalization character. On such systems,
you may not be able to use ^V.

<DL>

<DT>:n </DT></DT>
<DD>    Examine the next file (from the list of files given
in the command line). If a number N is specified,
the N-th next file is examined.
</DD>

<DT>:p </DT></DT>
<DD>    Examine the previous file in the command line list.
If a number N is specified, the N-th previous file
is examined.
</DD>

<DT>:x </DT></DT>
<DD>    Examine the first file in the command line list.
If a number N is specified, the N-th file in the
list is examined.
</DD>

<DT>:d </DT></DT>
<DD>    Remove the current file from the list of files.
</DD>
</DL>
<P>
= or ^G or :f<BR>

Prints some information about the file being
viewed, including its name and the line number and
byte offset of the bottom line being displayed. If
possible, it also prints the length of the file,
the number of lines in the file and the percent of
the file above the last displayed line.

<DL>

<DT>- </DT></DT>
<DD>     Followed by one of the command line option letters
(see OPTIONS below), this will change the setting
of that option and print a message describing the
new setting. If a ^P (CONTROL-P) is entered immediately
after the dash, the setting of the option
is changed but no message is printed. If the
option letter has a numeric value (such as -b or
-h), or a string value (such as -P or -t), a new
value may be entered after the option letter. If
no new value is entered, a message describing the
current setting is printed and nothing is changed.
</DD>

<DT>-- </DT></DT>
<DD>    Like the - command, but takes a long option name
(see OPTIONS below) rather than a single option
letter. You must press RETURN after typing the
option name. A ^P immediately after the second
dash suppresses printing of a message describing
the new setting, as in the - command.
</DD>

<DT>-+ </DT></DT>
<DD>    Followed by one of the command line option letters
this will reset the option to its default setting
and print a message describing the new setting.
(The -+<I>X</I> command does the same thing as -+<I>X</I> on
the command line.) This does not work for stringvalued
options.
</DD>

<DT>--+ </DT></DT>
<DD>   Like the -+ command, but takes a long option name
rather than a single option letter.
</DD>

<DT>-! </DT></DT>
<DD>    Followed by one of the command line option letters,
this will reset the option to the opposite of its
default setting and print a message describing the
new setting. This does not work for numeric or
string-valued options.
</DD>

<DT>--! </DT></DT>
<DD>   Like the -! command, but takes a long option name
rather than a single option letter.
</DD>

<DT>_ </DT></DT>
<DD>     (Underscore.) Followed by one of the command line
option letters, this will print a message describing
the current setting of that option. The setting
of the option is not changed.
</DD>

<DT>__ </DT></DT>
<DD>    (Double underscore.) Like the _ (underscore) command,
but takes a long option name rather than a
single option letter. You must press RETURN after
typing the option name.
</DD>

<DT>+cmd </DT></DT>
<DD>Causes the specified cmd to be executed each time a
new file is examined. For example, +G causes <I>less</I>
to initially display each file starting at the end
rather than the beginning.
</DD>

<DT>V </DT></DT>
<DD>     Prints the version number of <I>less</I> being run.
</DD>
</DL>
<P>
q or Q or :q or :Q or ZZ<BR>

Exits <I>less.</I>
<P>
The following four commands may or may not be valid,
depending on your particular installation.

<DL>

<DT>v </DT></DT>
<DD>     Invokes an editor to edit the current file being
viewed. The editor is taken from the environment
variable VISUAL if defined, or EDITOR if VISUAL is
not defined, or defaults to vi if neither VISUAL
nor EDITOR is defined. See also the discussion of
LESSEDIT under the section on PROMPTS below.
</DD>
</DL>
<P>
! shell-command<BR>

Invokes a shell to run the shell-command given. A
percent sign (%) in the command is replaced by the
name of the current file. A pound sign (#) is
replaced by the name of the previously examined
file. !! repeats the last shell command. !"
with no shell command simply invokes a shell. On
Unix systems, the shell is taken from the environment
variable SHELL, or defaults to sh". On MSDOS
and OS/2 systems, the shell is the normal command
processor.
<P>
| &lt;m&gt; shell-command<BR>

&lt;m&gt; represents any mark letter. Pipes a section of
the input file to the given shell command. The
section of the file to be piped is between the
first line on the current screen and the position
marked by the letter. &lt;m&gt; may also be ^ or $ to
indicate beginning or end of file respectively. If
&lt;m&gt; is . or newline, the current screen is piped.
<P>
s filename<BR>

Save the input to a file. This only works if the
input is a pipe, not an ordinary file.

<H2><A NAME="sect4" HREF="#toc4"><B>Options</B></A></H2>

<P>
Command line options are described below. Most options
may be changed while <I>less</I> is running, via the - command.
<P>
Most options may be given in one of two forms: either a
dash followed by a single letter, or two dashes followed
by a long option name. A long option name may be abbreviated
as long as the abbreviation is unambiguous. For
example, --quit-at-eof may be abbreviated --quit, but not
--qui, since both --quit-at-eof and --quiet begin with
--qui. Some long option names are in uppercase, such as
--QUIT-AT-EOF, as distinct from --quit-at-eof. Such
option names need only have their first letter capitalized;
the remainder of the name may be in either case.
For example, --Quit-at-eof is equivalent to --QUIT-AT-EOF.
<P>
Options are also taken from the environment variable
LESS". For example, to avoid typing less -options ..."
each time <I>less</I> is invoked, you might tell <I>csh:</I>
<P>
setenv LESS -options"
<P>
or if you use <I>sh:</I>
<P>
LESS="-options"; export LESS
<P>
On MS-DOS, you don't need the quotes, but you should
replace any percent signs in the options string by double
percent signs.
<P>
The environment variable is parsed before the command
line, so command line options override the LESS environment
variable. If an option appears in the LESS variable,
it can be reset to its default value on the command line
by beginning the command line option with -+".
<P>
For options like -P or -D which take a following string, a
dollar sign ($) must be used to signal the end of the
string. For example, to set two -D options on MS-DOS, you
must have a dollar sign between them, like this:
<P>
LESS="-Dn9.1$-Ds4.1"

<DL>

<DT>-? or --help</DT></DT>
<DD>
This option displays a summary of the commands
accepted by <I>less</I> (the same as the h command).
(Depending on how your shell interprets the question
mark, it may be necessary to quote the question
mark, thus: -\?".)
</DD>

<DT>-a or --search-skip-screen</DT></DT>
<DD>
Causes searches to start after the last line displayed
on the screen, thus skipping all lines displayed
on the screen. By default, searches start
at the second line on the screen (or after the last
found line; see the -j option).
</DD>

<DT>-b<I>n</I> or --buffers=<I>n</I></DT></DT>
<DD>
Specifies the number of buffers <I>less</I> will use for
each file. Buffers are 1K, and by default 10
buffers are used for each file (except if the file
is a pipe; see the -B option). The number <I>n</I> specifies
a different number of buffers to use.
</DD>

<DT>-B or --auto-buffers</DT></DT>
<DD>
By default, when data is read from a pipe, buffers
are allocated automatically as needed. If a large
amount of data is read from the pipe, this can
cause a large amount of memory to be allocated.
The -B option disables this automatic allocation of
buffers for pipes, so that only the number of
buffers specified by the -b option are used. Warning:
use of -B can result in erroneous display,
since only the most recently viewed part of the
file is kept in memory; any earlier data is lost.
</DD>

<DT>-c or --clear-screen</DT></DT>
<DD>
Causes full screen repaints to be painted from the
top line down. By default, full screen repaints
are done by scrolling from the bottom of the
screen.
</DD>

<DT>-C or --CLEAR-SCREEN</DT></DT>
<DD>
The -C option is like -c, but the screen is cleared
before it is repainted.
</DD>

<DT>-d or --dumb</DT></DT>
<DD>
The -d option suppresses the error message normally
displayed if the terminal is dumb; that is, lacks
some important capability, such as the ability to
clear the screen or scroll backward. The -d option
does not otherwise change the behavior of <I>less</I> on a
dumb terminal).
</DD>

<DT>-D<B>x</B><I>color</I> or --color=<B>x</B><I>color</I></DT></DT>
<DD>
[MS-DOS only] Sets the color of the text displayed.
<B>x</B> is a single character which selects the type of
text whose color is being set: n=normal, s=standout,
d=bold, u=underlined, k=blink. <I>color</I> is a
pair of numbers separated by a period. The first
number selects the foreground color and the second
selects the background color of the text. A single
number <I>N</I> is the same as <I>N.0</I>.
</DD>

<DT>-e or --quit-at-eof</DT></DT>
<DD>
Causes <I>less</I> to automatically exit the second time
it reaches end-of-file. By default, the only way
to exit <I>less</I> is via the q command.
</DD>

<DT>-E or --QUIT-AT-EOF</DT></DT>
<DD>
Causes <I>less</I> to automatically exit the first time it
reaches end-of-file.
</DD>

<DT>-f or --force</DT></DT>
<DD>
Forces non-regular files to be opened. (A non-regular
file is a directory or a device special file.)
Also suppresses the warning message when a binary
file is opened. By default, <I>less</I> will refuse to
open non-regular files.
</DD>

<DT>-g or --hilite-search</DT></DT>
<DD>
Normally, <I>less</I> will highlight ALL strings which
match the last search command. The -g option
changes this behavior to highlight only the particular
string which was found by the last search command.
This can cause <I>less</I> to run somewhat faster
than the default.
</DD>

<DT>-G or --HILITE-SEARCH</DT></DT>
<DD>
The -G option suppresses all highlighting of
strings found by search commands.
</DD>

<DT>-h<I>n</I> or ---max-back-scroll=<I>n</I></DT></DT>
<DD>
Specifies a maximum number of lines to scroll backward.
If it is necessary to scroll backward more
than <I>n</I> lines, the screen is repainted in a forward
direction instead. (If the terminal does not have
the ability to scroll backward, -h0 is implied.)
</DD>

<DT>-i or --ignore-case</DT></DT>
<DD>
Causes searches to ignore case; that is, uppercase
and lowercase are considered identical. This
option is ignored if any uppercase letters appear
in the search pattern; in other words, if a pattern
contains uppercase letters, then that search does
not ignore case.
</DD>

<DT>-I or --IGNORE-CASE</DT></DT>
<DD>
Like -i, but searches ignore case even if the pattern
contains uppercase letters.
</DD>

<DT>-j<I>n</I> or --jump-target=<I>n</I></DT></DT>
<DD>
Specifies a line on the screen where the target"
line is to be positioned. A target line is the
object of a text search, tag search, jump to a line
number, jump to a file percentage, or jump to a
marked position. The screen line is specified by a
number: the top line on the screen is 1, the next
is 2, and so on. The number may be negative to
specify a line relative to the bottom of the
screen: the bottom line on the screen is -1, the
second to the bottom is -2, and so on. If the -j
option is used, searches begin at the line immediately
after the target line. For example, if -j4"
is used, the target line is the fourth line on the
screen, so searches begin at the fifth line on the
screen.
</DD>

<DT>-k<I>filename</I> or --lesskey-file=<I>filename</I></DT></DT>
<DD>
Causes <I>less</I> to open and interpret the named file as
a <I>lesskey</I> (1) file. Multiple -k options may be
specified. If the LESSKEY environment variable is
set, or if a lesskey file is found in a standard
place (see KEY BINDINGS), it is also used as a
<I>lesskey</I> file.
</DD>

<DT>-m or --long-prompt</DT></DT>
<DD>
Causes <I>less</I> to prompt verbosely (like <I>more</I>), with
the percent into the file. By default, <I>less</I>
prompts with a colon.
</DD>

<DT>-M or --LONG-PROMPT</DT></DT>
<DD>
Causes <I>less</I> to prompt even more verbosely than
<I>more.</I>
</DD>

<DT>-n or --line-numbers</DT></DT>
<DD>
Suppresses line numbers. The default (to use line
numbers) may cause <I>less</I> to run more slowly in some
cases, especially with a very large input file.
Suppressing line numbers with the -n option will
avoid this problem. Using line numbers means: the
line number will be displayed in the verbose prompt
and in the = command, and the v command will pass
the current line number to the editor (see also the
discussion of LESSEDIT in PROMPTS below).
</DD>

<DT>-N or --LINE-NUMBERS</DT></DT>
<DD>
Causes a line number to be displayed at the beginning
of each line in the display.
</DD>

<DT>-o<I>filename</I> or --log-file=<I>filename</I></DT></DT>
<DD>
Causes <I>less</I> to copy its input to the named file as
it is being viewed. This applies only when the
input file is a pipe, not an ordinary file. If the
file already exists, <I>less</I> will ask for confirmation
before overwriting it.
</DD>

<DT>-O<I>filename</I> or --LOG-FILE=<I>filename</I></DT></DT>
<DD>
The -O option is like -o, but it will overwrite an
existing file without asking for confirmation.
</DD>
</DL>
<P>
If no log file has been specified, the -o and -O
options can be used from within <I>less</I> to specify a
log file. Without a file name, they will simply
report the name of the log file. The s command
is equivalent to specifying -o from within <I>less.</I>

<DL>

<DT>-p<I>pattern</I> or --pattern=<I>pattern</I></DT></DT>
<DD>
The -p option on the command line is equivalent to
specifying +/<I>pattern</I>; that is, it tells <I>less</I> to
start at the first occurrence of <I>pattern</I> in the
file.
</DD>

<DT>-P<I>prompt</I> or --prompt=<I>prompt</I></DT></DT>
<DD>
Provides a way to tailor the three prompt styles to
your own preference. This option would normally be
put in the LESS environment variable, rather than
being typed in with each <I>less</I> command. Such an
option must either be the last option in the LESS
variable, or be terminated by a dollar sign. -Ps
followed by a string changes the default (short)
prompt to that string. -Pm changes the medium (-m)
prompt. -PM changes the long (-M) prompt. -Ph
changes the prompt for the help screen. -P=
changes the message printed by the = command. All
prompt strings consist of a sequence of letters and
special escape sequences. See the section on
PROMPTS for more details.
</DD>

<DT>-q or --quiet or --silent</DT></DT>
<DD>
Causes moderately quiet operation: the terminal
bell is not rung if an attempt is made to scroll
past the end of the file or before the beginning of
the file. If the terminal has a visual bell", it
is used instead. The bell will be rung on certain
other errors, such as typing an invalid character.
The default is to ring the terminal bell in all
such cases.
</DD>

<DT>-Q or --QUIET or --SILENT</DT></DT>
<DD>
Causes totally quiet operation: the terminal bell
is never rung.
</DD>

<DT>-r or --raw-control-chars</DT></DT>
<DD>
Causes raw control characters to be displayed.
The default is to display control characters using
the caret notation; for example, a control-A (octal
001) is displayed as ^A". Warning: when the -r
option is used, <I>less</I> cannot keep track of the
actual appearance of the screen (since this depends
on how the screen responds to each type of control
character). Thus, various display problems may
result, such as long lines being split in the wrong
place.
</DD>

<DT>-s or --squeeze-blank-lines</DT></DT>
<DD>
Causes consecutive blank lines to be squeezed into
a single blank line. This is useful when viewing
<I>nroff</I> output.
</DD>

<DT>-S or --chop-long-lines</DT></DT>
<DD>
Causes lines longer than the screen width to be
chopped rather than folded. That is, the remainder
of a long line is simply discarded. The default is
to fold long lines; that is, display the remainder
on the next line.
</DD>

<DT>-t<I>tag</I> or --tag=<I>tag</I></DT></DT>
<DD>
The -t option, followed immediately by a TAG, will
edit the file containing that tag. For this to
work, there must be a file called tags in the
current directory, which was previously built by
the <I>ctags</I> (1) command. This option may also be
specified from within <I>less</I> (using the - command) as
a way of examining a new file. The command :t is
equivalent to specifying -t from within <I>less.</I>
</DD>

<DT>-T<I>tagsfile</I> or --tag-file=<I>tagsfile</I></DT></DT>
<DD>
Specifies a tags file to be used instead of tags".
</DD>

<DT>-u or --underline-special</DT></DT>
<DD>
Causes backspaces and carriage returns to be
treated as printable characters; that is, they are
sent to the terminal when they appear in the input.
</DD>

<DT>-U or --UNDERLINE-SPECIAL</DT></DT>
<DD>
Causes backspaces, tabs and carriage returns to be
treated as control characters; that is, they are
handled as specified by the -r option.
</DD>
</DL>
<P>
By default, if neither -u nor -U is given,
backspaces which appear adjacent to an underscore
character are treated specially: the underlined
text is displayed using the terminal's hardware
underlining capability. Also, backspaces which
appear between two identical characters are treated
specially: the overstruck text is printed using the
terminal's hardware boldface capability. Other
backspaces are deleted, along with the preceding
character. Carriage returns immediately followed
by a newline are deleted. other carriage returns
are handled as specified by the -r option. Text
which is overstruck or underlined can be searched
for if neither -u nor -U is in effect.

<DL>

<DT>-V or --version</DT></DT>
<DD>
Displays the version number of <I>less.</I>
</DD>

<DT>-w or --hilite-unread</DT></DT>
<DD>
Temporarily highlights the first new line after a
forward movement of a full page. The first new"
line is the line immediately following the line
previously at the bottom of the screen. The highlight
is removed at the next command which causes
movement.
</DD>

<DT>-W or --HILITE-UNREAD</DT></DT>
<DD>
Like -w, but temporarily highlights the first new
line after any forward movement command larger than
one line.
</DD>

<DT>-x<I>n</I> or --tabs=<I>n</I></DT></DT>
<DD>
Sets tab stops every <I>n</I> positions. The default for
<I>n</I> is 8.
</DD>

<DT>-X or --no-init</DT></DT>
<DD>
Disables sending the termcap initialization and
deinitialization strings to the terminal. This is
sometimes desirable if the deinitialization string
does something unnecessary, like clearing the
screen.
</DD>

<DT>-y<I>n</I> or --max-forw-scroll=<I>n</I></DT></DT>
<DD>
Specifies a maximum number of lines to scroll forward.
If it is necessary to scroll forward more
than <I>n</I> lines, the screen is repainted instead. The
-c or -C option may be used to repaint from the top
of the screen if desired. By default, any forward
movement causes scrolling.
</DD>

<DT>-[z]<I>n</I> or --window=<I>n</I></DT></DT>
<DD>
Changes the default scrolling window size to <I>n</I>
lines. The default is one screenful. The z and w
commands can also be used to change the window
size. The z may be omitted for compatibility
with <I>more.</I> If the number <I>n</I> is negative, it indicates
<I>n</I> lines less than the current screen size.
For example, if the screen is 24 lines, <I>-z-4</I> sets
the scrolling window to 20 lines. If the screen is
resized to 40 lines, the scrolling window automatically
changes to 36 lines.
</DD>

<DT>-"<I>cc</I> or --quotes=<I>cc</I></DT></DT>
<DD>
Changes the filename quoting character. This may
be necessary if you are trying to name a file which
contains both spaces and quote characters. Followed
by a single character, this changes the quote
character to that character. Filenames containing
a space should then be surrounded by that character
rather than by double quotes. Followed by two
characters, changes the open quote to the first
character, and the close quote to the second character.
Filenames containing a space should then be
preceded by the open quote character and followed
by the close quote character. Note that even after
the quote characters are changed, this option
remains - (a dash followed by a double quote).
</DD>

<DT>-~ or --tilde</DT></DT>
<DD>
Normally lines after end of file are displayed as a
single tilde (~). This option causes lines after
end of file to be displayed as blank lines.
</DD>

<DT>-- </DT></DT>
<DD>    A command line argument of -- marks the end of
option arguments. Any arguments following this are
interpreted as filenames. This can be useful when
viewing a file whose name begins with a - or +".
</DD>

<DT>+ </DT></DT>
<DD>     If a command line option begins with <B>+</B>, the
</DD>
</DL>
<P>
remainder of that option is taken to be an initial
command to <I>less.</I> For example, +G tells <I>less</I> to
start at the end of the file rather than the beginning,
and +/xyz tells it to start at the first
occurrence of xyz in the file. As a special
case, +&lt;number&gt; acts like +&lt;number&gt;g; that is, it
starts the display at the specified line number
(however, see the caveat under the g command
above). If the option starts with ++, the initial
command applies to every file being viewed, not
just the first one. The + command described previously
may also be used to set (or change) an initial
command for every file.

<H2><A NAME="sect5" HREF="#toc5"><B>Line</B> <B>Editing</B></A></H2>

<P>
When entering command line at the bottom of the screen
(for example, a filename for the :e command, or the pattern
for a search command), certain keys can be used to
manipulate the command line. Most commands have an alternate
form in [ brackets ] which can be used if a key does
not exist on a particular keyboard. (The bracketed forms
do not work in the MS-DOS version.) Any of these special
keys may be entered literally by preceding it with the
literal character, either ^V or ^A. A backslash itself
may also be entered literally by entering two backslashes.
<P>
LEFTARROW [ ESC-h ]<BR>

Move the cursor one space to the left.
<P>
RIGHTARROW [ ESC-l ]<BR>

Move the cursor one space to the right.
<P>
^LEFTARROW [ ESC-b or ESC-LEFTARROW ]<BR>

(That is, CONTROL and LEFTARROW simultaneously.)
Move the cursor one word to the left.
<P>
^RIGHTARROW [ ESC-w or ESC-RIGHTARROW ]
(That is, CONTROL and RIGHTARROW simultaneously.)
Move the cursor one word to the right.

<DL>

<DT>HOME [ ESC-0 ]</DT></DT>
<DD>
Move the cursor to the beginning of the line.
</DD>

<DT>END [ ESC-$ ]</DT></DT>
<DD>
Move the cursor to the end of the line.
</DD>

<DT>BACKSPACE</DT></DT>
<DD>
Delete the character to the left of the cursor, or
cancel the command if the command line is empty.
</DD>
</DL>
<P>
DELETE or [ ESC-x ]<BR>

Delete the character under the cursor.

<DL>

<DT>^BACKSPACE [ ESC-BACKSPACE ]</DT></DT>
<DD>
(That is, CONTROL and BACKSPACE simultaneously.)
Delete the word to the left of the cursor.
</DD>
</DL>
<P>
^DELETE [ ESC-X or ESC-DELETE ]<BR>

(That is, CONTROL and DELETE simultaneously.)
Delete the word under the cursor.
<P>
UPARROW [ ESC-k ]<BR>

Retrieve the previous command line.
<P>
DOWNARROW [ ESC-j ]<BR>

Retrieve the next command line.

<DL>

<DT>TAB </DT></DT>
<DD>   Complete the partial filename to the left of the
cursor. If it matches more than one filename, the
first match is entered into the command line.
Repeated TABs will cycle thru the other matching
filenames. If the completed filename is a directory,
a / is appended to the filename. (On MSDOS
systems, a \ is appended.) The environment
variable LESSSEPARATOR can be used to specify a
different character to append to a directory name.
</DD>

<DT>BACKTAB [ ESC-TAB ]</DT></DT>
<DD>
Like, TAB, but cycles in the reverse direction thru
the matching filenames.
</DD>

<DT>^L </DT></DT>
<DD>    Complete the partial filename to the left of the
cursor. If it matches more than one filename, all
matches are entered into the command line (if they
fit).
</DD>
</DL>
<P>
^U (Unix) or ESC (MS-DOS)<BR>

Delete the entire command line, or cancel the command
if the command line is empty. If you have
changed your line-kill character in Unix to something
other than ^U, that character is used instead
of ^U.

<H2><A NAME="sect6" HREF="#toc6"><B>Key</B> <B>Bindings</B></A></H2>

<P>
You may define your own <I>less</I> commands by using the program
<I>lesskey</I> (1) to create a lesskey file. This file specifies
a set of command keys and an action associated with each
key. You may also use <I>lesskey</I> to change the line-editing
keys (see LINE EDITING), and to set environment variables.
If the environment variable LESSKEY is set, <I>less</I> uses that
as the name of the lesskey file. Otherwise, <I>less</I> looks in
a standard place for the lesskey file: On Unix systems,
<I>less</I> looks for a lesskey file called $HOME/.less". On
MS-DOS systems, <I>less</I> looks for a lesskey file called
$HOME/_less", and if it is not found there, then looks
for a lesskey file called _less in any directory
specified in the PATH environment variable. On OS/2 systems,
<I>less</I> looks for a lesskey    file    called
$HOME/less.ini", and if it is not found, then looks for a
lesskey file called less.ini in any directory specified
in the INIT environment variable, and if it not found
there, then looks for a lesskey file called less.ini in
any directory specified in the PATH environment variable.
See the <I>lesskey</I> manual page for more details.

<H2><A NAME="sect7" HREF="#toc7"><B>Input</B> <B>Preprocessor</B></A></H2>

<P>
You may define an input preprocessor for <I>less.</I> Before
<I>less</I> opens a file, it first gives your input preprocessor
a chance to modify the way the contents of the file are
displayed. An input preprocessor is simply an executable
program (or shell script), which writes the contents of
the file to a different file, called the replacement file.
The contents of the replacement file are then displayed in
place of the contents of the original file. However, it
will appear to the user as if the original file is opened;
that is, <I>less</I> will display the original filename as the
name of the current file.
<P>
An input preprocessor receives one command line argument,
the original filename, as entered by the user. It should
create the replacement file, and when finished, print the
name of the replacement file to its standard output. If
the input preprocessor does not output a replacement filename,
<I>less</I> uses the original file, as normal. The input
preprocessor is not called when viewing standard input.
To set up an input preprocessor, set the LESSOPEN environment
variable to a command line which will invoke your
input preprocessor. This command line should include one
occurrence of the string %s", which will be replaced by
the filename when the input preprocessor command is
invoked.
<P>
When <I>less</I> closes a file opened in such a way, it will call
another program, called the input postprocessor, which may
perform any desired clean-up action (such as deleting the
replacement file created by LESSOPEN). This program
receives two command line arguments, the original filename
as entered by the user, and the name of the replacement
file. To set up an input postprocessor, set the LESSCLOSE
environment variable to a command line which will invoke
your input postprocessor. It may include two occurrences
of the string %s"; the first is replaced with the original
name of the file and the second with the name of the
replacement file, which was output by LESSOPEN.
<P>
For example, on many Unix systems, these two scripts will
allow you to keep files in compressed format, but still
let <I>less</I> view them directly:
lessopen.sh:<BR>

#! /bin/sh<BR>

case $1 in<BR>

*.Z) uncompress -c $1 &gt;/tmp/less.$$ 2&gt;/dev/null
if [ -s /tmp/less.$$ ]; then
echo /tmp/less.$$<BR>

else<BR>

rm -f /tmp/less.$$<BR>

fi<BR>

;;<BR>

esac
<P>
lessclose.sh:<BR>

#! /bin/sh<BR>

rm $2
<P>
To use these scripts, put them both where they can be executed
and    set     LESSOPEN="lessopen.sh %s",     and
LESSCLOSE="lessclose.sh %s %s". More complex LESSOPEN and
LESSCLOSE scripts may be written to accept other types of
compressed files, and so on.
<P>
It is also possible to set up an input preprocessor to
pipe the file data directly to <I>less,</I> rather than putting
the data into a replacement file. This avoids the need to
decompress the entire file before starting to view it. An
input preprocessor that works this way is called an input
pipe. An input pipe, instead of writing the name of a
replacement file on its standard output, writes the entire
contents of the replacement file on its standard output.
If the input pipe does not write any characters on its
standard output, then there is no replacement file and
<I>less</I> uses the original file, as normal. To use an input
pipe, make the first character in the LESSOPEN environment
variable a vertical bar (|) to signify that the input preprocessor
is an input pipe.
<P>
For example, on many Unix systems, this script will work
like the previous example scripts:
<P>
lesspipe.sh:<BR>

#! /bin/sh<BR>

case $1 in<BR>

*.Z) uncompress -c $1 2&gt;/dev/null
;;<BR>

esac
<P>
To use this script, put it where it can be executed and
set LESSOPEN="|lesspipe.sh %s". When an input pipe is
used, a LESSCLOSE postprocessor can be used, but it is
usually not necessary since there is no replacement file
to clean up. In this case, the replacement file name
passed to the LESSCLOSE postprocessor is -".

<H2><A NAME="sect8" HREF="#toc8"><B>National</B> <B>Character</B> <B>Sets</B></A></H2>

<P>
There are three types of characters in the input file:
<P>
normal characters<BR>

can be displayed directly to the screen.
<P>
control characters<BR>

should not be displayed directly, but are expected
to be found in ordinary text files (such as
backspace and tab).
<P>
binary characters<BR>

should not be displayed directly and are not
expected to be found in text files.
<P>
A character set is simply a description of which characters
are to be considered normal, control, and binary.
The LESSCHARSET environment variable may be used to select
a character set. Possible values for LESSCHARSET are:
<P>
ascii The default character set. BS, TAB, NL, CR, and
formfeed are control characters, all chars with
values between 32 and 126 are normal, and all others
are binary.
<P>
iso8859<BR>

Selects the ISO 8859/1 character set. latin-1 is
the same as ASCII, except characters between 161
and 255 are treated as normal characters.
<P>
latin1 Same as iso8859.

<DL>

<DT>dos </DT></DT>
<DD>   Selects a character set appropriate for MS-DOS.
</DD>
</DL>
<P>
ebcdic Selects an EBCDIC character set.
<P>
koi8-r Selects a Russian character set.
<P>
next Selects a character set appropriate for NeXT computers.
<P>
In special cases, it may be desired to tailor <I>less</I> to use
a character set other than the ones definable by LESSCHARSET.
In this case, the environment variable LESSCHARDEF
can be used to define a character set. It should
be set to a string where each character in the string represents
one character in the character set. The character
. is used for a normal character, c for control, and
b for binary. A decimal number may be used for repetition.
For example, bccc4b. would mean character 0 is
binary, 1, 2 and 3 are control, 4, 5, 6 and 7 are binary,
and 8 is normal. All characters after the last are taken
to be the same as the last, so characters 9 through 255
would be normal. (This is an example, and does not
necessarily represent any real character set.)
<P>
This table shows the value of LESSCHARDEF which is equivalent
to each of the possible values for LESSCHARSET:

<DL>

<DT>ascii </DT></DT>
<DD>    8bcccbcc18b95.b
</DD>

<DT>dos </DT></DT>
<DD>      8bcccbcc12bc5b95.b.
</DD>

<DT>ebcdic </DT></DT>
<DD>   5bc6bcc7bcc41b.9b7.9b5.b..8b6.10b6.b9.7b
9.8b8.17b3.3b9.7b9.8b8.6b10.b.b.b.
iso8859 8bcccbcc18b95.33b.
</DD>

<DT>koi8-r </DT></DT>
<DD>   8bcccbcc18b95.b128.
</DD>

<DT>latin1 </DT></DT>
<DD>   8bcccbcc18b95.33b.
</DD>

<DT>next </DT></DT>
<DD>     8bcccbcc18b95.bb125.bb
</DD>
</DL>
<P>
If neither LESSCHARSET nor LESSCHARDEF is set, but your
system supports the <I>setlocale</I> interface, <I>less</I> will use
setlocale to determine the character set. setlocale is
controlled by setting the LANG or LC_CTYPE environment
variables.
<P>
Control and binary characters are displayed in standout
(reverse video). Each such character is displayed in
caret notation if possible (e.g. ^A for control-A). Caret
notation is used only if inverting the 0100 bit results in
a normal printable character. Otherwise, the character is
displayed as a hex number in angle brackets. This format
can be changed by setting the LESSBINFMT environment variable.
LESSBINFMT may begin with a * and one character
to select the display attribute: *k is blinking, *d is
bold, *u is underlined, *s is standout, and *n is
normal. If LESSBINFMT does not begin with a *", normal
attribute is assumed. The remainder of LESSBINFMT is a
string which may include one printf-style escape sequence
(a % followed by x, X, o, d, etc.). For example, if LESSBINFMT
is *u[%x]", binary characters are displayed in
underlined hexadecimal surrounded by brackets. The
default if no LESSBINFMT is specified is *s&lt;%X&gt;".

<H2><A NAME="sect9" HREF="#toc9"><B>Prompts</B></A></H2>

<P>
The -P option allows you to tailor the prompt to your
preference. The string given to the -P option replaces
the specified prompt string. Certain characters in the
string are interpreted specially. The prompt mechanism is
rather complicated to provide flexibility, but the ordinary
user need not understand the details of constructing
personalized prompt strings.
<P>
A percent sign followed by a single character is expanded
according to what the following character is:

<DL>

<DT>%b<I>X</I> </DT></DT>
<DD>   Replaced by the byte offset into the current input
file. The b is followed by a single character
(shown as <I>X</I> above) which specifies the line whose
byte offset is to be used. If the character is a
t", the byte offset of the top line in the display
is used, an m means use the middle line, a b"
means use the bottom line, a B means use the line
just after the bottom line, and a j means use the
target line, as specified by the -j option.
</DD>

<DT>%B </DT></DT>
<DD>    Replaced by the size of the current input file.
</DD>

<DT>%d<I>X</I> </DT></DT>
<DD>   Replaced by the page number of a line in the input
file. The line to be used is determined by the <I>X</I>,
as with the %b option.
</DD>

<DT>%D </DT></DT>
<DD>    Replaced by the number of pages in the input file,
or equivalently, the page number of the last line
in the input file.
</DD>

<DT>%E </DT></DT>
<DD>    Replaced by the name of the editor (from the VISUAL
environment variable, or the EDITOR environment
variable if VISUAL is not defined). See the discussion
of the LESSEDIT feature below.
</DD>

<DT>%f </DT></DT>
<DD>    Replaced by the name of the current input file.
</DD>

<DT>%i </DT></DT>
<DD>    Replaced by the index of the current file in the
list of input files.
</DD>

<DT>%l<I>X</I> </DT></DT>
<DD>   Replaced by the line number of a line in the input
file. The line to be used is determined by the <I>X</I>,
as with the %b option.
</DD>

<DT>%L </DT></DT>
<DD>    Replaced by the line number of the last line in the
input file.
</DD>

<DT>%m </DT></DT>
<DD>    Replaced by the total number of input files.
</DD>

<DT>%p<I>X</I> </DT></DT>
<DD>   Replaced by the percent into the current input
file. The line used is determined by the <I>X</I> as with
the %b option.
</DD>

<DT>%s </DT></DT>
<DD>    Same as %B.
</DD>

<DT>%t </DT></DT>
<DD>    Causes any trailing spaces to be removed. Usually
used at the end of the string, but may appear anywhere.
</DD>

<DT>%x </DT></DT>
<DD>    Replaced by the name of the next input file in the
list.
</DD>
</DL>
<P>
If any item is unknown (for example, the file size if
input is a pipe), a question mark is printed instead.
<P>
The format of the prompt string can be changed depending
on certain conditions. A question mark followed by a
single character acts like an IF": depending on the following
character, a condition is evaluated. If the condition
is true, any characters following the question mark
and condition character, up to a period, are included in
the prompt. If the condition is false, such characters
are not included. A colon appearing between the question
mark and the period can be used to establish an ELSE":
any characters between the colon and the period are
included in the string if and only if the IF condition is
false. Condition characters (which follow a question
mark) may be:

<DL>

<DT>?a </DT></DT>
<DD>    True if any characters have been included in the
prompt so far.
</DD>

<DT>?b<I>X</I> </DT></DT>
<DD>   True if the byte offset of the specified line is
known.
</DD>

<DT>?B </DT></DT>
<DD>    True if the size of current input file is known.
</DD>

<DT>?d<I>X</I> </DT></DT>
<DD>   True if the page number of the specified line is
known.
</DD>

<DT>?e </DT></DT>
<DD>    True if at end-of-file.
</DD>

<DT>?f </DT></DT>
<DD>    True if there is an input filename (that is, if
input is not a pipe).
</DD>

<DT>?l<I>X</I> </DT></DT>
<DD>   True if the line number of the specified line is
known.
</DD>

<DT>?L </DT></DT>
<DD>    True if the line number of the last line in the
file is known.
</DD>

<DT>?m </DT></DT>
<DD>    True if there is more than one input file.
</DD>

<DT>?n </DT></DT>
<DD>    True if this is the first prompt in a new input
file.
</DD>

<DT>?p<I>X</I> </DT></DT>
<DD>   True if the percent into the current input file of
the specified line is known.
</DD>

<DT>?s </DT></DT>
<DD>    Same as ?B".
</DD>

<DT>?x </DT></DT>
<DD>    True if there is a next input file (that is, if the
current input file is not the last one).
</DD>
</DL>
<P>
Any characters other than the special ones (question mark,
colon, period, percent, and backslash) become literally
part of the prompt. Any of the special characters may be
included in the prompt literally by preceding it with a
backslash.
<P>
Some examples:
?f%f:Standard input.
<P>
This prompt prints the filename, if known; otherwise the
string Standard input".
<P>
?f%f .?ltLine %lt:?pt%pt\%:?btByte %bt:-...
<P>
This prompt would print the filename, if known. The filename
is followed by the line number, if known, otherwise
the percent if known, otherwise the byte offset if known.
Otherwise, a dash is printed. Notice how each question
mark has a matching period, and how the % after the %pt is
included literally by escaping it with a backslash.
<P>
?n?f%f .?m(file %i of %m) ..?e(END) ?x- Next\: %x..%t
<P>
This prints the filename if this is the first prompt in a
file, followed by the file N of N message if there is
more than one input file. Then, if we are at end-of-file,
the string (END) is printed followed by the name of the
next file, if there is one. Finally, any trailing spaces
are truncated. This is the default prompt. For reference,
here are the defaults for the other two prompts (-m
and -M respectively). Each is broken into two lines here
for readability only.
<P>
?n?f%f .?m(file %i of %m) ..?e(END) ?x- Next\: %x.:
?pB%pB\%:byte %bB?s/%s...%t
<P>
?f%f .?n?m(file %i of %m) ..?ltline %lt?L/%L. :byte %bB?s/%s. .
?e(END) ?x- Next\: %x.:?pB%pB\%..%t
<P>
And here is the default message produced by the = command:
<P>
?f%f .?m(file %i of %m) .?ltline %lt?L/%L. .
byte %bB?s/%s. ?e(END) :?pB%pB\%..%t
<P>
The prompt expansion features are also used for another
purpose: if an environment variable LESSEDIT is defined,
it is used as the command to be executed when the v command
is invoked. The LESSEDIT string is expanded in the
same way as the prompt strings. The default value for
LESSEDIT is:
<P>
%E ?lm+%lm. %f
<P>
Note that this expands to the editor name, followed by a +
and the line number, followed by the file name. If your
editor does not accept the +linenumber syntax, or has
other differences in invocation syntax, the LESSEDIT variable
can be changed to modify this default.

<H2><A NAME="sect10" HREF="#toc10"><B>Security</B></A></H2>

<P>
When the environment variable LESSSECURE is set to 1, <I>less</I>
runs in a secure mode. This means these features are
disabled:

<DL>

<DT>! </DT></DT>
<DD>     the shell command
</DD>

<DT>| </DT></DT>
<DD>     the pipe command
</DD>

<DT>:e </DT></DT>
<DD>    the examine command.
</DD>

<DT>v </DT></DT>
<DD>     the editing command
</DD>
</DL>
<P>
s -o log files

<DL>

<DT>-k </DT></DT>
<DD>    use of lesskey files
</DD>

<DT>-t </DT></DT>
<DD>    use of tags files
</DD>
</DL>
<P>
metacharacters in filenames, such as *
<P>
filename completion (TAB, ^L)
<P>
Less can also be compiled to be permanently in secure"
mode.

<H2><A NAME="sect11" HREF="#toc11"><B>Environment</B> <B>Variables</B></A></H2>

<P>
Environment variables may be specified either in the system
environment as usual, or in a <I>lesskey</I> (1) file.

<DL>

<DT>COLUMNS</DT></DT>
<DD>
Sets the number of columns on the screen. Takes
precedence over the number of columns specified by
the TERM variable. (But if you have a windowing
system which supports TIOCGWINSZ or WIOCGETD, the
window system's idea of the screen size takes
precedence over the LINES and COLUMNS environment
variables.)
</DD>
</DL>
<P>
EDITOR The name of the editor (used for the v command).
<P>
HOME Name of the user's home directory (used to find a
lesskey file on Unix systems).

<DL>

<DT>HOMEDRIVE, HOMEPATH</DT></DT>
<DD>
Concatenation of the HOMEDRIVE and HOMEPATH environment
variables is the name of the user's home
directory if the HOME variable is not set (only in
the Windows version).
</DD>
</DL>
<P>
INIT Name of the user's init directory (used to find a
lesskey file on OS/2 systems).

<DL>

<DT>LANG </DT></DT>
<DD>Language for determining the character set.
</DD>

<DT>LC_CTYPE</DT></DT>
<DD>
Language for determining the character set.
</DD>

<DT>LESS </DT></DT>
<DD>Options which are passed to <I>less</I> automatically.
</DD>

<DT>LESSBINFMT</DT></DT>
<DD>
Format for displaying non-printable, non-control
characters.
</DD>

<DT>LESSCHARDEF</DT></DT>
<DD>
Defines a character set.
</DD>

<DT>LESSCHARSET</DT></DT>
<DD>
Selects a predefined character set.
</DD>

<DT>LESSCLOSE</DT></DT>
<DD>
Command line to invoke the (optional) input-postprocessor.
</DD>

<DT>LESSECHO</DT></DT>
<DD>
Name of the lessecho program (default lessecho").
The lessecho program is needed to expand metacharacters,
such as * and ?, in filenames on Unix systems.
</DD>

<DT>LESSEDIT</DT></DT>
<DD>
Editor prototype string (used for the v command).
See discussion under PROMPTS.
</DD>

<DT>LESSKEY</DT></DT>
<DD>
Name of the default <A HREF="s">lesskey(1)</A>
 file.
</DD>

<DT>LESSMETACHARS</DT></DT>
<DD>
List of characters which are considered metacharacters"
by the shell.
</DD>

<DT>LESSMETAESCAPE</DT></DT>
<DD>
Prefix which less will add before each metacharacter
in a command sent to the shell. If LESSMETAESCAPE
is an empty string, commands containing
metacharacters will not be passed to the shell.
</DD>

<DT>LESSOPEN</DT></DT>
<DD>
Command line to invoke the (optional) input-preprocessor.
</DD>

<DT>LESSSECURE</DT></DT>
<DD>
Runs less in secure mode. See discussion under
SECURITY.
</DD>

<DT>LESSSEPARATOR</DT></DT>
<DD>
String to be appended to a directory name in
filename completion.
</DD>
</DL>
<P>
LINES Sets the number of lines on the screen. Takes
precedence over the number of lines specified by
the TERM variable. (But if you have a windowing
system which supports TIOCGWINSZ or WIOCGETD, the
window system's idea of the screen size takes
precedence over the LINES and COLUMNS environment
variables.)
<P>
PATH User's search path (used to find a lesskey file on
MS-DOS and OS/2 systems).
<P>
SHELL The shell used to execute the ! command, as well as
to expand filenames.

<DL>

<DT>TERM </DT></DT>
<DD>The type of terminal on which <I>less</I> is being run.
</DD>
</DL>
<P>
VISUAL The name of the editor (used for the v command).

<H2><A NAME="sect12" HREF="#toc12"><B>See</B> <B>Also</B></A></H2>

<P>
<A HREF="s">lesskey(1)</A>


<H2><A NAME="sect13" HREF="#toc13"><B>Warnings</B></A></H2>

<P>
The = command and prompts (unless changed by -P) report
the line number of the line at the top of the screen, but
the byte and percent of the line at the bottom of the
screen.
<P>
If the :e command is used to name more than one file, and
one of the named files has been viewed previously, the new
files may be entered into the list in an unexpected order.
<P>
On certain older terminals (the so-called magic cookie"
terminals), search highlighting will cause an erroneous
display. On such terminals, search highlighting is disabled
by default to avoid possible problems.
<P>
In certain cases, when search highlighting is enabled and
a search pattern begins with a ^, more text than the
matching string may be highlighted. (This problem does
not occur when less is compiled to use the POSIX regular
expression package.)
<P>
On some systems, <I>setlocale</I> claims that ASCII characters 0
thru 31 are control characters rather than binary characters.
This causes <I>less</I> to treat some binary files as
ordinary, non-binary files. To workaround this problem,
set the environment variable LESSCHARSET to ascii (or
whatever character set is appropriate).
<P>
The MS-DOS and Windows versions sometimes display
incorrect highlighting when lines are longer than the
screen width.
<P>
See http://www.flash.net/~marknu/less for the latest list
of known bugs in this version of less.

<H2><A NAME="sect14" HREF="#toc14"><B>Copyright</B></A></H2>

<P>
Copyright (C) 1999 Mark Nudelman
<P>
less is part of the GNU project and is free software; you
can redistribute it and/or modify it under the terms of
the GNU General Public License as published by the Free
Software Foundation; either version 2, or (at your option)
any later version.
<P>
less is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty
of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more
details.
<P>
You should have received a copy of the GNU General Public
License along with less; see the file COPYING. If not,
write to the Free Software Foundation, 59 Temple Place,
Suite 330, Boston, MA 02111-1307, USA.

<H2><A NAME="sect15" HREF="#toc15"><B>Author</B></A></H2>

<P>
Mark Nudelman &lt;marknu@flash.net&gt;<BR>

Send bug reports or comments to the above address or to
bug-less@gnu.org.
<P>

<HR><P>
<A NAME="toc"><B>Table of Contents</B></A><P>
<UL>
<LI><A NAME="toc0" HREF="#sect0">Name</A></LI>
<LI><A NAME="toc1" HREF="#sect1">Synopsis</A></LI>
<LI><A NAME="toc2" HREF="#sect2">Description</A></LI>
<LI><A NAME="toc3" HREF="#sect3">Commands</A></LI>
<LI><A NAME="toc4" HREF="#sect4">Options</A></LI>
<LI><A NAME="toc5" HREF="#sect5">Line Editing</A></LI>
<LI><A NAME="toc6" HREF="#sect6">Key Bindings</A></LI>
<LI><A NAME="toc7" HREF="#sect7">Input Preprocessor</A></LI>
<LI><A NAME="toc8" HREF="#sect8">National Character Sets</A></LI>
<LI><A NAME="toc9" HREF="#sect9">Prompts</A></LI>
<LI><A NAME="toc10" HREF="#sect10">Security</A></LI>
<LI><A NAME="toc11" HREF="#sect11">Environment Variables</A></LI>
<LI><A NAME="toc12" HREF="#sect12">See Also</A></LI>
<LI><A NAME="toc13" HREF="#sect13">Warnings</A></LI>
<LI><A NAME="toc14" HREF="#sect14">Copyright</A></LI>
<LI><A NAME="toc15" HREF="#sect15">Author</A></LI>
</UL>
</BODY></HTML>
